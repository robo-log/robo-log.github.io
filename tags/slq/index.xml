<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SLQ on ROBO LOG</title>
    <link>http://blog.syundo.org/tags/slq/</link>
    <description>Recent content in SLQ on ROBO LOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 17 Sep 2018 15:22:07 +0900</lastBuildDate>
    
	<atom:link href="http://blog.syundo.org/tags/slq/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Differential Dynamic Programming(DDP)/iterative LQR(iLQR)/Sequential LQR(SLQ)</title>
      <link>http://blog.syundo.org/post/20180917-ddp-ilqr-slq/</link>
      <pubDate>Mon, 17 Sep 2018 15:22:07 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/20180917-ddp-ilqr-slq/</guid>
      <description>最適制御の手法である、Differential Dynamic Programming(DDP), iterative LQR(iLQR), Sequential LQR(SLQ) がたまに強化学習の論文に出てくるが、どういう文脈で生まれたものなのか、その関係性はどうなっているのかわからないので私は苦しめられてきた。 以下の資料を参考にして理解を深めていったので、分かる範囲のことをまとめたい。
離散システムの最適化問題 以下の離散システムを考える。 \begin{equation} x_{i+1} = f_i(x_i, u_i), i = 0, \dots, N-1 \label{eq:system_func} \end{equation} ここで、$f_i$は何らかの関数で、線形とは限らない。
このシステムにおいて、以下の評価関数を最小にしたいと考える。 \begin{equation} J(x, u) = \sum_{i=0}^{N-1} L_i(x_i, u_i) + L_f(x_N) \end{equation} $N$は有限の時間ステップ、$L_i(x_i, x_i)$はstep $i$におけるコスト関数であり、 $L_f(X_N)$は終端時刻におけるコストである。 このときに、あるステップ$i$から終端までのコストを
\begin{equation} J_i(x, u) = \sum_{j=i}^{N-1} L_i(x_i, u_i) + L_f(x_N) \end{equation}
とし、$i$から終端までの最適コストを \begin{equation} V_i(x) = \min_u J_i(x, u) \end{equation} とすると、最適コストは部分最適コストで表現できるため、以下のように再帰的に表現できる。 \begin{equation} \begin{aligned} V_i(x) &amp;amp;= \min_u [ l(x_i, u_i) + V_{i+1}(x_{i+1}) ] \\</description>
    </item>
    
  </channel>
</rss>