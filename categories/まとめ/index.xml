<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>まとめ on ROBO LOG</title>
    <link>http://blog.syundo.org/categories/%E3%81%BE%E3%81%A8%E3%82%81/</link>
    <description>Recent content in まとめ on ROBO LOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 17 Sep 2018 15:22:07 +0900</lastBuildDate>
    
	<atom:link href="http://blog.syundo.org/categories/%E3%81%BE%E3%81%A8%E3%82%81/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Differential Dynamic Programming(DDP)/iterative LQR(iLQR)/Sequential LQR(SLQ)</title>
      <link>http://blog.syundo.org/post/20180917-ddp-ilqr-slq/</link>
      <pubDate>Mon, 17 Sep 2018 15:22:07 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/20180917-ddp-ilqr-slq/</guid>
      <description>最適制御の手法である、Differential Dynamic Programming(DDP), iterative LQR(iLQR), Sequential LQR(SLQ) がたまに強化学習の論文に出てくるが、どういう文脈で生まれたものなのか、その関係性はどうなっているのかわからないので私は苦しめられてきた。 以下の資料を参考にして理解を深めていったので、分かる範囲のことをまとめたい。
離散システムの最適化問題 以下の離散システムを考える。 \begin{equation} x_{i+1} = f_i(x_i, u_i), i = 0, \dots, N-1 \label{eq:system_func} \end{equation} ここで、$f_i$は何らかの関数で、線形とは限らない。
このシステムにおいて、以下の評価関数を最小にしたいと考える。 \begin{equation} J(x, u) = \sum_{i=0}^{N-1} L_i(x_i, u_i) + L_f(x_N) \end{equation} $N$は有限の時間ステップ、$L_i(x_i, x_i)$はstep $i$におけるコスト関数であり、 $L_f(X_N)$は終端時刻におけるコストである。 このときに、あるステップ$i$から終端までのコストを
\begin{equation} J_i(x, u) = \sum_{j=i}^{N-1} L_i(x_i, u_i) + L_f(x_N) \end{equation}
とし、$i$から終端までの最適コストを \begin{equation} V_i(x) = \min_u J_i(x, u) \end{equation} とすると、最適コストは部分最適コストで表現できるため、以下のように再帰的に表現できる。 \begin{equation} \begin{aligned} V_i(x) &amp;amp;= \min_u [ l(x_i, u_i) + V_{i+1}(x_{i+1}) ] \\</description>
    </item>
    
    <item>
      <title>Haskellで高階関数を組み合わせて部分文字列を作る例が全然わからなかったから考えた</title>
      <link>http://blog.syundo.org/post/1162/</link>
      <pubDate>Thu, 21 May 2015 22:27:54 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/1162/</guid>
      <description>最近、Haskellの勉強のために「関数プログラミング実践入門」を読んでいる。
高階関数のところまでいったけど僕の頭がクソ雑魚だから例題が全然理解出来なかった…。
Qiitaに記事を移しました。
続きはこちら http://qiita.com/nekokoneko_mode/items/724b7e9bddac58e78e83</description>
    </item>
    
    <item>
      <title>できるだけconstexprを使おう</title>
      <link>http://blog.syundo.org/post/1143/</link>
      <pubDate>Fri, 15 May 2015 02:59:51 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/1143/</guid>
      <description>Effective Modern C++メモ (Moving to Modern C++ : Item 15) constexprがオブジェクトに付加されたときはそのオブジェクトはconstのようなものになる一方で、関数に付加されたときはそれとは少し違う性質のものになるから紛らわしい。
constexprオブジェクトについて constexprをオブジェクトの前に付けるとコンパイル時に用いることができる値になる。このような値は読み取り専用のメモリに配置されるだろうから、特に組み込みの分野で重宝されるだろう。
1 2 3 4 5 6 7  int sz; // コンパイル時に存在しない ... constexpr auto arraySize1 = sz; // エラー。szはコンパイル時には使えない。 std::array&amp;amp;lt;int, sz&amp;amp;gt; data1; // 同様なエラー constexpr auto arraySize2 = 10; // 良い。10はコンパイル時定数。 std::array&amp;amp;lt;int, arraySize&amp;amp;gt; data2; // 良い。    constは同じ役割を果たせない。コンパイル時には値が無いからだ。constexprオブジェクトはconstだが、その逆は成り立たないのである。
constexpr関数について 引数がコンパイル時定数ならばコンパイル時に、そうでなければ実行時に計算される関数。 C++11の場合 関数内に1行、return文があるだけしか認められない。
1 2 3 4  constexpr int pow(int base, int exp) noexcept { return (exp == 0 ?</description>
    </item>
    
    <item>
      <title>ひずみゲージとその利用法</title>
      <link>http://blog.syundo.org/post/895/</link>
      <pubDate>Sat, 04 Jun 2011 03:59:32 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/895/</guid>
      <description>材料試験などによく使われるひずみゲージについて情報をまとめます。ロボットに貼り付けてもフレームの変形などが検知できるので軸力センサのような使い方もできるかもしれませんね。
ひずみゲージの測定原理 ひずみゲージには主にワイヤゲージと箔ゲージ(フォイルゲージ)があります。
ワイヤゲージは薄い台紙の上に細い抵抗線をくねらせながら貼ったもので、箔ゲージは抵抗部に線ではなくエッチング技術で製造したパターンを用いたものです。最近は半導体製造ラインで製造でき安価なので、箔ゲージが主流となっています。
しかしながらワイヤゲージも箔ゲージもその測定原理は同じで、伸びによって変化する導線の抵抗値を読み取ってひずみを測定するというものです。
ひずみとひずみゲージの抵抗値の変化には以下の関係が見られます。抵抗値の式から考えれば当たり前かと思います。
･･･(1)
Rはひずみゲージの抵抗値、Lはひずみゲージの長さです。また、Ksはゲージ率と呼ばれ、ひずみゲージ固有の値です。
ひずみゲージの抵抗値の変化はホイートストーンブリッジ回路で測定されることが多いです。ホイートストーンブリッジは原理的に測定量が平衡点にあるどうかで測定量を知る「零位法」という区分の測定をしているため、測定精度が高く、微少な抵抗値変化も検知できるからです。
ホイートストーンブリッジの回路図は以下の図のようになります。

図　ホイートストーンブリッジ回路
キルヒホッフの法則から以下の式が導き出されます。
･･･(2)
例えば、抵抗R1をひずみゲージだとみなして、R1→R1+ΔR1と変化したとし、他の抵抗値を合わせてR1=R2=R3=R4=Rとします。すると
･･･(3)
となります。
ΔＲ＜＜Ｒであるので分母のΔRを無視すると
･･･(4)
この式(4)と式(1)より
･･･(5)
ひずみεは
･･･(6)
であるので
･･･(7)
とひずみを表すことができます。
以上のようにひずみゲージと、それと抵抗値の等しい抵抗器3つを用いたホイートストーンブリッジ回路で、電圧の変化からひずみを求めることができるのです。
ロゼット解析 </description>
    </item>
    
    <item>
      <title>距離センサ</title>
      <link>http://blog.syundo.org/post/843/</link>
      <pubDate>Fri, 21 Jan 2011 19:33:25 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/843/</guid>
      <description>・距離センサ 赤外線を使った近接センサやPSD距離センサ、超音波センサなどがある。
近接センサ ほぼ触れるかどうかという近距離の物体の存在を検知する。
PSD距離センサ 10～80cm程度の距離を測る。距離に応じた電圧を出力する。
超音波センサ 音波を発して、それが反射して帰ってくるまでの時間を計って距離を測る。基本的に時間を計る処理は自前でする必要がある。
・距離センサリンク 近接センサー　AS-PROX
シャープ測距モジュール　ＧＰ２Ｙ０Ａ２１ＹＫ
超音波センサ（送受信セット）</description>
    </item>
    
    <item>
      <title>ジャイロセンサ</title>
      <link>http://blog.syundo.org/post/882/</link>
      <pubDate>Fri, 21 Jan 2011 18:39:41 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/882/</guid>
      <description>ジャイロセンサは計測対象の動き、特に回転方向の動きを検出するのに用いられるセンサです。一昔前は‘ジャイロ’と言われればコマのジャイロ効果を用いた機器、だと考えれば良かったのですが、近年ではMEMS技術の発達などにより小型化が進み、他の方式のジャイロが主流になりつつあります。
・ジャイロセンサの測定原理 ジャイロセンサとは角速度を検知するセンサである。
一般にジャイロセンサは角速度に比例した電圧を出力端子から出力する。
しかし、ホビーロボット界ではRCジャイロのことも単にジャイロと呼ぶことがある。
RCジャイロは入力されたパルス幅に検知した角速度に比例した幅を加減して出力するものである。
RCジャイロで角速度を検知するにはRCジャイロに特定のパルス幅の信号を入力し、出力信号ともとの信号の差を取ればよい。
RCジャイロでない普通のジャイロセンサでは、角速度に応じた電圧が出力されるわけだが、角速度に対する電圧の変化の割合、すなわち感度はデータシートを読めば分かる。
・使い方 このジャイロセンサの使い方として主に２つ考えられる。
１．「角速度をゲインを通してフィードバックする」
電圧を読み取ってそれに適当な値を乗じた物をサーボ信号値に加える。
２．「積分して角度を求める」
出力電圧を読み取って、感度を参考にして、角速度を正確に求める。それを一定周期の割り込みで積分していけば角度が求まる。
その場合、温度ドリフトや積分誤差が問題になってくる。
・ジャイロセンサリンク RCジャイロ
ＧＷＳジャイロユニット
ジャイロ
AE-GYRO-SMD
ＩＤＧ－３００
司21:HS-EG3</description>
    </item>
    
    <item>
      <title>加速度センサ</title>
      <link>http://blog.syundo.org/post/881/</link>
      <pubDate>Wed, 19 Jan 2011 15:44:34 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/881/</guid>
      <description>加速度センサについて
・加速度センサ 加速度センサは加速度を検知するセンサである。
検知した加速度に対応した電圧を出力したり、1バイト程度のデジタルデータを出力するものなどがある。
加速度センサデバイスには1軸～3軸まで他種類ある。
・使いどころ １．｢衝撃を検知する｣
なんらかの衝撃を与えられると、速度が変化して加速度が発生する。これを検知できる。
人間の場合、座っているときや、走っているときに誰かにぶつかられると衝撃を感じて、受け身の体勢に入ったりする。これをロボットにやらせることができる。
２．｢ロボットの傾斜角度を検知できる」
地球上の物体は常に重力加速度で地面方向に移動しようとする。加速度センサの値を見ると、実はこの重力による加速度も検知している。重力加速度はいつでも物体に働き、常に地面方向に向いているから、ロボットの姿勢が地面に対して(重力方向に対して)何度傾いているかが分かる。
加速度センサは以下のサイトで入手しやすい。
・加速度センサリンク ３軸加速度センサモジュール　ＫＸＭ５２－１０５０
加速度とは速度の時間変化率のこと。
速度が単位時間あたり(例えば1秒)の距離の変化を表しているのと同じように、加速度は単位時間あたりの速度の変化を表している。
速度の例：
1秒の間に、ある物体の位置が5ｍ変化する→5m/s(5メートル毎秒)
加速度の例：
1秒の間に、ある物体の速度が3m/sだけ変化する→3m/ss(3メートル毎秒毎秒)</description>
    </item>
    
  </channel>
</rss>