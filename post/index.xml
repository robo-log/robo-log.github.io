<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ROBO LOG</title>
    <link>http://syundo0730.github.io/post/</link>
    <description>Recent content in Posts on ROBO LOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 01 Jan 2016 23:41:35 +0900</lastBuildDate>
    <atom:link href="http://syundo0730.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>HugoでGitHub markdown形式でコードブロックを記述する</title>
      <link>http://syundo0730.github.io/post/2016-01-01-hugoFormula/</link>
      <pubDate>Fri, 01 Jan 2016 23:41:35 +0900</pubDate>
      
      <guid>http://syundo0730.github.io/post/2016-01-01-hugoFormula/</guid>
      <description>&lt;p&gt;ふとブログにコードを載せようとしてmarkdown形式で書いてみたら反映されなかった。
Hugoに設定が要るらしい。&lt;/p&gt;

&lt;p&gt;Hugoをbrewからインストールして使っていたが、versionが古く0.14がインストールされていた。
最新のHugoをビルドして使う必要がある。&lt;/p&gt;

&lt;p&gt;まずgo を入れていなかったのでインストールする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ef6155&#34;&gt;$ &lt;/span&gt;brew install go
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;mercurial も入れていなかったのでインストール。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ef6155&#34;&gt;$ &lt;/span&gt;brew install mercurial
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;最新のHugoをビルドして使う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ef6155&#34;&gt;$ &lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;export &lt;/span&gt;&lt;span style=&#34;color: #ef6155&#34;&gt;GOPATH&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ef6155&#34;&gt;$HOME&lt;/span&gt;/go
&lt;span style=&#34;color: #ef6155&#34;&gt;$ &lt;/span&gt;go get -v github.com/spf13/hugo
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;$HOME/go/bin にHugoのバイナリが生成されるので、ここをPATHに追加しておく&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ef6155&#34;&gt;$ &lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;export &lt;/span&gt;&lt;span style=&#34;color: #ef6155&#34;&gt;PATH&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ef6155&#34;&gt;$PATH&lt;/span&gt;:&lt;span style=&#34;color: #ef6155&#34;&gt;$HOME&lt;/span&gt;/go/bin
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Hugoがちゃんと入ったか動作確認する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ef6155&#34;&gt;$ &lt;/span&gt;hugo version
Hugo Static Site Generator v0.16-DEV BuildDate: 2016-01-01T23:34:08+09:00
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;次にコードのハイライトを解析するPygmentsのインストールをする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ef6155&#34;&gt;$ &lt;/span&gt;pip install Pygments
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;config.tomlにPygmentsを使うことを設定する。
Pygmentsのスタイルのプレビューは公式サイトで見ることができる。&lt;a href=&#34;http://pygments.org/&#34;&gt;Pygments&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;pygmentscodefences&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color: #2f1e2e&#34;&gt;pygmentsstyle&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #48b685&#34;&gt;&amp;quot;paraiso-light&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ただし、Qiitaのmarkdown記法で&lt;code&gt;bash:filename&lt;/code&gt;とか書いてもファイル名は表示されない&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>第8回ROS勉強会に参加してきた</title>
      <link>http://syundo0730.github.io/post/ROS%E5%8B%89%E5%BC%B7%E4%BC%9A/</link>
      <pubDate>Sun, 04 Oct 2015 13:06:49 +0900</pubDate>
      
      <guid>http://syundo0730.github.io/post/ROS%E5%8B%89%E5%BC%B7%E4%BC%9A/</guid>
      <description>

&lt;p&gt;2015/10/04に開催された、第８回ROS勉強会に参加してきた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://ros-users.doorkeeper.jp/events/30434&#34;&gt;https://ros-users.doorkeeper.jp/events/30434&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;dronecodeの概要とrosの対応について-himamura-さん:cdcb53ee6616dd01ebf332c0122baaf3&#34;&gt;Dronecodeの概要とROSの対応について @himamura さん&lt;/h2&gt;

&lt;p&gt;Droncodeとはオープンソースのフライトコントローラ(のソフト)のことらしい。
これのROS対応を進めているらしい。
Linuxを積んだボードなのでその中でROSが動く。&lt;/p&gt;

&lt;p&gt;遠隔操作をROSのメッセージでもって行うのはやっていないし、難しそうという話が会場から出た。&lt;/p&gt;

&lt;h2 id=&#34;kotlinでrosノードを動かしてみた-iwata-n-さん:cdcb53ee6616dd01ebf332c0122baaf3&#34;&gt;kotlinでROSノードを動かしてみた @iwata_n さん&lt;/h2&gt;

&lt;p&gt;slackのメッセージを受けてROSに送るプロキシみたいなものをkotlinで書いたということ。&lt;/p&gt;

&lt;h3 id=&#34;何をするのか:cdcb53ee6616dd01ebf332c0122baaf3&#34;&gt;何をするのか&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;ROSJavaのインストール&lt;/li&gt;
&lt;li&gt;kotlinを書く&lt;/li&gt;
&lt;li&gt;intelliJを使ってkotlinからJavaに変換する&lt;/li&gt;
&lt;li&gt;ROSの上でkotlinが動く&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;kotlinはJavaを書くよりマシだというだけでなく、
pythonより幾分か素敵な文法と機能を持っているという点で魅力的だと思う。&lt;/p&gt;

&lt;p&gt;ただ、文法がC的でないという理由で馴染めない人も多かろうからROSでは流行らない。&lt;/p&gt;

&lt;h2 id=&#34;sphinxcontrib-ros-otamasan-さん:cdcb53ee6616dd01ebf332c0122baaf3&#34;&gt;sphinxcontrib-ros @otamasan さん&lt;/h2&gt;

&lt;p&gt;ROSのドキュメント生成をソースのクラス定義などを使って一部自動化したという話。
ROSのドキュメントの置き場、生成法にはいろいろ派閥があるそうで、新しい選択肢として名乗りを上げてほしい。&lt;/p&gt;

&lt;h2 id=&#34;自律型生活支援ロボットmini-ken-demu-さん:cdcb53ee6616dd01ebf332c0122baaf3&#34;&gt;自律型生活支援ロボットMini @ken_demu さん&lt;/h2&gt;

&lt;p&gt;発表者が17歳だった。
これを17歳が作れるのかというのがにわかには信じられない。
圧倒されて会場の空気が変わってた。
ものすごい実装力。
オープンソースのものをうまく組み合わせて高度な機能を実現していた。&lt;/p&gt;

&lt;h2 id=&#34;テーブルトップ型対話ロボットsotaの紹介-masato-ka-さん:cdcb53ee6616dd01ebf332c0122baaf3&#34;&gt;テーブルトップ型対話ロボットSotaの紹介 @masato_ka さん&lt;/h2&gt;

&lt;p&gt;NTTデータのロボット事業の紹介。
SotaとNTT研究所の研究成果を組み合わせた例。
高齢者見守りなどに使えるらしい。
例えば夜間に寝床を抜けて徘徊しそうなとき、声をかけてそれを止めたりする。&lt;/p&gt;

&lt;p&gt;最後に未来館でのデモを実演してくれた。
Sotaはまだ一般には売られていないが、将来的に10万程度で買えるらしい。
かわいい。ほしい。&lt;/p&gt;

&lt;h2 id=&#34;euslispでロボットプログラミング-hyaguchijsk:cdcb53ee6616dd01ebf332c0122baaf3&#34;&gt;euslispでロボットプログラミング @hyaguchijsk&lt;/h2&gt;

&lt;p&gt;jskではこれが使われているんだなぁ。
一部だろうけど。
機械系出身のひとにはいきなりLispはきつかろうと思う。&lt;/p&gt;

&lt;p&gt;でも東大生ならなんてことないのかもしれない。
会場では取り残されている人が続出していた様子だ。&lt;/p&gt;

&lt;h2 id=&#34;ros2-0時代に備えるためのc-11-14-otl-さん:cdcb53ee6616dd01ebf332c0122baaf3&#34;&gt;ROS2.0時代に備えるためのc++11, 14 @OTL さん&lt;/h2&gt;

&lt;p&gt;発表中に挙手でアンケートが取られたのだが、
C++11, 14 を普段から使っている人は0だった。&lt;/p&gt;

&lt;p&gt;私はここ半年触っていないなぁと思ったので手を挙げなかったが、
ここはC++勉強会で無かったのでC++14, 17とかいうものの存在を知っているだけで珍しいのだった。
カルチャーショックだ。&lt;/p&gt;

&lt;h2 id=&#34;rviz-rqtなどによるオンライン可視化-ログデータのオフライン可視化-仮-garaemon-coder-さん:cdcb53ee6616dd01ebf332c0122baaf3&#34;&gt;rviz、rqtなどによるオンライン可視化、ログデータのオフライン可視化(仮) @garaemon_coder さん&lt;/h2&gt;

&lt;p&gt;可視化はマルチスレッドのプログラムになるから難しいが、ROSのpub/sub型の通信方式によって可視化がしやすくなった&lt;/p&gt;

&lt;h3 id=&#34;どの方法を使って可視化をするか:cdcb53ee6616dd01ebf332c0122baaf3&#34;&gt;どの方法を使って可視化をするか&lt;/h3&gt;

&lt;h4 id=&#34;タイムスタンプが重要かどうか:cdcb53ee6616dd01ebf332c0122baaf3&#34;&gt;タイムスタンプが重要かどうか&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;重要 =&amp;gt; オフラインでの可視化

&lt;ul&gt;
&lt;li&gt;rqt_bag&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;重要でない =&amp;gt; オンラインでの可視化

&lt;ul&gt;
&lt;li&gt;rqt &amp;lt;- 基本的に使わない。rvizに2次元情報をオーバーレイすればいいから。&lt;/li&gt;
&lt;li&gt;rviz &amp;lt;- プラグインを使ってカスタマイズすればとても便利に&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JSKのリポジトリを見れば幸せになれる。&lt;/p&gt;

&lt;p&gt;気になったもの&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;image_view2

&lt;ul&gt;
&lt;li&gt;画像を表示するだけでなく、マウスでクリックした座標などがトピックとして取得できる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;footstepの可視化のやつ(名前忘れた)

&lt;ul&gt;
&lt;li&gt;初期位置とゴールを手動で指定してやれば、その間の歩行計画をした結果を可視化してくれる&lt;/li&gt;
&lt;li&gt;グリッド状にばらまいたノードも可視化されていて、Footstep planningに覚えがある人にはたまらない画面だった。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;osxではじめるrosプログラミング-youtalk-さん:cdcb53ee6616dd01ebf332c0122baaf3&#34;&gt;OSXではじめるROSプログラミング @youtalk さん&lt;/h2&gt;

&lt;p&gt;OSをアップデートしたらXcodeがアップデートされてしまってROS環境が壊れてしまったらしい。
Macだめじゃん。みたいな空気で終わってしまった。&lt;/p&gt;

&lt;h2 id=&#34;rosと機械学習でroombaを覚醒させたい-準備編-longjie0723-さん:cdcb53ee6616dd01ebf332c0122baaf3&#34;&gt;ROSと機械学習でRoombaを覚醒させたい（準備編） @longjie0723 さん&lt;/h2&gt;

&lt;p&gt;RNNを教師あり学習で学習して赤外線センサとバンパセンサの情報を使って自動走行を実現していた。
PFNの例の車のデモを1台で、教科学習でなくて人手で行ったもの。&lt;/p&gt;

&lt;h2 id=&#34;おわりに:cdcb53ee6616dd01ebf332c0122baaf3&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;面白い発表ばかりだった。ヴァニラをROS対応して勉強会で発表できる日が来るのかなぁ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ROBO-ONE 27th</title>
      <link>http://syundo0730.github.io/post/robo-one-27th/</link>
      <pubDate>Sat, 03 Oct 2015 22:46:10 +0900</pubDate>
      
      <guid>http://syundo0730.github.io/post/robo-one-27th/</guid>
      <description>&lt;p&gt;第27回ROBO-ONEの予選を見に行ってきた。
今回はヴァニラはエントリーしていなかったが、人形使いさんのチームメンバーという形で大会に顔を出させていただいた。&lt;/p&gt;

&lt;p&gt;予選は安定して4.5m踏破できるロボットが増えてきた印象だった。
自分で確かめてはいないが、話を聞くところによると、床に置かれた障害物はゴムシートとプラスチックの板？のようだということだった。
今までは幅の狭いゴムのシールが貼ってあっただけだったので、難しくなったと言える。
しかし、ちゃんと足を上げて歩行していれば今までと同じように進むことはできるようだった。&lt;/p&gt;

&lt;p&gt;Frostyさんの速さといったら、なんということだろう。&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/s81OgcZzpd4&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;西村さんは予選の総括として、自律性の向上を推奨したいと仰っていた。
自動で避けろという問いかけで、避けなければ通れないような障害物が置かれるときが来るかもしれない(ないない)。&lt;/p&gt;

&lt;p&gt;今回のロボワンで(特にドール勢の)注目の的になっていたのが、真広さんのST-00だ。
予選の動画を見てもわかるようにものすごい完成度だ。
遠目で見ると本物のHRP-4Cが歩いているようにしか見えない。&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/nc5T3ACm6hM&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;予選が終わった後、念願のドールロボ大集合！写真撮影をした。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://syundo0730.github.io/images/2015/10/ドール集合写真.jpg&#34; alt=&#34;ドール集合写真&#34; title=&#34;ドール集合写真&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ROBO-ONEの歴史の中でこれだけのドールロボが集まったのはこれが初めてだろう。
そして最後かもしれない。
左から順に、びいむさん @beam8000 の「まい」ちゃん、
舞鈴堂さん @Blade_Oh の「音叉」ちゃん、「剣姫」ちゃん、
真広さんの「ST-00」ちゃん、
きゅんどう @ksyundo の「ヴァニラ」、
人形つかいさん @witch_kazumin の「茉莉花」ちゃん、
のむむさん @umumon の「AMATERAS」様、「ゴエン」さん。&lt;/p&gt;

&lt;p&gt;のむむさんのAMATERASさんなんかはドールロボの道を切り開いたとも言える名前通りの神的な存在なので、
一緒のフレームにうちのヴァニラが映ることができて、とっても嬉しかった。&lt;/p&gt;

&lt;p&gt;今年も人形つかいさん茉莉花ちゃんと写真を撮ることができた。
前回は僕がドール外皮を付けていかなかったため1年ぶりだ。
ドール集合を呼びかけていただいて、大変良かったです。
いつもお世話になってます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://syundo0730.github.io/images/2015/10/まりかちゃんと鎧.jpg&#34; alt=&#34;まりかちゃんと鎧&#34; title=&#34;まりかちゃんと鎧&#34; /&gt;&lt;/p&gt;

&lt;p&gt;うちの娘は顔の外皮がすぐズレちゃうので目が怖い。あと眼球が銀色のままだから(usbカメラ)怖い。塗らなければ。&lt;/p&gt;

&lt;p&gt;前においてあるのは人形つかいさんが購入された鎧ボトルカバー。
ヴァニラには着れないけど、これでバトル出場されたら応援したくなること間違いない。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://syundo0730.github.io/images/2015/10/アマテラスと茉莉花ちゃん.jpg&#34; alt=&#34;アマテラスと茉莉花ちゃん&#34; title=&#34;アマテラスと茉莉花ちゃん&#34; /&gt;&lt;/p&gt;

&lt;p&gt;このようにMSDサイズ勢は兜をちゃんと被れる。かわいい。&lt;/p&gt;

&lt;p&gt;今回、ヴァニラを運ぶために、MSDドール用のキャリングケースを導入した。
&lt;a href=&#34;http://www.dollfiedream.tokyo/jp/dollfiedream/case.html/&#34;&gt;ドール用キャリングケース&lt;/a&gt;
秋葉原のラジオ会館、ドールスポットに在庫があったので買った。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://syundo0730.github.io/images/2015/10/ドールバッグ.jpg&#34; alt=&#34;ドールバッグ&#34; title=&#34;ドールバッグ&#34; /&gt;&lt;/p&gt;

&lt;p&gt;かなりホラーだけどこんな感じに膝を曲げればすっぽりと入る。
バトルロボットだったら肩幅がきつくて入らないだろうな。&lt;/p&gt;

&lt;p&gt;今回のロボワンはドールロボ製作者の方と集まれて楽しかった。
(ロボワン的にこれ盛り上がるのはどうなの？？って気はするけどｗｗ)
次の大会は出たい。
そしてそれがヴァニラの最後の出場になるといいと思っている。
1年とちょっとを見込んで新しいドールロボを作っていくつもりだ。
名前は「ソルト」。男みたいな名前だけどもちろん女性形にする。&lt;/p&gt;

&lt;p&gt;真広さんのST-00を見て、本当に衝撃を受けた。
同時にどうして自分にあれが作れないのかという悔しい気持ちにもなった。&lt;/p&gt;

&lt;p&gt;今は少なくともサーボモータは自分で作らなければ、自分が満足して開発できるものができないなという気持ちになっている。
作っても仕方がないという気持ちでは趣味のロボットの開発など続けられないのである。
技術的に更にチャレンジもしていきたいという考えもある。
サーボケースを自分で削りだすことはマストだ。
僕は機械設計にそれほど強くなく(センスが無いと言っても良い)、メカ的なことはなるべく避けてきた。
でもやらなきゃ仕方がないから、フルスクラッチすることを目指して作業を進めていくことに決めた。
１年かけて基礎技術の研究と設計をしていくつもり。&lt;/p&gt;

&lt;p&gt;次回のロボワンはヴァニラを使って歩行安定制御の検証をしたい。
同時に俺サーボのプロトタイプのプロトタイプ程度のものができていたらいいなと思う。&lt;/p&gt;

&lt;p&gt;もちろん仕事関係でやりたいこと、勉強しときたいこと死ぬほどあるからバランスよくやる。
redmineでも導入してタスク管理してみるといいかもしれない。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Haskellで高階関数を組み合わせて部分文字列を作る例が全然わからなかったから考えた</title>
      <link>http://syundo0730.github.io/post/1162/</link>
      <pubDate>Thu, 21 May 2015 22:27:54 +0900</pubDate>
      
      <guid>http://syundo0730.github.io/post/1162/</guid>
      <description>&lt;p&gt;最近、Haskellの勉強のために「&lt;a href=&#34;http://www.amazon.co.jp/%E9%96%A2%E6%95%B0%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E5%AE%9F%E8%B7%B5%E5%85%A5%E9%96%80-%E2%94%80%E2%94%80%E7%B0%A1%E6%BD%94%E3%81%A7%E3%80%81%E6%AD%A3%E3%81%97%E3%81%84%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E6%9B%B8%E3%81%8F%E3%81%9F%E3%82%81%E3%81%AB-WEB-PRESS-plus/dp/4774169269&#34;&gt;関数プログラミング実践入門&lt;/a&gt;」を読んでいる。&lt;/p&gt;

&lt;p&gt;高階関数のところまでいったけど僕の頭がクソ雑魚だから例題が全然理解出来なかった…。&lt;/p&gt;

&lt;p&gt;Qiitaに記事を移しました。&lt;/p&gt;

&lt;p&gt;続きはこちら&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/nekokoneko_mode/items/724b7e9bddac58e78e83&#34;&gt;http://qiita.com/nekokoneko_mode/items/724b7e9bddac58e78e83&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>C&#43;&#43;初心者会に参加してきた</title>
      <link>http://syundo0730.github.io/post/1154/</link>
      <pubDate>Mon, 18 May 2015 01:26:10 +0900</pubDate>
      
      <guid>http://syundo0730.github.io/post/1154/</guid>
      <description>&lt;p&gt;歌舞伎座.tech#8「C++初心者会」に参加してきた。
&lt;a href=&#34;http://kbkz.connpass.com/event/13905/&#34;&gt;http://kbkz.connpass.com/event/13905/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;初めて勉強会での発表ということもした（ただしLT)&lt;/p&gt;

&lt;p&gt;発表資料はこちら
&lt;a href=&#34;http://www.slideshare.net/syundo/c-48237620&#34;&gt;http://www.slideshare.net/syundo/c-48237620&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ニコ生はこちら
&lt;a href=&#34;http://live.nicovideo.jp/gate/lv220960718&#34;&gt;http://live.nicovideo.jp/gate/lv220960718&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;メモを取って即時公開してくださっているひとがいた。
&lt;a href=&#34;http://www.shigemk2.com/archive/category/C%2B%2B&#34;&gt;http://www.shigemk2.com/archive/category/C%2B%2B&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;私はLTでC++を使って開発できるマイコンボードの例としてmbedを紹介した。
だが、問題はmbedのコンパイラにあった。
C++界隈の人たちの興味はC++11，14、さらにはC++17にあるのだ。
対してmbedオンラインコンパイラはC++98だ。
C++98のことなんてもう忘却の彼方にあるし、取るに足りないことなのだ（実際僕もそう思う）。&lt;/p&gt;

&lt;p&gt;mbedの開発環境は不自由だ。
ネット環境がないとコンパイルできないとかザコだ。
なぜそんな環境に拘っているのか？
そのご指摘はまさにその通りだと思う。&lt;/p&gt;

&lt;p&gt;arm向けの自由なコンパイラがあるんだから、mbedはオンラインコンパイラに頼るエコシステムにすべきじゃなかったのだ。
オンラインコンパイラが無ければmbedは広まらなかったか？
僕はそうは思わない。Arduinoの開発環境はローカルの開発環境だが超流行っているじゃないか。
Coretex-M3の強い計算機能力を発揮して楽しくC++開発できることがmbedの強みだ。
Arduinoなんて目じゃない。&lt;/p&gt;

&lt;p&gt;それなのにコンパイラがC++98/03準拠というのはあんまりじゃないか。
mbedのコミュニティのことを考え、自分のしたい開発のことを考え、もやもやしている&amp;hellip;&lt;/p&gt;

&lt;p&gt;C++界隈の人たちというのは濃い、強い。
自分ももっと技術力を高めて本当のプログラマになりたいと思った。&lt;/p&gt;

&lt;p&gt;これまで聞いたこと無いキーワードや，聞いたことあったがよく知らないことをたくさん知れた。
調べて勉強してもっとC++をわかりたい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>できるだけconstexprを使おう</title>
      <link>http://syundo0730.github.io/post/1143/</link>
      <pubDate>Fri, 15 May 2015 02:59:51 +0900</pubDate>
      
      <guid>http://syundo0730.github.io/post/1143/</guid>
      <description>&lt;h1&gt;Effective Modern C++メモ (Moving to Modern C++ : Item 15)&lt;/h1&gt;

&lt;p&gt;constexprがオブジェクトに付加されたときはそのオブジェクトはconstのようなものになる一方で、関数に付加されたときはそれとは少し違う性質のものになるから紛らわしい。&lt;/p&gt;

&lt;h2&gt;constexprオブジェクトについて&lt;/h2&gt;

&lt;p&gt;constexprをオブジェクトの前に付けるとコンパイル時に用いることができる値になる。このような値は読み取り専用のメモリに配置されるだろうから、特に組み込みの分野で重宝されるだろう。&lt;/p&gt;

&lt;p&gt;[cpp]&lt;/p&gt;

&lt;p&gt;int sz;   // コンパイル時に存在しない&lt;/p&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;constexpr auto arraySize1 = sz; // エラー。szはコンパイル時には使えない。&lt;/p&gt;

&lt;p&gt;std::array&amp;lt;int, sz&amp;gt; data1; // 同様なエラー&lt;/p&gt;

&lt;p&gt;constexpr auto arraySize2 = 10; // 良い。10はコンパイル時定数。&lt;/p&gt;

&lt;p&gt;std::array&amp;lt;int, arraySize&amp;gt; data2; // 良い。&lt;/p&gt;

&lt;p&gt;[/cpp]&lt;/p&gt;

&lt;p&gt;constは同じ役割を果たせない。コンパイル時には値が無いからだ。constexprオブジェクトはconstだが、その逆は成り立たないのである。&lt;/p&gt;

&lt;h2&gt;constexpr関数について&lt;/h2&gt;

&lt;p&gt;引数がコンパイル時定数ならばコンパイル時に、そうでなければ実行時に計算される関数。&lt;/p&gt;

&lt;h3&gt;C++11の場合&lt;/h3&gt;

&lt;p&gt;関数内に1行、return文があるだけしか認められない。&lt;/p&gt;

&lt;p&gt;[cpp]&lt;/p&gt;

&lt;p&gt;constexpr int pow(int base, int exp) noexcept {&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;return (exp == 0 ? 1 : base*pow(base, exp-1));
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[/cpp]&lt;/p&gt;

&lt;h3&gt;C++14の場合&lt;/h3&gt;

&lt;p&gt;複数行にわたって記述できる&lt;/p&gt;

&lt;p&gt;[cpp]&lt;/p&gt;

&lt;p&gt;constexpr int pow(int base, int exp) noexcept {&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;auto result = 1;

for(int i = 0; i &amp;lt; exp; ++i) result *= base;



return result;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[/cpp]&lt;/p&gt;

&lt;h2&gt;気をつけるべきこと&lt;/h2&gt;

&lt;p&gt;constexprであると示すことはオブジェクトや関数のインターフェースをユーザーに通知するという意味で重要である。ユーザーはコンパイル時にそれが必要となるようなコンテキストでconstexprなものを利用するだろう。&lt;/p&gt;

&lt;p&gt;もしconstexprにしたことが間違いだったと思って修正してしまうとユーザーのコンパイルが通らなくなるような大変な影響がでるだろう。例えばデバッグのためにI/O操作をするようなことはconstexpr関数の中では許されていないが、そういった修正をしてしまうということだ。できるだけconstexprを使おう、の「できるだけ」はそういった長期にわたる機能のメンテナンスをする気があるならそうしようという意味でもあるのだ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ブログも静的ページにしたらどうか</title>
      <link>http://syundo0730.github.io/post/1140/</link>
      <pubDate>Thu, 14 May 2015 01:27:58 +0900</pubDate>
      
      <guid>http://syundo0730.github.io/post/1140/</guid>
      <description>&lt;p&gt;以前から気になっていたのだが、ブログのようだけども決してWordpressで構成されているわけでもなく、読み込みが速くて、しかもモダンなデザインのウェブサイトをよく見かける。
ああいったものをどういうフレームワークで作っているのか全然良くわかっていなかったのだが、TLを眺めていたらふいに知ることとなった。
あれらはMarkdownなどからビルドして静的ページを生成したものを公開しているそうなのだ。
DBやらphpやら準備しなくて良いので環境の構築は楽だろう。
静的ページだけなので非力なサーバでも運用できるだろう。
俄然興味が湧いてきた。&lt;/p&gt;

&lt;p&gt;こういったツールは色々あって
&lt;a href=&#34;https://staticsitegenerators.net/&#34;&gt;https://staticsitegenerators.net/&lt;/a&gt;
ここを見るとどれが人気があるのかわかる。&lt;/p&gt;

&lt;p&gt;だが私は今のところ&lt;a href=&#34;http://golang-jp.org/&#34;&gt;golang&lt;/a&gt;で動く&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;に興味がある。
機能がシンプルであるし、他に比べてサイトの生成が爆速でできるらしい。&lt;/p&gt;

&lt;p&gt;ソースはGitHubで管理するのが良かろう。
werckerやらTravis CIなどのCI Webツールを使ってCIできると更にかっこいいだろう。
werckerはBitbucketも使えるしGitHubのprivateリポジトリも使えるらしい。
Travis CIはGitHubのみでprivateリポジトリは有料らしい。&lt;/p&gt;

&lt;p&gt;ちなみにちょっと文脈が違うがWebサイトに数式を含めるならば&lt;a href=&#34;http://www.mathjax.org/&#34;&gt;MathJax&lt;/a&gt;が良いという電波をキャッチした。&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;参考にしたところ&lt;/h2&gt;
&lt;a href=&#34;http://task-blog.net/2015/01/25/remove-blog-rails-to-hexo/&#34;&gt;http://task-blog.net/2015/01/25/remove-blog-rails-to-hexo/&lt;/a&gt;
&lt;a href=&#34;http://re-dzine.net/2015/01/hugo/&#34;&gt;http://re-dzine.net/2015/01/hugo/&lt;/a&gt;
&lt;a href=&#34;http://rcmdnk.github.io/blog/2015/02/25/blog-octopress/&#34;&gt;http://rcmdnk.github.io/blog/2015/02/25/blog-octopress/&lt;/a&gt;
&lt;a href=&#34;http://oku.edu.mie-u.ac.jp/~okumura/javascript/mathjax.html&#34;&gt;http://oku.edu.mie-u.ac.jp/~okumura/javascript/mathjax.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Haskellを入れる</title>
      <link>http://syundo0730.github.io/post/1128/</link>
      <pubDate>Tue, 12 May 2015 02:04:29 +0900</pubDate>
      
      <guid>http://syundo0730.github.io/post/1128/</guid>
      <description>&lt;p&gt;Haskellをやってみようと思った。
環境：Ubuntu12.04 64bit&lt;/p&gt;

&lt;p&gt;記事をQiitaに移動した。
続きはこちら
&lt;a href=&#34;http://qiita.com/nekokoneko_mode/items/ee88053c164d3b2bd20b&#34;&gt;http://qiita.com/nekokoneko_mode/items/ee88053c164d3b2bd20b&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ドコモを解約してIIJのみおふぉんにMNP転入した</title>
      <link>http://syundo0730.github.io/post/1131/</link>
      <pubDate>Thu, 07 May 2015 00:30:10 +0900</pubDate>
      
      <guid>http://syundo0730.github.io/post/1131/</guid>
      <description>&lt;p&gt;携帯電話の料金が高すぎて、いい加減嫌気が差していたのでドコモを解約した。
ちょうど更新月であったから違約金が付かないはず。2年縛りとか自動更新とか怒りが爆発しそう。&lt;/p&gt;

&lt;p&gt;移行先はIIJの&lt;a href=&#34;https://www.iijmio.jp/hdd/miofone/&#34;&gt;みおふぉん&lt;/a&gt;にした。
月3G音声通話つきで1600円のものを選んだ。
容量はドコモにいたときと同じで値段は1/3ぐらいだ。&lt;/p&gt;

&lt;p&gt;MNP転入するときに気になるのが、simカードが届くのに時間がかかるため通話できない期間が存在すること。
今回は5月4日 am9:54にドコモsimが停止
翌5月5日 am10:07にヤマト運輸でIIJのsimが到着した。
都内に住んでいたから早かったのかもしれないが、これなら週末のうちにでも手続きができそうだった。&lt;/p&gt;

&lt;p&gt;通信速度は別に問題ないように思う。WEBページを見ても動画を見ても体感で何も変わらない。ドコモ契約してた時に計測しておいて比較すればよかったけど忘れてた…。&lt;/p&gt;

&lt;p&gt;音声通話は&lt;a href=&#34;https://www.iijmio.jp/hdd/miofone/dial.jsp&#34;&gt;みおふぉんダイアル&lt;/a&gt;を使えば安くなる。まだ試してないが、音声の品質についてはそんなに心配していない。&lt;/p&gt;

&lt;p&gt;こうしてドコモは通信を流すだけの土管になるのだ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ロボットを吊るアームを作った</title>
      <link>http://syundo0730.github.io/post/1111/</link>
      <pubDate>Sun, 19 Apr 2015 22:46:39 +0900</pubDate>
      
      <guid>http://syundo0730.github.io/post/1111/</guid>
      <description>&lt;p&gt;作業をしやすくするために、棚に固定できるロボット用のアームを作りました。こんなんです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://syundo0730.github.io/images/2015/04/DSC_1486.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-1114&#34; src=&#34;http://syundo0730.github.io/images/2015/04/DSC_1486.jpg&#34; alt=&#34;DSC_1486&#34;   /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4mmの合板をCNCで切削しました。穴がいっぱいあいてるのは、CNCが脱調したか何かで穴の位置がずれてしまったため、ボール盤で開け直したからです。
&lt;a href=&#34;http://syundo0730.github.io/images/2015/04/DSC_1488-e1429451130188.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-1118&#34; src=&#34;http://syundo0730.github.io/images/2015/04/DSC_1488-e1429451130188.jpg&#34; alt=&#34;DSC_1488&#34;   /&gt;&lt;/a&gt;
ワイヤーで吊ります。&lt;/p&gt;

&lt;p&gt;ちなみに現在の作業環境はこんな感じです。&lt;/p&gt;

&lt;p&gt;CNC
&lt;a href=&#34;http://syundo0730.github.io/images/2015/04/DSC_1490.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-1116&#34; src=&#34;http://syundo0730.github.io/images/2015/04/DSC_1490.jpg&#34; alt=&#34;DSC_1490&#34;   /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ボール盤と折り曲げ機
&lt;a href=&#34;http://syundo0730.github.io/images/2015/04/DSC_1489.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-1115&#34; src=&#34;http://syundo0730.github.io/images/2015/04/DSC_1489.jpg&#34; alt=&#34;DSC_1489&#34;   /&gt;&lt;/a&gt;
CNCに関しては防音箱の性能向上を図る必要があると考えています。&lt;/p&gt;

&lt;p&gt;10mm厚の合板で箱が作ってあるので、低音域の騒音のカットはかなりできていると思うんですが、中高音が筒抜けな感じです。
吸音材をヤフオクで買って貼りつけようと思います。&lt;/p&gt;

&lt;p&gt;ではでは。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>最近どうしているかということとROBO－ONEはどうだったかという話</title>
      <link>http://syundo0730.github.io/post/1068/</link>
      <pubDate>Mon, 13 Apr 2015 02:12:29 +0900</pubDate>
      
      <guid>http://syundo0730.github.io/post/1068/</guid>
      <description>&lt;p&gt;お久しぶりです．今年の更新は今日が初めてです．これまで何をやっていたかというと，2月末までは修士論文を片付けていました．3月は研究の引き継ぎのための作業やら引っ越しの準備やらをしながらROBO-ONE参加をしてました．ともかくそんなこんなでなかなか落ち着かなかったわけです．有線ネットの環境も無かったりして…．&lt;/p&gt;

&lt;p&gt;4月になり今はWEB系のお仕事してる会社で働いています．といってもまだ研修ですが．
大学に入学したときには将来は家電メーカーとかに入って組み込み技術とかの研究開発の人になろうと思ってはいたんですが，なんだか興味が逸れていきまして，結果的にそういうことになりました．現在は東京在住です．秋葉原に近いところだと思っていたのですが，自転車が無いとちょっときついかな．どこに駐輪するのが安全かが最近気になっていることです．
&lt;h2&gt;ROBO-ONEまでにうちのヴァニラがどう変わったか&lt;/h2&gt;
こちらが改造に使った部品たちです．一部組み上がってますが…
&lt;a href=&#34;http://syundo0730.github.io/images/2015/04/2014-11-08-21.07.35.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-1100&#34; src=&#34;http://syundo0730.github.io/images/2015/04/2014-11-08-21.07.35.jpg&#34; alt=&#34;2014-11-08 21.07.35&#34;   /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;胴体ユニットに改造が施されまして，腰がロールピッチに動くようになっています．首は胸のあたりから2軸リンクしたのと，頭のなかの1軸で3軸方向に動きます．&lt;a href=&#34;http://syundo0730.github.io/images/2015/04/2014-11-08-21.12.58.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-1101&#34; src=&#34;http://syundo0730.github.io/images/2015/04/2014-11-08-21.12.58.jpg&#34; alt=&#34;2014-11-08 21.12.58&#34;   /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今回の改造の見どころはこの頭の機構です．ヴァニラを見た人から「目は動かないの？」と散々言われ続けてきたので，眼球が左右に動くようにしました．ついでにUSBカメラを搭載しました．型番は以前の投稿に書いたものと同じものです．&lt;a href=&#34;http://syundo0730.github.io/images/2015/04/2014-11-08-21.14.27.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-1102&#34; src=&#34;http://syundo0730.github.io/images/2015/04/2014-11-08-21.14.27.jpg&#34; alt=&#34;2014-11-08 21.14.27&#34;   /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;動画はこちら．目線が常に平行にならないのがこの機構のまずいところですが…まぁなんとかなるでしょう．
&lt;iframe src=&#34;https://www.youtube.com/embed/5eofgrGTjyo&#34; width=&#34;560&#34; height=&#34;315&#34; frameborder=&#34;0&#34; allowfullscreen=&#34;allowfullscreen&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;この写真では見難いですが，腕の自由度もかなり増やしました．軸の構成は舞鈴堂さんのところの娘を参考に致しました…というかまったく同じかな？
&lt;a href=&#34;http://syundo0730.github.io/images/2015/04/2014-11-09-09.06.59.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-1103&#34; src=&#34;http://syundo0730.github.io/images/2015/04/2014-11-09-09.06.59.jpg&#34; alt=&#34;2014-11-09 09.06.59&#34;   /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;頭にはBeagleBoneが載っています．大きいですね！お人形ロボとは思えない大胆なスペースの使い方です．これが後に悲劇を呼ぶことはなんとなく予想はできてました…．&lt;a href=&#34;http://syundo0730.github.io/images/2015/04/2014-11-08-21.14.06.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-1106&#34; src=&#34;http://syundo0730.github.io/images/2015/04/2014-11-08-21.14.06.jpg&#34; alt=&#34;2014-11-08 21.14.06&#34;   /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;バリ取りとか塗装が間に合わなくてボツにしたんですが，腕カバーとか腰カバーを3Dプリントで作ったりしてました．ABSがテーブルから剥がれて反ることといったらもう泣けました．&lt;/p&gt;

&lt;p&gt;これは腕カバー反らなければそれなりに使えそうなものができます．外装なので中身はスカスカ，充填率は10%です．&lt;a href=&#34;http://syundo0730.github.io/images/2015/04/2015-02-19-04.07.08.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-1104&#34; src=&#34;http://syundo0730.github.io/images/2015/04/2015-02-19-04.07.08.jpg&#34; alt=&#34;2015-02-19 04.07.08&#34;   /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こちらは腰カバー．設計ミスがあってうまく嵌りませんでした…．焦ってやる仕事は良くないです…フィラメントがかなり無駄に…．&lt;a href=&#34;http://syundo0730.github.io/images/2015/04/2015-02-22-20.43.47.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-1105&#34; src=&#34;http://syundo0730.github.io/images/2015/04/2015-02-22-20.43.47.jpg&#34; alt=&#34;2015-02-22 20.43.47&#34;   /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;大会1週間前にこのような状態だったので，これは時間が無いかも…と思い始めたのです．そして…．&lt;a href=&#34;http://syundo0730.github.io/images/2015/04/2015-02-28-12.34.47.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-1107&#34; src=&#34;http://syundo0730.github.io/images/2015/04/2015-02-28-12.34.47.jpg&#34; alt=&#34;2015-02-28 12.34.47&#34;   /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;14，15日にアミューあつぎで開催された，第26回ROBO-ONEに参加してきました．&lt;/p&gt;

&lt;p&gt;予選の結果&lt;/p&gt;

&lt;p&gt;40cm&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/dyA7645_rA4&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;敗因
&lt;ul&gt;
    &lt;li&gt;コントロールボードに使っているmbedのRAMが足りなくなってきて色々つらくなってきた．&lt;/li&gt;
    &lt;li&gt;シリアル受信割り込みがうまく動かず，数日間手を焼かされたあげく結局どうにもできなかった．&lt;/li&gt;
    &lt;li&gt;上半身のサーボモータを増やしたらバランスに関してシビアになってしまって，胴体軌道がsin波じゃだめだった．でも取り掛かるのが遅すぎて倒立振子規範の軌道にできなかった．&lt;/li&gt;
    &lt;li&gt;数年前にバキュームフォームで作った外装がことごとく嵌らなかったため，Inventorでドールっぽい外装を設計して3Dプリンﾄしたりしていたが，所詮Inventorだから満足のできる形にならず不採用．そうこうしているうちに時間が無くなった．&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;今後は歩行の安定性を高める予定です．アイディアはある…&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>中華CNC CNC3020導入記　USBCNCで使う</title>
      <link>http://syundo0730.github.io/post/1009/</link>
      <pubDate>Mon, 13 Apr 2015 01:19:34 +0900</pubDate>
      
      <guid>http://syundo0730.github.io/post/1009/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://syundo0730.github.io/images/2014/10/2976947bf1715116347ba15669a421e4.png&#34;&gt;&lt;img class=&#34;alignnone wp-image-1012 size-full&#34; src=&#34;http://syundo0730.github.io/images/2014/10/2976947bf1715116347ba15669a421e4.png&#34; alt=&#34;&#34;   /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;iframe src=&#34;https://www.youtube.com/embed/-hakv_o5bQE&#34; width=&#34;560&#34; height=&#34;315&#34; frameborder=&#34;0&#34; allowfullscreen=&#34;allowfullscreen&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>機械学習プロフェッショナルシリーズ第1弾から2冊買った</title>
      <link>http://syundo0730.github.io/post/1090/</link>
      <pubDate>Sun, 12 Apr 2015 23:42:54 +0900</pubDate>
      
      <guid>http://syundo0730.github.io/post/1090/</guid>
      <description>&lt;p&gt;今月から，機械学習プロフェッショナルシリーズというものの発刊が始まる．今月は全29巻のうち，4冊が発売された．私はそのうち，&lt;a href=&#34;http://www.amazon.co.jp/%E6%B7%B1%E5%B1%A4%E5%AD%A6%E7%BF%92-%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92%E3%83%97%E3%83%AD%E3%83%95%E3%82%A7%E3%83%83%E3%82%B7%E3%83%A7%E3%83%8A%E3%83%AB%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-%E5%B2%A1%E8%B0%B7-%E8%B2%B4%E4%B9%8B/dp/4061529021&#34;&gt;岡谷 貴之「深層学習」&lt;/a&gt;と，&lt;a href=&#34;http://www.amazon.co.jp/%E3%83%88%E3%83%94%E3%83%83%E3%82%AF%E3%83%A2%E3%83%87%E3%83%AB-%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92%E3%83%97%E3%83%AD%E3%83%95%E3%82%A7%E3%83%83%E3%82%B7%E3%83%A7%E3%83%8A%E3%83%AB%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-%E5%B2%A9%E7%94%B0-%E5%85%B7%E6%B2%BB/dp/4061529048/&#34;&gt;岩田 具治「トピックモデル」&lt;/a&gt;を購入した．&lt;/p&gt;

&lt;p&gt;まだ深層学習のほうしか読めていないが，Deep Learningの日本語で読める資料は人工知能学会の特集しかなかったりしてなかなか勉強しづらかったこともあって，色々な情報が纏まっている本書はとても意義があると思う．&lt;/p&gt;

&lt;p&gt;DeepNNを使って何かやってみたい．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WordpressをロリポップからDigital Oceanに移した</title>
      <link>http://syundo0730.github.io/post/1072/</link>
      <pubDate>Sun, 12 Apr 2015 23:19:51 +0900</pubDate>
      
      <guid>http://syundo0730.github.io/post/1072/</guid>
      <description>&lt;p&gt;今までHPとブログに使っていたロリポップのレンタルサーバをやめて，DigitalOceanの最安プランを使うことにした．VPSを借りてWEBアプリ作れるようになりたかったからである．それにともなってブログとHPのサーバを移行する作業が必要だった．&lt;/p&gt;

&lt;p&gt;そこで新しいサーバでWordpressを使えるようにして以前のサーバから移行するまでの手順をメモしておく．&lt;/p&gt;

&lt;p&gt;まずはDigitalOceanに登録してDropletを作成する必要がある．今回は
512MB Ram 20GB SSD Disk Singapore 1 CentOS 6.5 x64
のものを作った．1時間1円くらいのプランだから月に500円くらいになる．案内に沿ってボタンを押すだけなので簡単だ．セットアップの途中にSSHの設定項目があるので，先に以下のSSHの設定をしておくとスムーズで良い．&lt;/p&gt;

&lt;h2&gt;SSHの鍵の登録&lt;/h2&gt;
DigitalOceanのマイページから仮想コンソールを使ってマシンにアクセスすることもできるが，反応が緩慢なのでSSH接続したほうが色々と捗る．

```bash

ssh-keygen

```

で公開鍵ができるので中身をコピペしてDropletの生成時に登録しておく．生成時にしていなかった場合は，YourSetting-&amp;gt;Securityより設定しておく．

&lt;h2&gt;Apache 導入&lt;/h2&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;yum install -y httpd httpd-devel
chkconfig httpd on
service httpd start
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;PHP 導入&lt;/h2&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm

rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm

yum --enablerepo&lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt;remi,remi-php55 install php php-devel php-mysql php-mbstring php-gd
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;vi /etc/php.ini

vi /etc/httpd/conf.d/php.conf
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;MySQL 導入&lt;/h2&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;yum install mysql-community-release-el6-5.noarch.rpm

yum install -y mysql-community-client mysql-community-devel mysql-community-server
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Digital Oceanの最安プランではメモリが不足がちらしい．スワップファイルを作る．&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;sudo dd &lt;span style=&#34;color: #815ba4&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt;/dev/zero &lt;span style=&#34;color: #ef6155&#34;&gt;of&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt;/swapfile &lt;span style=&#34;color: #ef6155&#34;&gt;bs&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt;1M &lt;span style=&#34;color: #ef6155&#34;&gt;count&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt;1024

mkswap /swapfile

swapon /swapfile

sudo sh -c &lt;span style=&#34;color: #48b685&#34;&gt;&amp;quot;echo &amp;#39;/swapfile swap swap defaults 0 0&amp;#39; &amp;amp;gt;&amp;amp;gt; /etc/fstab&amp;quot;&lt;/span&gt;

chkconfig mysqld on

service mysqld start
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;MySQLの設定とかする．全部Yesと答える．ただしパスワードは空欄にしておいた．&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;mysql_secure_installation
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;ムームードメインで取得したドメインを管理&lt;/h2&gt;

&lt;p&gt;ムームードメインのメニューのネームサーバー設定変更より&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://syundo0730.github.io/images/2015/04/name_server.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-1079&#34; src=&#34;http://syundo0730.github.io/images/2015/04/name_server.png&#34; alt=&#34;name_server&#34;   /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こんな感じにする．&lt;/p&gt;

&lt;p&gt;ブログにはサブドメイン.blogを使っているのでその設定をする必要がある．&lt;/p&gt;

&lt;p&gt;Digital OceanのDNS設定メニューより，&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://syundo0730.github.io/images/2015/04/DO_domain.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-1078&#34; src=&#34;http://syundo0730.github.io/images/2015/04/DO_domain.png&#34; alt=&#34;DO_domain&#34;   /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aレコードにサブドメインを追加する．あとはApache側の設定が要る．&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;vim /etc/httpd/conf/httpd.conf
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以下の部分を編集してポート指定．&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;NameVirtualHost *:80
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;あとは末尾に以下を追加してドメインごとのルートディレクトリを設定する．&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&amp;lt;VirtualHost *:80&amp;gt;

    ServerName syundo.org

    DocumentRoot /var/www/html/

  &amp;lt;Directory /var/www/html/&amp;gt;

    AllowOverride All

    Options FollowSymLinks

    Order allow,deny

    Allow from all

   &amp;lt;/Directory&amp;gt;

&amp;lt;/VirtualHost&amp;gt;



&amp;lt;VirtualHost *:80&amp;gt;

    ServerName blog.syundo.org

    DocumentRoot /var/www/html/blog/

  &amp;lt;Directory /var/www/html/blog/&amp;gt;

    AllowOverride All

    Options FollowSymLinks

    Order allow,deny

    Allow from all

   &amp;lt;/Directory&amp;gt;

&amp;lt;/VirtualHost&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;PHPmyadmin導入&lt;/h2&gt;

&lt;p&gt;Wordpressの移行作業にPHPmyadminを使っている事例がほとんどだったのでそれに習って作業した．&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;yum -y install --enablerepo&lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt;remi ImageMagick-last

yum -y install --enablerepo&lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt;remi-php55 phpMyAdmin
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;vim /etc/httpd/conf.d/phpMyAdmin.conf
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;を編集．内容は忘れた．&lt;/p&gt;

&lt;h2&gt;データの移行&lt;/h2&gt;

&lt;p&gt;MySQLで作業する．ログインしてパスワード設定する．&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;mysql -u root

&lt;span style=&#34;color: #2f1e2e&#34;&gt;set &lt;/span&gt;password &lt;span style=&#34;color: #815ba4&#34;&gt;for&lt;/span&gt; root@localhost&lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt;password&lt;span style=&#34;color: #5bc4bf&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #48b685&#34;&gt;&amp;#39;hogehoge&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;データベース作る．&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;create database database_name
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;作業ユーザを作っておく&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;grant all on database_name.* to dbuser@localhost identified by &lt;span style=&#34;color: #48b685&#34;&gt;&amp;#39;piyopiyo&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以前のブログのデータベースの移行はPHPmyadimnを使って行う．これはググれば色んなサイトで解説されている．どれが正しいのかはいまいちわからなかった．&lt;a href=&#34;http://websae.net/wordpress-backup-without-plugin-20140924/&#34;&gt;http://websae.net/wordpress-backup-without-plugin-20140924/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;worldpressに使うデータベース名，作業ユーザー，パスワードを設定する．&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;vim wp-config.php
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Wordpressファイルの所有者の変更をしておく．こうしないとプラグインの更新とかで不具合が出る．&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;sudo chown -R apache:apache myblogdir
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;どのグループ，ユーザーに権限を与えればいいかは， /etc/httpd/conf/httpd.conf　にある，&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;User apache

Group apache
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;の部分を見ればわかる．&lt;/p&gt;

&lt;h2&gt;追記：&lt;/h2&gt;

&lt;p&gt;トップページからのリンクがすべて404となってしまった．&lt;/p&gt;

&lt;p&gt;例えばカテゴリごとに飛ぼうとしてもエラーになる．&lt;/p&gt;

&lt;p&gt;ダッシュボードの 「設定 -&amp;gt; パーマリンク設定」　より，何も変更せずに 「保存」　を押すと正常な状態になった．&lt;/p&gt;

&lt;h2&gt;参考：&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://nekopunch.hatenablog.com/entry/2014/03/22/020507&#34;&gt;http://nekopunch.hatenablog.com/entry/2014/03/22/020507&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wp.fsv.jp/guide/server-shift/&#34;&gt;http://wp.fsv.jp/guide/server-shift/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://websae.net/wordpress-backup-without-plugin-20140924/&#34;&gt;http://websae.net/wordpress-backup-without-plugin-20140924/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://javatechnology.net/service/apache-sub-domain/&#34;&gt;http://javatechnology.net/service/apache-sub-domain/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Beagle Bone Blackにカメラを繋げてOpenCVで顔検出した</title>
      <link>http://syundo0730.github.io/post/1033/</link>
      <pubDate>Fri, 17 Oct 2014 23:57:16 +0900</pubDate>
      
      <guid>http://syundo0730.github.io/post/1033/</guid>
      <description>&lt;p&gt;Beagle Bone Blackの環境が整ったので次はカメラが使えるか試してみた．
そしてOpenCVで顔検出することを目指す．&lt;/p&gt;

&lt;p&gt;今回使うカメラはこれ．
&lt;a href=&#34;http://syundo0730.github.io/images/2014/10/2014-10-16-21.52.50.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-1036&#34; src=&#34;http://syundo0730.github.io/images/2014/10/2014-10-16-21.52.50.jpg&#34; alt=&#34;2014-10-16 21.52.50&#34;   /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;大須のジャンク屋で売っていたもので，正体不明だったがとりあえず3個購入．1個800円．かなり古そうなので少なくともUVCには対応していないだろう．
何者か調べるためにUSBの情報を見てみる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;lsusb
ID 046d:08d9 Logitech, Inc. QuickCam IM/Connect
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;どうやらこの製品らしい&lt;a href=&#34;https://support.logitech.com/en_us/product/222&#34;&gt;https://support.logitech.com/en_us/product/222&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;どんな画像が取れるのか試しに見てみる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;sudo apt-get install xawtv
xawtv -c /dev/video0
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;http://syundo0730.github.io/images/2014/10/92e3a3779139cfb20b6b014755961208.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-1037&#34; src=&#34;http://syundo0730.github.io/images/2014/10/92e3a3779139cfb20b6b014755961208.png&#34; alt=&#34;Screenshot from 2014-10-16 22^%11^%05&#34;   /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ロボットの目として使うには十分な画質はありそうだ．
ちなみにレンズ周りにあるリング部分でピント調節することができる．ジャンクだったためリングの動きが渋くて，なかなかピント調節の方法を見つけられなかった．&lt;/p&gt;

&lt;p&gt;さて次はBBBの上でOpenCVをビルドして使えるようにする．
OpenCV2.4.9のセットアップは大方このサイト&lt;a href=&#34;http://www.kkaneko.com/rinkou/opencv/opencvinstalllinux.html&#34;&gt;http://www.kkaneko.com/rinkou/opencv/opencvinstalllinux.html&lt;/a&gt;
の通りに進めた(執筆現在は最新の2.4.10のものに置き換わっている)．&lt;/p&gt;

&lt;p&gt;ただし，ダウンロードに時間がかかったり，エラーが出たりしたのでcmakeの部分は以下に変えた&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;cmake -DCMAKE_BUILD_TYPE&lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt;RELEASE -DWITH_TBB&lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt;ON -DWITH_GTK&lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt;ON -DWITH_OPENGL&lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt;ON -DWITH_OPENCL&lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt;OFF -DWITH_CUDA&lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt;OFF -DWITH_UNICAP&lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt;ON -DWITH_V4L&lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt;ON -DWITH_XINE&lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt;ON  .
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;それでもBBB上では一連のセットアップに16時間程度かかった．もうどれだけ時間が掛かろうと寝るだけだったのでサンプル等一緒に入れておけばよかった．
サンプル画像が無いと不便なので母艦のOpenCV環境からコピーした．トホホ．&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;sudo scp -P &lt;span style=&#34;color: #f99b15&#34;&gt;22&lt;/span&gt; /usr/local/share/OpenCV/samples/c/*.png ubuntu@192.168.7.2:/usr/local/share/OpenCV/samples/c
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;まずOpenCVからカメラが読めるか試してみる．以下のコードを使った．&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #8d8687&#34;&gt;// cam.cpp&lt;/span&gt;
&lt;span style=&#34;color: #8d8687&#34;&gt;#include &amp;lt;cv.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #8d8687&#34;&gt;#include &amp;lt;highgui.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #8d8687&#34;&gt;#include &amp;lt;ctype.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #8d8687&#34;&gt;#ifndef CV_WINDOW_FREERATIO&lt;/span&gt;
&lt;span style=&#34;color: #8d8687&#34;&gt;#define CV_WINDOW_FREERATIO 0&lt;/span&gt;
&lt;span style=&#34;color: #8d8687&#34;&gt;#endif&lt;/span&gt;

&lt;span style=&#34;color: #fec418&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #06b6ef&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #fec418&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #fec418&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;argv&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #2f1e2e&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #2f1e2e&#34;&gt;cv&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;VideoCapture&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;cap1(&lt;/span&gt;&lt;span style=&#34;color: #f99b15&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;);&lt;/span&gt;

	&lt;span style=&#34;color: #2f1e2e&#34;&gt;cap1.set(&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;CV_CAP_PROP_FRAME_WIDTH,&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;320&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color: #2f1e2e&#34;&gt;cap1.set(&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;CV_CAP_PROP_FRAME_HEIGHT,&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;240&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;);&lt;/span&gt;

	&lt;span style=&#34;color: #2f1e2e&#34;&gt;cv&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;namedWindow(&lt;/span&gt;&lt;span style=&#34;color: #48b685&#34;&gt;&amp;quot;camera1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;CV_WINDOW_AUTOSIZE&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;CV_WINDOW_FREERATIO);&lt;/span&gt;
	&lt;span style=&#34;color: #815ba4&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #2f1e2e&#34;&gt;cv&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;Mat&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;img1;&lt;/span&gt;
		&lt;span style=&#34;color: #2f1e2e&#34;&gt;cap1&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;img1&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;;&lt;/span&gt;
		&lt;span style=&#34;color: #2f1e2e&#34;&gt;cv&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;imshow(&lt;/span&gt;&lt;span style=&#34;color: #48b685&#34;&gt;&amp;quot;camera1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;img1&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color: #fec418&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;ch&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;cv&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;waitKey(&lt;/span&gt;&lt;span style=&#34;color: #f99b15&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color: #815ba4&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;ch&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color: #2f1e2e&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color: #815ba4&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #2f1e2e&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;コンパイルする．&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;g++ -o cam.out cam.cpp -I/usr/local/include/opencv2 -I/usr/local/include/opencv -L/usr/local/lib -lopencv_core -lopencv_highgui
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これでカメラを読めることが確認できた．ただ残念ながらこのカメラを複数台同時に読み取ることはできなかった．&lt;/p&gt;

&lt;p&gt;次は顔検出をしてみる．こちらのサイト&lt;a href=&#34;http://unasuke.com/howto/2013/face-recognition-in-opencv/&#34;&gt;http://unasuke.com/howto/2013/face-recognition-in-opencv/&lt;/a&gt;のコードをほぼそのまま使わせていただいた．学習済みのデータとしてhaarcascade_frontalface_alt2.xmlを使った．&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #8d8687&#34;&gt;#include &amp;lt;cv.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #8d8687&#34;&gt;#include &amp;lt;highgui.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #8d8687&#34;&gt;#include &amp;lt;ctype.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #8d8687&#34;&gt;#ifndef CV_WINDOW_FREERATIO&lt;/span&gt;
&lt;span style=&#34;color: #8d8687&#34;&gt;#define CV_WINDOW_FREERATIO 0&lt;/span&gt;
&lt;span style=&#34;color: #8d8687&#34;&gt;#endif&lt;/span&gt;

&lt;span style=&#34;color: #fec418&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #06b6ef&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #fec418&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #fec418&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;argv&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #2f1e2e&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #2f1e2e&#34;&gt;cv&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;VideoCapture&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;cap1(&lt;/span&gt;&lt;span style=&#34;color: #f99b15&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;);&lt;/span&gt;

	&lt;span style=&#34;color: #2f1e2e&#34;&gt;cap1.set(&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;CV_CAP_PROP_FRAME_WIDTH,&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;320&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color: #2f1e2e&#34;&gt;cap1.set(&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;CV_CAP_PROP_FRAME_HEIGHT,&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;240&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color: #2f1e2e&#34;&gt;cv&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;namedWindow(&lt;/span&gt;&lt;span style=&#34;color: #48b685&#34;&gt;&amp;quot;camera1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;CV_WINDOW_AUTOSIZE&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;CV_WINDOW_FREERATIO);&lt;/span&gt;
	&lt;span style=&#34;color: #2f1e2e&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;cascadeName&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #48b685&#34;&gt;&amp;quot;/usr/local/share/OpenCV/haarcascades/haarcascade_frontalface_alt2.xml&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color: #2f1e2e&#34;&gt;cv&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;CascadeClassifier&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;cascade;&lt;/span&gt;
	&lt;span style=&#34;color: #815ba4&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;cascade.load(cascadeName))&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f99b15&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color: #fec418&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;scale&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;4.0&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color: #2f1e2e&#34;&gt;cv&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;Mat&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;img,&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;gray;&lt;/span&gt;

	&lt;span style=&#34;color: #815ba4&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #2f1e2e&#34;&gt;cap1&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;img;&lt;/span&gt;

		&lt;span style=&#34;color: #8d8687&#34;&gt;//Trans to glay scale&lt;/span&gt;
		&lt;span style=&#34;color: #2f1e2e&#34;&gt;cv&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;cvtColor(img,&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;gray,&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;CV_BGR2GRAY);&lt;/span&gt;
		&lt;span style=&#34;color: #2f1e2e&#34;&gt;cv&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;Mat&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;smallImg(cv&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;saturate_cast&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #fec418&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;(img.rows&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;scale),&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;cv&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;saturate_cast&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #fec418&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;(img.cols&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;scale),&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;CV_8UC1);&lt;/span&gt;

		&lt;span style=&#34;color: #8d8687&#34;&gt;// 処理時間短縮のために画像を縮小&lt;/span&gt;
		&lt;span style=&#34;color: #2f1e2e&#34;&gt;cv&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;resize(gray,&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;smallImg,&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;smallImg.size(),&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;cv&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;INTER_LINEAR);&lt;/span&gt;
		&lt;span style=&#34;color: #2f1e2e&#34;&gt;cv&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;equalizeHist(&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;smallImg,&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;smallImg);&lt;/span&gt;

		&lt;span style=&#34;color: #2f1e2e&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;vector&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;cv&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;Rect&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;faces;&lt;/span&gt;
		&lt;span style=&#34;color: #8d8687&#34;&gt;/// マルチスケール（顔）探索xo&lt;/span&gt;
		&lt;span style=&#34;color: #8d8687&#34;&gt;// 画像，出力矩形，縮小スケール，最低矩形数，（フラグ），最小矩形&lt;/span&gt;

		&lt;span style=&#34;color: #2f1e2e&#34;&gt;cascade.detectMultiScale(smallImg,&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;faces,&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;1.1&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;CV_HAAR_SCALE_IMAGE,&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;cv&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;Size(&lt;/span&gt;&lt;span style=&#34;color: #f99b15&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;));&lt;/span&gt;

		&lt;span style=&#34;color: #8d8687&#34;&gt;// 結果の描画&lt;/span&gt;
		&lt;span style=&#34;color: #2f1e2e&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;vector&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;cv&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;Rect&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;const_iterator&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;faces.begin();&lt;/span&gt;
		&lt;span style=&#34;color: #815ba4&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;(;&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;faces.end();&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;r)&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color: #2f1e2e&#34;&gt;cv&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;Point&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;center;&lt;/span&gt;
			&lt;span style=&#34;color: #fec418&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;radius;&lt;/span&gt;
			&lt;span style=&#34;color: #2f1e2e&#34;&gt;center.x&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;cv&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;saturate_cast&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #fec418&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;((r&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f99b15&#34;&gt;0.5&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;scale);&lt;/span&gt;
			&lt;span style=&#34;color: #2f1e2e&#34;&gt;center.y&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;cv&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;saturate_cast&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #fec418&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;((r&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f99b15&#34;&gt;0.5&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;scale);&lt;/span&gt;
			&lt;span style=&#34;color: #2f1e2e&#34;&gt;radius&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;cv&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;saturate_cast&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #fec418&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;((r&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;width&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;height)&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f99b15&#34;&gt;0.25&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;scale);&lt;/span&gt;
			&lt;span style=&#34;color: #2f1e2e&#34;&gt;cv&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;circle(&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;img,&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;center,&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;radius,&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;cv&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;Scalar(&lt;/span&gt;&lt;span style=&#34;color: #f99b15&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #f99b15&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #f99b15&#34;&gt;255&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color: #2f1e2e&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color: #2f1e2e&#34;&gt;cv&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;imshow(&lt;/span&gt;&lt;span style=&#34;color: #48b685&#34;&gt;&amp;quot;camera1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color: #fec418&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;ch&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;cv&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;waitKey(&lt;/span&gt;&lt;span style=&#34;color: #f99b15&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color: #815ba4&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;ch&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color: #2f1e2e&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color: #815ba4&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #2f1e2e&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;コンパイルする．&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;g++ -o facedetect.out facedetect.cpp -I/usr/local/include/opencv2 -I/usr/local/include/opencv -L/usr/local/lib -lopencv_core -lopencv_highgui -lopencv_imgproc -lopencv_objdetect
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;こんな感じで顔を検出して赤い円を描画できた．
&lt;a href=&#34;http://syundo0730.github.io/images/2014/10/kao.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-1040&#34; src=&#34;http://syundo0730.github.io/images/2014/10/kao.png&#34; alt=&#34;kao&#34;   /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;メガネをかけていると蛍光灯の光の加減で認識が難しかった．メガネかけてる人の学習データも入れないといけない．
とりあえずメガネを取れば顔検出できた．&lt;/p&gt;

&lt;p&gt;おわり&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>