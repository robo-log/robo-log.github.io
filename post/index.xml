<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ROBO LOG</title>
    <link>http://syundo0730.github.io/post/</link>
    <description>Recent content in Posts on ROBO LOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 31 Jan 2016 15:32:18 +0900</lastBuildDate>
    <atom:link href="http://syundo0730.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>mbedのMPU6050のライブラリを更新した</title>
      <link>http://syundo0730.github.io/post/2016-01-31-port-6050-library/</link>
      <pubDate>Sun, 31 Jan 2016 15:32:18 +0900</pubDate>
      
      <guid>http://syundo0730.github.io/post/2016-01-31-port-6050-library/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/jrowberg/i2cdevlib/tree/master/Arduino/MPU6050&#34;&gt;こちらの&lt;/a&gt;Arduino用に書かれたコードからmbed用に移植したものを公開していたのだが、いかんせん何年も放ったらかしにしていたため、重い腰を上げて最新のコードに追従させた。特に何か大きく新しい機能が入ったとかは無いようで、リファクタリング程度の更新だった(とはいえ未だコードの品質は良いとは言えない&amp;hellip;)。
mbed用のライブラリは&lt;a href=&#34;https://developer.mbed.org/users/syundo0730/code/MPU6050/&#34;&gt;こちら&lt;/a&gt;。使用方法は&lt;a href=&#34;https://developer.mbed.org/users/syundo0730/code/MPU6050_Example/&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;mbedのライブラリに加えた変更点は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Arduino側のライブラリで変更があった箇所(接続テスト用の関数のようだが、なぜ追加したのかよくわからない)の修正&lt;/li&gt;
&lt;li&gt;I2Cに流すデータのフォーマットなどを決めている便利クラスI2Cdevのメンバ関数をArduinoに倣って全部staticにした。pinName をマクロで指定しなきゃいけないとか、複数のMPU6050を複数のi2cポートで使うのが難しくなるとかあるので、本当はやりたくなかったけど、Arduinoにコードを近づければ、ほぼコピペするだけで移植を終わらせることができるから、そうした。&lt;/li&gt;
&lt;li&gt;ArduinoのSerial.printをエミュレートするクラスを作った。これでArduinoのprintデバッグ部分をちょっと書き換えるだけで移植できるようになった。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Arduinoからmbedに移植するときに書き換えないといけないのは、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MPU6050.h : 48-52行のコメントアウトされているのを外す。なんでこれコメントアウトされているんだ？コンパイル通らない。&lt;/li&gt;
&lt;li&gt;MPU6050.cpp : 何もなし&lt;/li&gt;
&lt;li&gt;MPU6050_6Axis_MotionApps20.h : 103-108行 のデバッグ出力の部分をArduinoSerialに書き換える&lt;/li&gt;
&lt;li&gt;helper_3dmath.h : sqrtを使っているところを&lt;code&gt;sqrt((float)(x*x + y*y + z*z));&lt;/code&gt;に書き換える&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今後変更があっても簡単に追従できるようにできたのは良かった。
MPU9150も動かしたいというようなリクエストも今まで何回か来ていたので、MPU9150の方もちゃっちゃとやってしまおうかなと思っている。&lt;/p&gt;

&lt;p&gt;おわり。&lt;/p&gt;

&lt;h2 id=&#34;追記:eb2554d4c5dcb8776eef64d76a80df35&#34;&gt;追記&lt;/h2&gt;

&lt;p&gt;MPU9150のライブラリも移植した。MPU6050のために周辺を整備していたおかげで一瞬で移植できた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ライブラリ: &lt;a href=&#34;https://developer.mbed.org/users/syundo0730/code/MPU9150/&#34;&gt;https://developer.mbed.org/users/syundo0730/code/MPU9150/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;使用例: &lt;a href=&#34;https://developer.mbed.org/users/syundo0730/code/MPU9150_Example/&#34;&gt;https://developer.mbed.org/users/syundo0730/code/MPU9150_Example/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>良い物をメモしておく</title>
      <link>http://syundo0730.github.io/post/2016-01-22-Goods-Memo/</link>
      <pubDate>Fri, 22 Jan 2016 23:57:58 +0900</pubDate>
      
      <guid>http://syundo0730.github.io/post/2016-01-22-Goods-Memo/</guid>
      <description>

&lt;p&gt;リンクしておきたいメモ&lt;/p&gt;

&lt;h2 id=&#34;加工機:c0c3fb7bf9b2fd8954de5f5dd2c5a4fa&#34;&gt;加工機&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://gigazine.net/news/20160121-smart-laser-co2/&#34;&gt;低価格なレーザー加工機&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/toodooda/status/690979282038853633&#34;&gt;光造形式3Dプリンタ G Printer&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;電子部品:c0c3fb7bf9b2fd8954de5f5dd2c5a4fa&#34;&gt;電子部品&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://akizukidenshi.com/catalog/g/gM-10140/&#34;&gt;BLE無線モジュール&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://akizukidenshi.com/catalog/g/gM-08461/&#34;&gt;超小型USBシリアル変換モジュール&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HugoでGitHub markdown形式でコードブロックを記述する</title>
      <link>http://syundo0730.github.io/post/2016-01-01-hugoFormula/</link>
      <pubDate>Fri, 01 Jan 2016 23:41:35 +0900</pubDate>
      
      <guid>http://syundo0730.github.io/post/2016-01-01-hugoFormula/</guid>
      <description>&lt;p&gt;ふとブログにコードを載せようとしてmarkdown形式で書いてみたら反映されなかった。
Hugoに設定が要るらしい。&lt;/p&gt;

&lt;p&gt;Hugoをbrewからインストールして使っていたが、versionが古く0.14がインストールされていた。
最新のHugoをビルドして使う必要がある。&lt;/p&gt;

&lt;p&gt;まずgo を入れていなかったのでインストールする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ef6155&#34;&gt;$ &lt;/span&gt;brew install go
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;mercurial も入れていなかったのでインストール。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ef6155&#34;&gt;$ &lt;/span&gt;brew install mercurial
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;最新のHugoをビルドして使う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ef6155&#34;&gt;$ &lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;export &lt;/span&gt;&lt;span style=&#34;color: #ef6155&#34;&gt;GOPATH&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ef6155&#34;&gt;$HOME&lt;/span&gt;/go
&lt;span style=&#34;color: #ef6155&#34;&gt;$ &lt;/span&gt;go get -v github.com/spf13/hugo
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;$HOME/go/bin にHugoのバイナリが生成されるので、ここをPATHに追加しておく&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ef6155&#34;&gt;$ &lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;export &lt;/span&gt;&lt;span style=&#34;color: #ef6155&#34;&gt;PATH&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ef6155&#34;&gt;$PATH&lt;/span&gt;:&lt;span style=&#34;color: #ef6155&#34;&gt;$HOME&lt;/span&gt;/go/bin
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Hugoがちゃんと入ったか動作確認する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ef6155&#34;&gt;$ &lt;/span&gt;hugo version
Hugo Static Site Generator v0.16-DEV BuildDate: 2016-01-01T23:34:08+09:00
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;次にコードのハイライトを解析するPygmentsのインストールをする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ef6155&#34;&gt;$ &lt;/span&gt;pip install Pygments
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;config.tomlにPygmentsを使うことを設定する。
Pygmentsのスタイルのプレビューは公式サイトで見ることができる。&lt;a href=&#34;http://pygments.org/&#34;&gt;Pygments&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;pygmentscodefences&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color: #2f1e2e&#34;&gt;pygmentsstyle&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #48b685&#34;&gt;&amp;quot;paraiso-light&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ただし、Qiitaのmarkdown記法で&lt;code&gt;bash:filename&lt;/code&gt;とか書いてもファイル名は表示されない&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>意識はいつ生まれるのか</title>
      <link>http://syundo0730.github.io/post/20151220NullaDiPiuGrande/</link>
      <pubDate>Sun, 20 Dec 2015 04:15:34 +0900</pubDate>
      
      <guid>http://syundo0730.github.io/post/20151220NullaDiPiuGrande/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.amazon.co.jp/%E6%84%8F%E8%AD%98%E3%81%AF%E3%81%84%E3%81%A4%E7%94%9F%E3%81%BE%E3%82%8C%E3%82%8B%E3%81%AE%E3%81%8B%E2%80%95%E2%80%95%E8%84%B3%E3%81%AE%E8%AC%8E%E3%81%AB%E6%8C%91%E3%82%80%E7%B5%B1%E5%90%88%E6%83%85%E5%A0%B1%E7%90%86%E8%AB%96-%E3%82%B8%E3%83%A5%E3%83%AA%E3%82%AA%E3%83%BB%E3%83%88%E3%83%8E%E3%83%BC%E3%83%8B/dp/4750514500&#34;&gt;意識はいつ生まれるのか――脳の謎に挑む統合情報理論
ジュリオ・トノーニ (著), マルチェッロ・マッスィミーニ (著), 花本 知子 (翻訳)&lt;/a&gt;
を読んだ。&lt;/p&gt;

&lt;p&gt;この本で述べられていることはそのタイトル通りで、
脳を観測することで意識があるのか無いのかがわかるということ、
つまり意識がいつ生まれていつ消えているのかということだ。
結論から言うと、大脳の一部である視床-皮質系の情報処理の複雑度の高/低によって
意識のON/OFFが切り替わるらしい。
この視床-皮質系が何をするところとされているのかいまひとつよくわからなかったが、
視神経に直接関係するというわけでもないらしく、そこを計測してみたらそうなったということらしい。
切り替わる原因となるのは脳内に分泌される正イオン(カリウムイオン)による電位の変化で、
ニューロン間の信号の伝達が鈍くなることだと述べられている。
例えばノンレム睡眠のときはこれが分泌されるし、
麻酔の一種は脳内でカリウムを分泌する器官の働きを高めたりするらしいので、
意識の変化と関係があることは間違いない。&lt;/p&gt;

&lt;p&gt;筆者らは視床-皮質系の一部に電気的な刺激を加えて、
脳波計によって視床-皮質系のその他の部分が活性化するタイミングを計測した。
情報処理の複雑度をどう計算するのかは詳細が書いていなかったが、
「統合」と「情報」の合計値で評価するらしい。
「統合」とはあるニューロンに刺激が加えられたときにその他のニューロンが活性化するかということ。
「情報」とはあるニューロンに加えた刺激とその他のニューロンの活性の時系列的な差を示すものだ。
ノンレム睡眠時の脳とか脳死状態の患者の脳を計測して数値を計算すると、意識があるときの脳とはっきりとした違いが
出るというから面白い。&lt;/p&gt;

&lt;p&gt;ただ、この本で述べられているのは意識があるならば視床-皮質系の情報処理の複雑度が上がる、
ということだけで、いかにして意識を生み出すのかということは依然謎に包まれている。
視床-皮質系がぐちゃぐちゃと活性化しているときに行われている情報処理とは一体何なのか、
これがわかってくると意識を持った人工知能が実現できるかもしれない。&lt;/p&gt;

&lt;p&gt;おわり。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>マスタリングTPC/IP勉強</title>
      <link>http://syundo0730.github.io/post/2015-11-23masteringTCPIP/</link>
      <pubDate>Tue, 24 Nov 2015 00:18:47 +0900</pubDate>
      
      <guid>http://syundo0730.github.io/post/2015-11-23masteringTCPIP/</guid>
      <description>

&lt;h1 id=&#34;1章-ネットワーク基礎知識:2834a11197f94bc4e7ce706eb948f310&#34;&gt;1章 ネットワーク基礎知識&lt;/h1&gt;

&lt;h2 id=&#34;1-3-プロトコルとは:2834a11197f94bc4e7ce706eb948f310&#34;&gt;1.3 プロトコルとは&lt;/h2&gt;

&lt;p&gt;TCP/IP &amp;hellip;IETFによって標準化されたもの&lt;/p&gt;

&lt;h3 id=&#34;1-5-3-osi参照モデル:2834a11197f94bc4e7ce706eb948f310&#34;&gt;1.5.3 OSI参照モデル&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;アプリケーション層

&lt;ul&gt;
&lt;li&gt;通信に関係するアプリケーション&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;プレゼンテーション層

&lt;ul&gt;
&lt;li&gt;データ形式に関するところ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;セッション層

&lt;ul&gt;
&lt;li&gt;データ転送に関するところ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;トランスポート層

&lt;ul&gt;
&lt;li&gt;宛先のアプリケーションにデータを確実に届ける役目&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ネットワーク層

&lt;ul&gt;
&lt;li&gt;宛先までデータを届ける役割&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;データリンク層

&lt;ul&gt;
&lt;li&gt;物理層で直接接続されたノード間の通信を可能にする&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;物理層

&lt;ul&gt;
&lt;li&gt;ビット列を電圧の高低や光の点滅に変換したりそういうこと&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1-7-通信方式の種類:2834a11197f94bc4e7ce706eb948f310&#34;&gt;1.7 通信方式の種類&lt;/h2&gt;

&lt;h3 id=&#34;1-7-1:2834a11197f94bc4e7ce706eb948f310&#34;&gt;1.7.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;コネクション型

&lt;ul&gt;
&lt;li&gt;データを送る前に送信ホストと受信ホストの間で回線の接続をする&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;コネクションレス型

&lt;ul&gt;
&lt;li&gt;通信相手を確認しない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1-8-ネットワークの構成要素:2834a11197f94bc4e7ce706eb948f310&#34;&gt;1.8 ネットワークの構成要素&lt;/h2&gt;

&lt;h3 id=&#34;1-8-1-通信媒体とデータリンク:2834a11197f94bc4e7ce706eb948f310&#34;&gt;1.8.1 通信媒体とデータリンク&lt;/h3&gt;

&lt;p&gt;ツイストケーブルとか&lt;/p&gt;

&lt;h3 id=&#34;1-8-2-ネットワーク-インターフェース:2834a11197f94bc4e7ce706eb948f310&#34;&gt;1.8.2 ネットワーク・インターフェース&lt;/h3&gt;

&lt;p&gt;LANポートの部分&lt;/p&gt;

&lt;h3 id=&#34;1-8-3-リピーター:2834a11197f94bc4e7ce706eb948f310&#34;&gt;1.8.3 リピーター&lt;/h3&gt;

&lt;p&gt;ネットワークを延長するもの。減衰した信号を増幅する&lt;/p&gt;

&lt;h3 id=&#34;1-8-4-ブリッジ-レイヤ2スイッチ:2834a11197f94bc4e7ce706eb948f310&#34;&gt;1.8.4 ブリッジ/レイヤ2スイッチ&lt;/h3&gt;

&lt;p&gt;データリンク層&lt;/p&gt;

&lt;h3 id=&#34;1-8-5-ルーター-レイヤ3スイッチ:2834a11197f94bc4e7ce706eb948f310&#34;&gt;1.8.5 ルーター/レイヤ3スイッチ&lt;/h3&gt;

&lt;p&gt;ネットワーク層&lt;/p&gt;

&lt;h3 id=&#34;1-8-6-ゲートウェイ:2834a11197f94bc4e7ce706eb948f310&#34;&gt;1.8.6 ゲートウェイ&lt;/h3&gt;

&lt;p&gt;トランスポート層からアプリケーション層までの階層で、データを中継する装置&lt;/p&gt;

&lt;h1 id=&#34;2章-tcp-ip-基礎知識:2834a11197f94bc4e7ce706eb948f310&#34;&gt;2章 TCP/IP 基礎知識&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>記号創発システムシンポジウムに行ってきた</title>
      <link>http://syundo0730.github.io/post/souhatu20151123/</link>
      <pubDate>Mon, 23 Nov 2015 10:17:28 +0900</pubDate>
      
      <guid>http://syundo0730.github.io/post/souhatu20151123/</guid>
      <description>

&lt;p&gt;ドワンゴで開催された&lt;a href=&#34;http://www.emergent-symbol.systems/news/1st_sympo_with_crest&#34;&gt;記号創発システムシンポジウム&lt;/a&gt;
に行ってきた。
ニコ生はこちら&lt;a href=&#34;http://live.nicovideo.jp/watch/lv242286012&#34;&gt;新鋭「人工知能×ロボティクス」プロジェクトによるシンポジウム&lt;/a&gt;
以下はメモ。でも途中でPCのバッテリーが切れてしまったので、午前中の分しか無い。&lt;/p&gt;

&lt;h1 id=&#34;記号創発システム論調査研究会設置にあたって:ced8b9337de5dd273e75e4e035be1676&#34;&gt;記号創発システム論調査研究会設置にあたって&lt;/h1&gt;

&lt;p&gt;谷口忠大先生（立命館大学）&lt;/p&gt;

&lt;p&gt;谷口先生による記号創発システムの重要性についての説明&lt;/p&gt;

&lt;h2 id=&#34;記号接地問題:ced8b9337de5dd273e75e4e035be1676&#34;&gt;記号接地問題&lt;/h2&gt;

&lt;h3 id=&#34;そもそも記号とは:ced8b9337de5dd273e75e4e035be1676&#34;&gt;そもそも記号とは&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;記号の恣意性&lt;/li&gt;
&lt;li&gt;真なる記号系が存在しているとか呈している&lt;/li&gt;
&lt;li&gt;与えられた記号系からそれに設置しようとするからだめ&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;何が問題だったか:ced8b9337de5dd273e75e4e035be1676&#34;&gt;何が問題だったか&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;記号とは何か

&lt;ul&gt;
&lt;li&gt;セミオーシス[Peirce]&lt;/li&gt;
&lt;li&gt;言語における記号も、サイン、解釈項、対象、これらがダイナミックに変わる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;じゃあどこから始めるべきか:ced8b9337de5dd273e75e4e035be1676&#34;&gt;じゃあどこから始めるべきか&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;主体のセンサー、身体

&lt;ul&gt;
&lt;li&gt;環世界 エルンスト＊マッハ　「感覚の分析」&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;記号創発システム論:ced8b9337de5dd273e75e4e035be1676&#34;&gt;記号創発システム論&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;記号が生まれる

&lt;ul&gt;
&lt;li&gt;記号を使って社会と関わる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;crest-記号創発ロボティクスによる人間機械コラボレーション基盤創成:ced8b9337de5dd273e75e4e035be1676&#34;&gt;CREST「記号創発ロボティクスによる人間機械コラボレーション基盤創成」&lt;/h1&gt;

&lt;p&gt;長井隆行先生（電気通信大学）&lt;/p&gt;

&lt;p&gt;プロジェクト概要&lt;/p&gt;

&lt;h2 id=&#34;全体像:ced8b9337de5dd273e75e4e035be1676&#34;&gt;全体像&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;概念、信念、応用&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;目指す世界:ced8b9337de5dd273e75e4e035be1676&#34;&gt;目指す世界&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;人とロボットの調和的, etc&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;２つのアプローチ:ced8b9337de5dd273e75e4e035be1676&#34;&gt;２つのアプローチ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;DN, ベイズ&lt;/li&gt;
&lt;li&gt;従来のアプローチ

&lt;ul&gt;
&lt;li&gt;入力に対するラベルを人手でやる -&amp;gt; 認識&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;新たなアプローチ

&lt;ul&gt;
&lt;li&gt;教師なし学習&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;研究内容紹介1-概念班1:ced8b9337de5dd273e75e4e035be1676&#34;&gt;[研究内容紹介1（概念班1）]&lt;/h1&gt;

&lt;p&gt;尾形哲也先生（早稲田大学）&lt;/p&gt;

&lt;h2 id=&#34;背景:ced8b9337de5dd273e75e4e035be1676&#34;&gt;背景&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;DNNをロボットに応用する、ロボティクスへの応用はこれから

&lt;ul&gt;
&lt;li&gt;パターンを認識されても困る&lt;/li&gt;
&lt;li&gt;感覚と運動によってどう変わるかという概念獲得をしてほしい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;マルチモーダル学習

&lt;ul&gt;
&lt;li&gt;画像、音声、全部を生データとしてDNNに入力する&lt;/li&gt;
&lt;li&gt;時間方向に引き伸ばして2000次元&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;記号と外界の結合

&lt;ul&gt;
&lt;li&gt;多義性を持った入力&lt;/li&gt;
&lt;li&gt;ちゃんと汎化してくれる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;まとめ:ced8b9337de5dd273e75e4e035be1676&#34;&gt;まとめ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;パターンの有限数の符号への対応付け&lt;/li&gt;
&lt;li&gt;概念: パターンを生成した機構を推定し、予測、生成すること&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;研究内容紹介1-概念班2:ced8b9337de5dd273e75e4e035be1676&#34;&gt;[研究内容紹介1（概念班2）]&lt;/h1&gt;

&lt;p&gt;谷口忠大先生(立命館大学)&lt;/p&gt;

&lt;h2 id=&#34;記号接地:ced8b9337de5dd273e75e4e035be1676&#34;&gt;記号接地&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;家族しかわからないキーワード：お父さんの部屋&lt;/li&gt;
&lt;li&gt;ロボットのセンサ、モータ系と環境との相互作用の結果得られる高次元特徴量の性質を事前にしることは難しい&lt;/li&gt;
&lt;li&gt;何がグローバルな「常識」で何がローカルな「知識か」判別困難&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;mldaとnpylmを用いた物体概念と言語モデルの相互学習:ced8b9337de5dd273e75e4e035be1676&#34;&gt;MLDAとNPYLMを用いた物体概念と言語モデルの相互学習&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;語彙学習による物体カテゴリ形成、音声認識の高精度化

&lt;ul&gt;
&lt;li&gt;文節区切りと同時に物体概念を学習&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;場所概念と言語モデルの相互推定によるロボットの場所に関する語彙獲得

&lt;ul&gt;
&lt;li&gt;位置情報と語彙情報を統合することで精度向上&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;階層ディリクレ過程隠れ言語モデルに基づくノンパラ面トリックベイズ二重文節解析

&lt;ul&gt;
&lt;li&gt;言語モデルを知っているので文節解析できる&lt;/li&gt;
&lt;li&gt;音素からだけではなかなか精度が上がらないことが知られている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;実環境での教師データ収拾の非効率性:ced8b9337de5dd273e75e4e035be1676&#34;&gt;実環境での教師データ収拾の非効率性&lt;/h2&gt;

&lt;p&gt;じゃあクラウドだ&lt;/p&gt;

&lt;h3 id=&#34;クラウドロボティクス:ced8b9337de5dd273e75e4e035be1676&#34;&gt;クラウドロボティクス&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;階層ベイズと組み合わせやすいのでは？&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;招待講演-記号創発ロボティクスに関する期待:ced8b9337de5dd273e75e4e035be1676&#34;&gt;招待講演「記号創発ロボティクスに関する期待」&lt;/h1&gt;

&lt;p&gt;安西祐一郎 先生 (独立行政法人日本学術振興会理事長)&lt;/p&gt;

&lt;h2 id=&#34;どうやって人間が自動機械の制御を学習するのか:ced8b9337de5dd273e75e4e035be1676&#34;&gt;どうやって人間が自動機械の制御を学習するのか&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;経緯

&lt;ul&gt;
&lt;li&gt;1984 年後半&lt;/li&gt;
&lt;li&gt;BP を実用する問題に関する書籍が甘利先生から出てブームになった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ベンチマークとして簡潔な問題を設定したほうがいいのではないか

&lt;ul&gt;
&lt;li&gt;問題と現実が乖離しすぎるんでないか&lt;/li&gt;
&lt;li&gt;蓄積をして良い成果を出してほしい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;「意味」、「理解」の意味をしっかり把握したほうがいいのでは&lt;/li&gt;
&lt;li&gt;応用

&lt;ul&gt;
&lt;li&gt;実現可能であるのはプラクティカルに実現可能なのか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;言語 とは

&lt;ul&gt;
&lt;li&gt;何のことか、全部を言っているなら大変なこと&lt;/li&gt;
&lt;li&gt;-&amp;gt; (言語，やりたいのは全部ですね．全部やらないとどうにもならん．)(谷口先生Twitterより)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;問題を明確にしようという話&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;船をゴールに向かって制御する問題:ced8b9337de5dd273e75e4e035be1676&#34;&gt;船をゴールに向かって制御する問題&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;すぐに操舵に反応しない。何分もかかって操舵する。習熟が必要。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;まとめ-1:ced8b9337de5dd273e75e4e035be1676&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;がんばってね、というお話&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>第8回ROS勉強会に参加してきた</title>
      <link>http://syundo0730.github.io/post/ROS%E5%8B%89%E5%BC%B7%E4%BC%9A/</link>
      <pubDate>Sun, 04 Oct 2015 13:06:49 +0900</pubDate>
      
      <guid>http://syundo0730.github.io/post/ROS%E5%8B%89%E5%BC%B7%E4%BC%9A/</guid>
      <description>

&lt;p&gt;2015/10/04に開催された、第８回ROS勉強会に参加してきた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://ros-users.doorkeeper.jp/events/30434&#34;&gt;https://ros-users.doorkeeper.jp/events/30434&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;dronecodeの概要とrosの対応について-himamura-さん:cdcb53ee6616dd01ebf332c0122baaf3&#34;&gt;Dronecodeの概要とROSの対応について @himamura さん&lt;/h2&gt;

&lt;p&gt;Droncodeとはオープンソースのフライトコントローラ(のソフト)のことらしい。
これのROS対応を進めているらしい。
Linuxを積んだボードなのでその中でROSが動く。&lt;/p&gt;

&lt;p&gt;遠隔操作をROSのメッセージでもって行うのはやっていないし、難しそうという話が会場から出た。&lt;/p&gt;

&lt;h2 id=&#34;kotlinでrosノードを動かしてみた-iwata-n-さん:cdcb53ee6616dd01ebf332c0122baaf3&#34;&gt;kotlinでROSノードを動かしてみた @iwata_n さん&lt;/h2&gt;

&lt;p&gt;slackのメッセージを受けてROSに送るプロキシみたいなものをkotlinで書いたということ。&lt;/p&gt;

&lt;h3 id=&#34;何をするのか:cdcb53ee6616dd01ebf332c0122baaf3&#34;&gt;何をするのか&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;ROSJavaのインストール&lt;/li&gt;
&lt;li&gt;kotlinを書く&lt;/li&gt;
&lt;li&gt;intelliJを使ってkotlinからJavaに変換する&lt;/li&gt;
&lt;li&gt;ROSの上でkotlinが動く&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;kotlinはJavaを書くよりマシだというだけでなく、
pythonより幾分か素敵な文法と機能を持っているという点で魅力的だと思う。&lt;/p&gt;

&lt;p&gt;ただ、文法がC的でないという理由で馴染めない人も多かろうからROSでは流行らない。&lt;/p&gt;

&lt;h2 id=&#34;sphinxcontrib-ros-otamasan-さん:cdcb53ee6616dd01ebf332c0122baaf3&#34;&gt;sphinxcontrib-ros @otamasan さん&lt;/h2&gt;

&lt;p&gt;ROSのドキュメント生成をソースのクラス定義などを使って一部自動化したという話。
ROSのドキュメントの置き場、生成法にはいろいろ派閥があるそうで、新しい選択肢として名乗りを上げてほしい。&lt;/p&gt;

&lt;h2 id=&#34;自律型生活支援ロボットmini-ken-demu-さん:cdcb53ee6616dd01ebf332c0122baaf3&#34;&gt;自律型生活支援ロボットMini @ken_demu さん&lt;/h2&gt;

&lt;p&gt;発表者が17歳だった。
これを17歳が作れるのかというのがにわかには信じられない。
圧倒されて会場の空気が変わってた。
ものすごい実装力。
オープンソースのものをうまく組み合わせて高度な機能を実現していた。&lt;/p&gt;

&lt;h2 id=&#34;テーブルトップ型対話ロボットsotaの紹介-masato-ka-さん:cdcb53ee6616dd01ebf332c0122baaf3&#34;&gt;テーブルトップ型対話ロボットSotaの紹介 @masato_ka さん&lt;/h2&gt;

&lt;p&gt;NTTデータのロボット事業の紹介。
SotaとNTT研究所の研究成果を組み合わせた例。
高齢者見守りなどに使えるらしい。
例えば夜間に寝床を抜けて徘徊しそうなとき、声をかけてそれを止めたりする。&lt;/p&gt;

&lt;p&gt;最後に未来館でのデモを実演してくれた。
Sotaはまだ一般には売られていないが、将来的に10万程度で買えるらしい。
かわいい。ほしい。&lt;/p&gt;

&lt;h2 id=&#34;euslispでロボットプログラミング-hyaguchijsk:cdcb53ee6616dd01ebf332c0122baaf3&#34;&gt;euslispでロボットプログラミング @hyaguchijsk&lt;/h2&gt;

&lt;p&gt;jskではこれが使われているんだなぁ。
一部だろうけど。
機械系出身のひとにはいきなりLispはきつかろうと思う。&lt;/p&gt;

&lt;p&gt;でも東大生ならなんてことないのかもしれない。
会場では取り残されている人が続出していた様子だ。&lt;/p&gt;

&lt;h2 id=&#34;ros2-0時代に備えるためのc-11-14-otl-さん:cdcb53ee6616dd01ebf332c0122baaf3&#34;&gt;ROS2.0時代に備えるためのc++11, 14 @OTL さん&lt;/h2&gt;

&lt;p&gt;発表中に挙手でアンケートが取られたのだが、
C++11, 14 を普段から使っている人は0だった。&lt;/p&gt;

&lt;p&gt;私はここ半年触っていないなぁと思ったので手を挙げなかったが、
ここはC++勉強会で無かったのでC++14, 17とかいうものの存在を知っているだけで珍しいのだった。
カルチャーショックだ。&lt;/p&gt;

&lt;h2 id=&#34;rviz-rqtなどによるオンライン可視化-ログデータのオフライン可視化-仮-garaemon-coder-さん:cdcb53ee6616dd01ebf332c0122baaf3&#34;&gt;rviz、rqtなどによるオンライン可視化、ログデータのオフライン可視化(仮) @garaemon_coder さん&lt;/h2&gt;

&lt;p&gt;可視化はマルチスレッドのプログラムになるから難しいが、ROSのpub/sub型の通信方式によって可視化がしやすくなった&lt;/p&gt;

&lt;h3 id=&#34;どの方法を使って可視化をするか:cdcb53ee6616dd01ebf332c0122baaf3&#34;&gt;どの方法を使って可視化をするか&lt;/h3&gt;

&lt;h4 id=&#34;タイムスタンプが重要かどうか:cdcb53ee6616dd01ebf332c0122baaf3&#34;&gt;タイムスタンプが重要かどうか&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;重要 =&amp;gt; オフラインでの可視化

&lt;ul&gt;
&lt;li&gt;rqt_bag&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;重要でない =&amp;gt; オンラインでの可視化

&lt;ul&gt;
&lt;li&gt;rqt &amp;lt;- 基本的に使わない。rvizに2次元情報をオーバーレイすればいいから。&lt;/li&gt;
&lt;li&gt;rviz &amp;lt;- プラグインを使ってカスタマイズすればとても便利に&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JSKのリポジトリを見れば幸せになれる。&lt;/p&gt;

&lt;p&gt;気になったもの&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;image_view2

&lt;ul&gt;
&lt;li&gt;画像を表示するだけでなく、マウスでクリックした座標などがトピックとして取得できる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;footstepの可視化のやつ(名前忘れた)

&lt;ul&gt;
&lt;li&gt;初期位置とゴールを手動で指定してやれば、その間の歩行計画をした結果を可視化してくれる&lt;/li&gt;
&lt;li&gt;グリッド状にばらまいたノードも可視化されていて、Footstep planningに覚えがある人にはたまらない画面だった。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;osxではじめるrosプログラミング-youtalk-さん:cdcb53ee6616dd01ebf332c0122baaf3&#34;&gt;OSXではじめるROSプログラミング @youtalk さん&lt;/h2&gt;

&lt;p&gt;OSをアップデートしたらXcodeがアップデートされてしまってROS環境が壊れてしまったらしい。
Macだめじゃん。みたいな空気で終わってしまった。&lt;/p&gt;

&lt;h2 id=&#34;rosと機械学習でroombaを覚醒させたい-準備編-longjie0723-さん:cdcb53ee6616dd01ebf332c0122baaf3&#34;&gt;ROSと機械学習でRoombaを覚醒させたい（準備編） @longjie0723 さん&lt;/h2&gt;

&lt;p&gt;RNNを教師あり学習で学習して赤外線センサとバンパセンサの情報を使って自動走行を実現していた。
PFNの例の車のデモを1台で、教科学習でなくて人手で行ったもの。&lt;/p&gt;

&lt;h2 id=&#34;おわりに:cdcb53ee6616dd01ebf332c0122baaf3&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;面白い発表ばかりだった。ヴァニラをROS対応して勉強会で発表できる日が来るのかなぁ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ROBO-ONE 27th</title>
      <link>http://syundo0730.github.io/post/robo-one-27th/</link>
      <pubDate>Sat, 03 Oct 2015 22:46:10 +0900</pubDate>
      
      <guid>http://syundo0730.github.io/post/robo-one-27th/</guid>
      <description>&lt;p&gt;第27回ROBO-ONEの予選を見に行ってきた。
今回はヴァニラはエントリーしていなかったが、人形使いさんのチームメンバーという形で大会に顔を出させていただいた。&lt;/p&gt;

&lt;p&gt;予選は安定して4.5m踏破できるロボットが増えてきた印象だった。
自分で確かめてはいないが、話を聞くところによると、床に置かれた障害物はゴムシートとプラスチックの板？のようだということだった。
今までは幅の狭いゴムのシールが貼ってあっただけだったので、難しくなったと言える。
しかし、ちゃんと足を上げて歩行していれば今までと同じように進むことはできるようだった。&lt;/p&gt;

&lt;p&gt;Frostyさんの速さといったら、なんということだろう。&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/s81OgcZzpd4&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;西村さんは予選の総括として、自律性の向上を推奨したいと仰っていた。
自動で避けろという問いかけで、避けなければ通れないような障害物が置かれるときが来るかもしれない(ないない)。&lt;/p&gt;

&lt;p&gt;今回のロボワンで(特にドール勢の)注目の的になっていたのが、真広さんのST-00だ。
予選の動画を見てもわかるようにものすごい完成度だ。
遠目で見ると本物のHRP-4Cが歩いているようにしか見えない。&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/nc5T3ACm6hM&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;予選が終わった後、念願のドールロボ大集合！写真撮影をした。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://syundo0730.github.io/images/2015/10/ドール集合写真.jpg&#34; alt=&#34;ドール集合写真&#34; title=&#34;ドール集合写真&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ROBO-ONEの歴史の中でこれだけのドールロボが集まったのはこれが初めてだろう。
そして最後かもしれない。
左から順に、びいむさん @beam8000 の「まい」ちゃん、
舞鈴堂さん @Blade_Oh の「音叉」ちゃん、「剣姫」ちゃん、
真広さんの「ST-00」ちゃん、
きゅんどう @ksyundo の「ヴァニラ」、
人形つかいさん @witch_kazumin の「茉莉花」ちゃん、
のむむさん @umumon の「AMATERAS」様、「ゴエン」さん。&lt;/p&gt;

&lt;p&gt;のむむさんのAMATERASさんなんかはドールロボの道を切り開いたとも言える名前通りの神的な存在なので、
一緒のフレームにうちのヴァニラが映ることができて、とっても嬉しかった。&lt;/p&gt;

&lt;p&gt;今年も人形つかいさん茉莉花ちゃんと写真を撮ることができた。
前回は僕がドール外皮を付けていかなかったため1年ぶりだ。
ドール集合を呼びかけていただいて、大変良かったです。
いつもお世話になってます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://syundo0730.github.io/images/2015/10/まりかちゃんと鎧.jpg&#34; alt=&#34;まりかちゃんと鎧&#34; title=&#34;まりかちゃんと鎧&#34; /&gt;&lt;/p&gt;

&lt;p&gt;うちの娘は顔の外皮がすぐズレちゃうので目が怖い。あと眼球が銀色のままだから(usbカメラ)怖い。塗らなければ。&lt;/p&gt;

&lt;p&gt;前においてあるのは人形つかいさんが購入された鎧ボトルカバー。
ヴァニラには着れないけど、これでバトル出場されたら応援したくなること間違いない。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://syundo0730.github.io/images/2015/10/アマテラスと茉莉花ちゃん.jpg&#34; alt=&#34;アマテラスと茉莉花ちゃん&#34; title=&#34;アマテラスと茉莉花ちゃん&#34; /&gt;&lt;/p&gt;

&lt;p&gt;このようにMSDサイズ勢は兜をちゃんと被れる。かわいい。&lt;/p&gt;

&lt;p&gt;今回、ヴァニラを運ぶために、MSDドール用のキャリングケースを導入した。
&lt;a href=&#34;http://www.dollfiedream.tokyo/jp/dollfiedream/case.html/&#34;&gt;ドール用キャリングケース&lt;/a&gt;
秋葉原のラジオ会館、ドールスポットに在庫があったので買った。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://syundo0730.github.io/images/2015/10/ドールバッグ.jpg&#34; alt=&#34;ドールバッグ&#34; title=&#34;ドールバッグ&#34; /&gt;&lt;/p&gt;

&lt;p&gt;かなりホラーだけどこんな感じに膝を曲げればすっぽりと入る。
バトルロボットだったら肩幅がきつくて入らないだろうな。&lt;/p&gt;

&lt;p&gt;今回のロボワンはドールロボ製作者の方と集まれて楽しかった。
(ロボワン的にこれ盛り上がるのはどうなの？？って気はするけどｗｗ)
次の大会は出たい。
そしてそれがヴァニラの最後の出場になるといいと思っている。
1年とちょっとを見込んで新しいドールロボを作っていくつもりだ。
名前は「ソルト」。男みたいな名前だけどもちろん女性形にする。&lt;/p&gt;

&lt;p&gt;真広さんのST-00を見て、本当に衝撃を受けた。
同時にどうして自分にあれが作れないのかという悔しい気持ちにもなった。&lt;/p&gt;

&lt;p&gt;今は少なくともサーボモータは自分で作らなければ、自分が満足して開発できるものができないなという気持ちになっている。
作っても仕方がないという気持ちでは趣味のロボットの開発など続けられないのである。
技術的に更にチャレンジもしていきたいという考えもある。
サーボケースを自分で削りだすことはマストだ。
僕は機械設計にそれほど強くなく(センスが無いと言っても良い)、メカ的なことはなるべく避けてきた。
でもやらなきゃ仕方がないから、フルスクラッチすることを目指して作業を進めていくことに決めた。
１年かけて基礎技術の研究と設計をしていくつもり。&lt;/p&gt;

&lt;p&gt;次回のロボワンはヴァニラを使って歩行安定制御の検証をしたい。
同時に俺サーボのプロトタイプのプロトタイプ程度のものができていたらいいなと思う。&lt;/p&gt;

&lt;p&gt;もちろん仕事関係でやりたいこと、勉強しときたいこと死ぬほどあるからバランスよくやる。
redmineでも導入してタスク管理してみるといいかもしれない。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Haskellで高階関数を組み合わせて部分文字列を作る例が全然わからなかったから考えた</title>
      <link>http://syundo0730.github.io/post/1162/</link>
      <pubDate>Thu, 21 May 2015 22:27:54 +0900</pubDate>
      
      <guid>http://syundo0730.github.io/post/1162/</guid>
      <description>&lt;p&gt;最近、Haskellの勉強のために「&lt;a href=&#34;http://www.amazon.co.jp/%E9%96%A2%E6%95%B0%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E5%AE%9F%E8%B7%B5%E5%85%A5%E9%96%80-%E2%94%80%E2%94%80%E7%B0%A1%E6%BD%94%E3%81%A7%E3%80%81%E6%AD%A3%E3%81%97%E3%81%84%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E6%9B%B8%E3%81%8F%E3%81%9F%E3%82%81%E3%81%AB-WEB-PRESS-plus/dp/4774169269&#34;&gt;関数プログラミング実践入門&lt;/a&gt;」を読んでいる。&lt;/p&gt;

&lt;p&gt;高階関数のところまでいったけど僕の頭がクソ雑魚だから例題が全然理解出来なかった…。&lt;/p&gt;

&lt;p&gt;Qiitaに記事を移しました。&lt;/p&gt;

&lt;p&gt;続きはこちら
&lt;a href=&#34;http://qiita.com/nekokoneko_mode/items/724b7e9bddac58e78e83&#34;&gt;http://qiita.com/nekokoneko_mode/items/724b7e9bddac58e78e83&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>C&#43;&#43;初心者会に参加してきた</title>
      <link>http://syundo0730.github.io/post/1154/</link>
      <pubDate>Mon, 18 May 2015 01:26:10 +0900</pubDate>
      
      <guid>http://syundo0730.github.io/post/1154/</guid>
      <description>&lt;p&gt;歌舞伎座.tech#8「C++初心者会」に参加してきた。
&lt;a href=&#34;http://kbkz.connpass.com/event/13905/&#34;&gt;http://kbkz.connpass.com/event/13905/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;初めて勉強会での発表ということもした（ただしLT)&lt;/p&gt;

&lt;p&gt;発表資料はこちら
&lt;a href=&#34;http://www.slideshare.net/syundo/c-48237620&#34;&gt;http://www.slideshare.net/syundo/c-48237620&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ニコ生はこちら
&lt;a href=&#34;http://live.nicovideo.jp/gate/lv220960718&#34;&gt;http://live.nicovideo.jp/gate/lv220960718&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;メモを取って即時公開してくださっているひとがいた。
&lt;a href=&#34;http://www.shigemk2.com/archive/category/C%2B%2B&#34;&gt;http://www.shigemk2.com/archive/category/C%2B%2B&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;私はLTでC++を使って開発できるマイコンボードの例としてmbedを紹介した。
だが、問題はmbedのコンパイラにあった。
C++界隈の人たちの興味はC++11，14、さらにはC++17にあるのだ。
対してmbedオンラインコンパイラはC++98だ。
C++98のことなんてもう忘却の彼方にあるし、取るに足りないことなのだ（実際僕もそう思う）。&lt;/p&gt;

&lt;p&gt;mbedの開発環境は不自由だ。
ネット環境がないとコンパイルできないとかザコだ。
なぜそんな環境に拘っているのか？
そのご指摘はまさにその通りだと思う。&lt;/p&gt;

&lt;p&gt;arm向けの自由なコンパイラがあるんだから、mbedはオンラインコンパイラに頼るエコシステムにすべきじゃなかったのだ。
オンラインコンパイラが無ければmbedは広まらなかったか？
僕はそうは思わない。Arduinoの開発環境はローカルの開発環境だが超流行っているじゃないか。
Coretex-M3の強い計算機能力を発揮して楽しくC++開発できることがmbedの強みだ。
Arduinoなんて目じゃない。&lt;/p&gt;

&lt;p&gt;それなのにコンパイラがC++98/03準拠というのはあんまりじゃないか。
mbedのコミュニティのことを考え、自分のしたい開発のことを考え、もやもやしている&amp;hellip;&lt;/p&gt;

&lt;p&gt;C++界隈の人たちというのは濃い、強い。
自分ももっと技術力を高めて本当のプログラマになりたいと思った。&lt;/p&gt;

&lt;p&gt;これまで聞いたこと無いキーワードや，聞いたことあったがよく知らないことをたくさん知れた。
調べて勉強してもっとC++をわかりたい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>できるだけconstexprを使おう</title>
      <link>http://syundo0730.github.io/post/1143/</link>
      <pubDate>Fri, 15 May 2015 02:59:51 +0900</pubDate>
      
      <guid>http://syundo0730.github.io/post/1143/</guid>
      <description>&lt;p&gt;&lt;h1&gt;Effective Modern C++メモ (Moving to Modern C++ : Item 15)&lt;/h1&gt;
constexprがオブジェクトに付加されたときはそのオブジェクトはconstのようなものになる一方で、関数に付加されたときはそれとは少し違う性質のものになるから紛らわしい。&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;constexprオブジェクトについて&lt;/h2&gt;
constexprをオブジェクトの前に付けるとコンパイル時に用いることができる値になる。このような値は読み取り専用のメモリに配置されるだろうから、特に組み込みの分野で重宝されるだろう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #fec418&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;sz;&lt;/span&gt;   &lt;span style=&#34;color: #8d8687&#34;&gt;// コンパイル時に存在しない&lt;/span&gt;
&lt;span style=&#34;color: #2f1e2e&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color: #815ba4&#34;&gt;constexpr&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;arraySize1&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;sz;&lt;/span&gt; &lt;span style=&#34;color: #8d8687&#34;&gt;// エラー。szはコンパイル時には使えない。&lt;/span&gt;
&lt;span style=&#34;color: #2f1e2e&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;array&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #fec418&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;sz&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;data1;&lt;/span&gt; &lt;span style=&#34;color: #8d8687&#34;&gt;// 同様なエラー&lt;/span&gt;
&lt;span style=&#34;color: #815ba4&#34;&gt;constexpr&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;arraySize2&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #8d8687&#34;&gt;// 良い。10はコンパイル時定数。&lt;/span&gt;
&lt;span style=&#34;color: #2f1e2e&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;array&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #fec418&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;arraySize&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;data2;&lt;/span&gt; &lt;span style=&#34;color: #8d8687&#34;&gt;// 良い。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;constは同じ役割を果たせない。コンパイル時には値が無いからだ。constexprオブジェクトはconstだが、その逆は成り立たないのである。&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;constexpr関数について&lt;/h2&gt;
引数がコンパイル時定数ならばコンパイル時に、そうでなければ実行時に計算される関数。
&lt;h3&gt;C++11の場合&lt;/h3&gt;
関数内に1行、return文があるだけしか認められない。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #815ba4&#34;&gt;constexpr&lt;/span&gt; &lt;span style=&#34;color: #fec418&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #06b6ef&#34;&gt;pow&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #fec418&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;base,&lt;/span&gt; &lt;span style=&#34;color: #fec418&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;exp)&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;noexcept&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #815ba4&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;(exp&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;base&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;pow(base,&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;exp&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f99b15&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;));&lt;/span&gt;
&lt;span style=&#34;color: #2f1e2e&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;h3&gt;C++14の場合&lt;/h3&gt;
複数行にわたって記述できる&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #e7e9db&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #815ba4&#34;&gt;constexpr&lt;/span&gt; &lt;span style=&#34;color: #fec418&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;pow(&lt;/span&gt;&lt;span style=&#34;color: #fec418&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;base,&lt;/span&gt; &lt;span style=&#34;color: #fec418&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;exp)&lt;/span&gt; &lt;span style=&#34;color: #815ba4&#34;&gt;noexcept&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #815ba4&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #815ba4&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #fec418&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f99b15&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;exp;&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #2f1e2e&#34;&gt;i)&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;base;&lt;/span&gt;
    &lt;span style=&#34;color: #815ba4&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #2f1e2e&#34;&gt;result;&lt;/span&gt;
&lt;span style=&#34;color: #2f1e2e&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;h2&gt;気をつけるべきこと&lt;/h2&gt;
constexprであると示すことはオブジェクトや関数のインターフェースをユーザーに通知するという意味で重要である。ユーザーはコンパイル時にそれが必要となるようなコンテキストでconstexprなものを利用するだろう。&lt;/p&gt;

&lt;p&gt;もしconstexprにしたことが間違いだったと思って修正してしまうとユーザーのコンパイルが通らなくなるような大変な影響がでるだろう。例えばデバッグのためにI/O操作をするようなことはconstexpr関数の中では許されていないが、そういった修正をしてしまうということだ。できるだけconstexprを使おう、の「できるだけ」はそういった長期にわたる機能のメンテナンスをする気があるならそうしようという意味でもあるのだ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ブログも静的ページにしたらどうか</title>
      <link>http://syundo0730.github.io/post/1140/</link>
      <pubDate>Thu, 14 May 2015 01:27:58 +0900</pubDate>
      
      <guid>http://syundo0730.github.io/post/1140/</guid>
      <description>&lt;p&gt;以前から気になっていたのだが、ブログのようだけども決してWordpressで構成されているわけでもなく、読み込みが速くて、しかもモダンなデザインのウェブサイトをよく見かける。
ああいったものをどういうフレームワークで作っているのか全然良くわかっていなかったのだが、TLを眺めていたらふいに知ることとなった。
あれらはMarkdownなどからビルドして静的ページを生成したものを公開しているそうなのだ。
DBやらphpやら準備しなくて良いので環境の構築は楽だろう。
静的ページだけなので非力なサーバでも運用できるだろう。
俄然興味が湧いてきた。&lt;/p&gt;

&lt;p&gt;こういったツールは色々あって
&lt;a href=&#34;https://staticsitegenerators.net/&#34;&gt;https://staticsitegenerators.net/&lt;/a&gt;
ここを見るとどれが人気があるのかわかる。&lt;/p&gt;

&lt;p&gt;だが私は今のところ&lt;a href=&#34;http://golang-jp.org/&#34;&gt;golang&lt;/a&gt;で動く&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;に興味がある。
機能がシンプルであるし、他に比べてサイトの生成が爆速でできるらしい。&lt;/p&gt;

&lt;p&gt;ソースはGitHubで管理するのが良かろう。
werckerやらTravis CIなどのCI Webツールを使ってCIできると更にかっこいいだろう。
werckerはBitbucketも使えるしGitHubのprivateリポジトリも使えるらしい。
Travis CIはGitHubのみでprivateリポジトリは有料らしい。&lt;/p&gt;

&lt;p&gt;ちなみにちょっと文脈が違うがWebサイトに数式を含めるならば&lt;a href=&#34;http://www.mathjax.org/&#34;&gt;MathJax&lt;/a&gt;が良いという電波をキャッチした。&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;参考にしたところ&lt;/h2&gt;
&lt;a href=&#34;http://task-blog.net/2015/01/25/remove-blog-rails-to-hexo/&#34;&gt;http://task-blog.net/2015/01/25/remove-blog-rails-to-hexo/&lt;/a&gt;
&lt;a href=&#34;http://re-dzine.net/2015/01/hugo/&#34;&gt;http://re-dzine.net/2015/01/hugo/&lt;/a&gt;
&lt;a href=&#34;http://rcmdnk.github.io/blog/2015/02/25/blog-octopress/&#34;&gt;http://rcmdnk.github.io/blog/2015/02/25/blog-octopress/&lt;/a&gt;
&lt;a href=&#34;http://oku.edu.mie-u.ac.jp/~okumura/javascript/mathjax.html&#34;&gt;http://oku.edu.mie-u.ac.jp/~okumura/javascript/mathjax.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Haskellを入れる</title>
      <link>http://syundo0730.github.io/post/1128/</link>
      <pubDate>Tue, 12 May 2015 02:04:29 +0900</pubDate>
      
      <guid>http://syundo0730.github.io/post/1128/</guid>
      <description>&lt;p&gt;Haskellをやってみようと思った。
環境：Ubuntu12.04 64bit&lt;/p&gt;

&lt;p&gt;記事をQiitaに移動した。
続きはこちら
&lt;a href=&#34;http://qiita.com/nekokoneko_mode/items/ee88053c164d3b2bd20b&#34;&gt;http://qiita.com/nekokoneko_mode/items/ee88053c164d3b2bd20b&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ドコモを解約してIIJのみおふぉんにMNP転入した</title>
      <link>http://syundo0730.github.io/post/1131/</link>
      <pubDate>Thu, 07 May 2015 00:30:10 +0900</pubDate>
      
      <guid>http://syundo0730.github.io/post/1131/</guid>
      <description>&lt;p&gt;携帯電話の料金が高すぎて、いい加減嫌気が差していたのでドコモを解約した。
ちょうど更新月であったから違約金が付かないはず。2年縛りとか自動更新とか怒りが爆発しそう。&lt;/p&gt;

&lt;p&gt;移行先はIIJの&lt;a href=&#34;https://www.iijmio.jp/hdd/miofone/&#34;&gt;みおふぉん&lt;/a&gt;にした。
月3G音声通話つきで1600円のものを選んだ。
容量はドコモにいたときと同じで値段は1/3ぐらいだ。&lt;/p&gt;

&lt;p&gt;MNP転入するときに気になるのが、simカードが届くのに時間がかかるため通話できない期間が存在すること。
今回は5月4日 am9:54にドコモsimが停止
翌5月5日 am10:07にヤマト運輸でIIJのsimが到着した。
都内に住んでいたから早かったのかもしれないが、これなら週末のうちにでも手続きができそうだった。&lt;/p&gt;

&lt;p&gt;通信速度は別に問題ないように思う。WEBページを見ても動画を見ても体感で何も変わらない。ドコモ契約してた時に計測しておいて比較すればよかったけど忘れてた…。&lt;/p&gt;

&lt;p&gt;音声通話は&lt;a href=&#34;https://www.iijmio.jp/hdd/miofone/dial.jsp&#34;&gt;みおふぉんダイアル&lt;/a&gt;を使えば安くなる。まだ試してないが、音声の品質についてはそんなに心配していない。&lt;/p&gt;

&lt;p&gt;こうしてドコモは通信を流すだけの土管になるのだ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ロボットを吊るアームを作った</title>
      <link>http://syundo0730.github.io/post/1111/</link>
      <pubDate>Sun, 19 Apr 2015 22:46:39 +0900</pubDate>
      
      <guid>http://syundo0730.github.io/post/1111/</guid>
      <description>&lt;p&gt;作業をしやすくするために、棚に固定できるロボット用のアームを作りました。こんなんです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://syundo0730.github.io/images/2015/04/DSC_1486.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-1114&#34; src=&#34;http://syundo0730.github.io/images/2015/04/DSC_1486.jpg&#34; alt=&#34;DSC_1486&#34;   /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4mmの合板をCNCで切削しました。穴がいっぱいあいてるのは、CNCが脱調したか何かで穴の位置がずれてしまったため、ボール盤で開け直したからです。
&lt;a href=&#34;http://syundo0730.github.io/images/2015/04/DSC_1488-e1429451130188.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-1118&#34; src=&#34;http://syundo0730.github.io/images/2015/04/DSC_1488-e1429451130188.jpg&#34; alt=&#34;DSC_1488&#34;   /&gt;&lt;/a&gt;
ワイヤーで吊ります。&lt;/p&gt;

&lt;p&gt;ちなみに現在の作業環境はこんな感じです。&lt;/p&gt;

&lt;p&gt;CNC
&lt;a href=&#34;http://syundo0730.github.io/images/2015/04/DSC_1490.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-1116&#34; src=&#34;http://syundo0730.github.io/images/2015/04/DSC_1490.jpg&#34; alt=&#34;DSC_1490&#34;   /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ボール盤と折り曲げ機
&lt;a href=&#34;http://syundo0730.github.io/images/2015/04/DSC_1489.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-1115&#34; src=&#34;http://syundo0730.github.io/images/2015/04/DSC_1489.jpg&#34; alt=&#34;DSC_1489&#34;   /&gt;&lt;/a&gt;
CNCに関しては防音箱の性能向上を図る必要があると考えています。&lt;/p&gt;

&lt;p&gt;10mm厚の合板で箱が作ってあるので、低音域の騒音のカットはかなりできていると思うんですが、中高音が筒抜けな感じです。
吸音材をヤフオクで買って貼りつけようと思います。&lt;/p&gt;

&lt;p&gt;ではでは。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>