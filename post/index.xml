<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ROBO LOG</title>
    <link>http://blog.syundo.org/post/</link>
    <description>Recent content in Posts on ROBO LOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Written by Shundo Kishi</copyright>
    <lastBuildDate>Wed, 06 Dec 2017 03:41:20 +0900</lastBuildDate>
    
	<atom:link href="http://blog.syundo.org/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>強化学習についてまとめる(6) モデルベース強化学習</title>
      <link>http://blog.syundo.org/post/20171206-reinforcement-learning-model-based-rl/</link>
      <pubDate>Wed, 06 Dec 2017 03:41:20 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/20171206-reinforcement-learning-model-based-rl/</guid>
      <description>前回までは、MDPにおける状態遷移について、何の仮定も置かない方法を扱ってきた。 例えば、TD誤差を用いる方法では、状態遷移確率はサンプリングによって近似していたし、 方策勾配法では状態遷移確率は扱わなくても良いものであった。 今回は、状態遷移確率をモデルとして陽に扱う手法を扱う。 これをモデルベース強化学習と呼ぶ。
さて、強化学習全般の大まかな流れは以下のようになっていると言える。
 適当な方策を実行し、サンプルを集める モデルを更新する(Q-Learning, Actor-Criticでは$Q$の更新, モデルベースでは$P(s&amp;rsquo;|s,a)$の推定) 方策を更新する(方策の更新、最大のQ値を取る$a$の選択)  モデルベース強化学習では、上記2.については教師あり学習で行う。 そして、3.の部分で状態遷移確率を使って方策を更新する。
そのため、モデルベース強化学習の利点として
 サンプル数が少なくても学習できる 学習したモデルを他のタスクに転移して利用することができる。つまり汎用的な学習ができる。  ということが挙げられる。
基本的なアルゴリズム 現在の状態$s_t$と行動$a_t$を取って、次の状態$s_{t+1}$を生成する関数を$f_{\phi}(s_t, a_t)$とする。 以下にモデルベース学習で用いられるアルゴリズムの概要を示す。 以下では、学習したいタスクの一連の系列を一イテレーションとして、そのindexを$k$としている。
 サンプル$\mathcal{D}=\left\{ (s, a, s&amp;rsquo; )_i \right\}$を集めるために、何らかの方策$\pi_0(a_t|s_t)$(例えばランダム)を実行する $for$ $k=1,2,\dots$ $do$ $f_{\phi}(s_t, a_t)$ を学習する ($\sum_i \| f_{\phi}(s_t, a_t) -s&amp;rsquo;_i\|^2$ を最小化) $f_{\phi}(s_t, a_t)$ を使って$\pi_{\theta}(a_t | s_t)$を最適化する $\pi_{\theta}(a_t | s_t)$実行して、タプル$(s, a, s&amp;rsquo;)$を$\mathcal{D}$に記録する $end$ $for$  ただし、以上のように、全イテレーションにおいて、共通の$f_{\phi}(s_t, a_t)$を学習する方法では
 すべての状態において収束する性質の良いモデルを学習しなければならない モデルが未学習のため、状態を楽観的に評価してしまうなどして、誤った方向に方策を学習してしまう  などの問題がある。 そこで、時変の関数として$f_{\phi}(s_t, a_t)$を学習するようにする。 そのようなモデルをlocal modelと呼ぶ。</description>
    </item>
    
    <item>
      <title>強化学習についてまとめる(5) 自然方策勾配法とTRPO, PPO</title>
      <link>http://blog.syundo.org/post/20171204-reinforcement-learning-natural-policy-gradient-trpo-ppo/</link>
      <pubDate>Mon, 04 Dec 2017 22:39:35 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/20171204-reinforcement-learning-natural-policy-gradient-trpo-ppo/</guid>
      <description>前回 は方策勾配法のアルゴリズムについてまとめた。 今回も前回同様、アルゴリズムについてまとめるが、 最適解に収束しない方策勾配を用いる方法において、いかに勾配を改良するかという部分に軸を置く。 方策勾配を用いる方法では、方策の更新方向の決定が非常に重要になる。 悪い方策を採用したことで低い報酬しか取れないようにずれてくると、回復が難しくなってしまうからだ。 方策の勾配の決定をKLダイバージェンスに基いて決定する方法やその近似を用いたについてまとめる。
自然勾配 方策の確率分布のパラメタ$\theta$のうち、あるパラメタ$\theta_1, \theta_2$の距離を$\|\theta_1 - \theta_2\|^2$とする、ユークリッド距離において定めたのが、以下の方策の更新方向であった。
\begin{equation} \hat{g} = E_{\pi}[\nabla_{\theta} \log \pi_{\theta} (a | s) A^{\pi}(s, a)] \label{eq:policy_gradient} \end{equation}
ここで、確率分布間の疑距離をKLダイバージェンスで定めると、自然勾配という勾配方法が導出される。 自然勾配は、通常の勾配にフィッシャー行列の逆行列を掛けたものになる
\begin{equation} \tilde{\nabla_{\theta}} J (\theta) = F^{-1} (\theta) \nabla_{\theta} J(\theta) \end{equation}
ここで、$F(\theta)$はフィッシャー行列である。 一般的に、勾配法において、自然勾配を用いると良い性能が得られることが知られている。
Natural Actor-Critic 式\eqref{eq:policy_gradient}のアドバンテージ関数を線形モデル
\begin{equation} A^{\pi}(s, a) = w^{\mathrm{T}} \nabla_{\theta} \log \pi_{\theta} (a | s) \end{equation} で近似することにすると、
\begin{equation} \nabla_{\theta} J (\theta) = E_{\pi}[\nabla_{\theta} \log \pi_{\theta} (a | s) \nabla_{\theta} \log \pi_{\theta} (a | s) ^ {\mathrm{T}} ] w \\</description>
    </item>
    
    <item>
      <title>非線形振動子の同期を用いた歩行</title>
      <link>http://blog.syundo.org/post/20171203-cpg-and-walk/</link>
      <pubDate>Sun, 03 Dec 2017 23:41:06 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/20171203-cpg-and-walk/</guid>
      <description>複数の周期的現象が相互作用して同期する現象は実世界のいたるところにみられる。 例えばホタルの発光が同期することはよく知られているし、
 バラバラなタイミングで動いていたメトロノームの動きが揃ったり
 ロンドンのmillennium bridgeが橋の上で歩いている人々と同期して振動してしまった事件なども同様の現象である。
 歩行の周期的運動に着目すると、その生成回路として、CPG(Central Pattern Generator)が知られている。 CPGのモデルを歩行ロボットに組み込む試みも数多くなされている。
本記事ではCPGとその同期について調査し、同期システムを用いた歩行制御についてシミュレーションと実機にて確認した結果について述べる。
背景 ここでは、まずCPGとニューロンの発火モデル、非線形振動子の同期現象についてまとめる。 また、森本らの振動子の同期現象を2足歩行ロボットの制御に利用した手法について説明する。
CPG 歩行などのリズミックな運動出力パターンを生成する回路のことをCPGと呼ぶ。 この回路は脊椎動物であれば脊髄に備わっていることが知られている。 大脳との神経的な接続を除去したネコをトレッドミルに乗せ、脊髄部分に電気的刺激を行うと、歩行動作を発現したという、除脳ネコの実験が有名であるが、 この結果より、脳幹部分からの電気的な刺激によって、脊髄部の回路が周期的に活性化し、脚部の筋肉を活性化することで歩行運動が生成されているということを推察することができる。
CPGをモデル化して歩行制御に用いた例としては、多賀1 による2足歩行運動の生成がある。
ニューロンの発火モデル ニューロンは神経系を構成する細胞の一つである。 活動していないときのニューロンの細胞内電位(膜電位)は細胞外に対して低くなっており、逆に活性化すると細胞外に対して高くなる。 この電位差は細胞内外のイオン濃度の差によって生じる。2 HodgkinとHuxleyはヤリイカの巨大軸索の電気的応答を調査することで、そのニューロンの非線形ダイナミクスを記述する微分方程式(Hodgkin-Huxley方程式)を導出した。 詳細は述べないが、4変数でパラメタライズされ微分方程式となっている。3 このHodgkin-Huxley方程式における膜電流(I)として適当な大きさの電流を加えると自励振動が生じる。 宇佐美ら4は自励振動に限らず周期的刺激に対するHodgkin-Huxleyのダイナミクスを示している。 Hodgkin-Huxleyより、神経のダイナミクスを更に簡略化したモデルとして、FitzHugh-南雲(FHN)モデルも知られている。
\begin{equation} \begin{aligned} \frac{du}{dt} = u - u^3 -v + I_{ext} \\
\frac{dv}{dt} = u - a - bv \end{aligned} \end{equation}
ここで、$u$がニューロンの膜電位、$v$がニューロン内部の不活性化を表す変数、$a, b$はパラメタである。 このモデルでも同様に周期的振動が生成される。ちなみにパラメタによって興奮性、振動性を示すことが知られている。 フィッツヒュー・南雲 (FitzHugh-Nagumo) 方程式 にてその動作をシミュレーションできる。
en:Balthasar van der Polが電気回路の振動について記述したファン・デル・ポール振動子は、FHNモデルについてa=0, b=0とした場合として理解できる。
以上述べたことは、何らかの生物のCPGの神経回路について直接解析したものではない。 また、実際のCPGは相互作用する複数のニューロンによって構成されており、ニューロン一つの振る舞いだけで説明できるものではない。 しかし、こうした振る舞いの組み合わせとして、CPGのような機能が実現されていると想像することはできる。
非線形振動子 これまでにニューロンのモデルで示したような周期振動する非線形システムは非線形振動子と捉えることができる。 非線形振動子の特徴としては、その振動がリミットサイクルとして発現することにある。 リミットサイクルとは、相図において特定の軌跡を描く動的安定状態である。 サイクルから外れるような外乱が加わっても元の軌跡に復帰することで安定状態が保たれている。</description>
    </item>
    
    <item>
      <title>強化学習についてまとめる(4) 方策勾配に基づくアルゴリズム、Actor-Critic</title>
      <link>http://blog.syundo.org/post/20171202-reinforcement-learning-policy-gradient-algorithms/</link>
      <pubDate>Sat, 02 Dec 2017 16:41:14 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/20171202-reinforcement-learning-policy-gradient-algorithms/</guid>
      <description>前回 は方策の勾配の求め方、勾配の分散を減少させるための、baselineを導入するところまでまとめた。 今回は、方策勾配を用いて方策を更新する実際のアルゴリズムについて扱う。
vanilla policy gradient baselineの調整と方策の更新を逐次的に更新していくという、方策勾配法の基本的な方法に則った基本的なアルゴリズムを、vanilla policy gradient method と呼ぶことにする。 vanilla policy gradient methodの擬似コードは以下のようになる。
 パラメタ $\theta$, ベースライン$b$の初期化 $for$ $i=1,2,\dots$ $do$ 現在の方策に従って行動し、復数パスを収集し、$R_t = \sum_{t&amp;rsquo;=t}^{H-1} \gamma^{t&amp;rsquo;-t} R_{t&amp;rsquo;}$を計算する。 $|R_t - b|^2$ を最小にするようにbaselineを調整する $\hat{g} = \sum_{t=0}^H \nabla_{\theta} \log \pi_{\theta} (u_t^{(i)} | s_t^{(i)}) (R(\tau^{(i)}) - b)$で勾配を更新する $end$ $for$  baselineの調整と、勾配の更新を繰り返していき、方策を最適化する。
REINFORCE アルゴリズム 上記の復数パスの情報を使って計算した$R_t$の代わりに、そのときどきの報酬$r_t$を使う方法は REINFORCE アルゴリズムとして知られている。 baselineとしては報酬の平均値$\bar{b} = \frac{1}{MT} \sum_{m=1}^M \sum_{t=1}^T R_t^m$がよく用いられるらしい。
Actor-Critic baselineを導入したとこで、方策の更新は、方策の分散を小さくする評価部と、方策を更新する部分の2つに分けられることがわかる。 ここで、baselineとして、価値関数$V^{\pi}$を使うと ここで、$R(\tau) = \sum_{t=0}^H R(s_t, u_t)$の代わりに行動価値関数$Q^{\pi}(s, a)$を、baselineとして価値関数$V^{\pi}(s)$を使うことにする。 baselineとして状態$s$の関数を用いても、勾配の平均値には影響がないため、baselineとして採用できる。
以下の行動価値感数と状態価値関数の差分$A^{\pi}(s, a)$をアドバンテージ関数と呼ぶ。 \begin{equation} A^{\pi}(s, a) = Q^{\pi}(s, a) - V^{\pi}(s) \end{equation}</description>
    </item>
    
    <item>
      <title>強化学習についてまとめる(3) 方策勾配</title>
      <link>http://blog.syundo.org/post/20171117-reinforcement-learning-policy-gradient/</link>
      <pubDate>Fri, 17 Nov 2017 03:15:08 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/20171117-reinforcement-learning-policy-gradient/</guid>
      <description>前回、 前々回 では、価値関数を求め、それを基に行動を決定する手法について扱ってきた。 しかし、そもそもロボットの行動を決めるのは方策であるのだから、その方策を直接学習できないのだろうか？という疑問が湧く。
今回は、前回までとは全く違うアプローチとして、方策勾配法 をまとめる。 方策勾配法は、方策をあるパラメタで表される関数とし、そのパラメタを学習することで、直接方策を学習していくアプローチである。
方策を直接扱うことで
 $V^{\pi}$や$Q^{\pi}$を求めるような複雑でメモリを消費する手法を使わなくて良い 連続空間での行動が扱いやすくなる  などの利点がある。 一方で、
 方策オン型の学習になるため、行動のタイミングで方策を更新しなくてはならず、学習効率が落ちる 価値反復による方法と違って、最適な状態への収束を保証するものがない。つまり、局所最適に陥る可能性がある。 行動に対して学習が敏感に影響を受けてしまうため、学習ステップの決定が難しい  などの欠点がある。
方策のモデルと勾配 $\theta$でパラメタライズされた確率的な方策$\pi_{\theta}$を求める問題を考える。 $\tau$をステップ$0$から$H$までの状態-行動の系列(状態-行動空間でのパス)$\tau=(s_0, a_0, \dots, s_H, a_H)$としたとき、方策の評価関数として以下を考える。
\begin{equation} \begin{aligned} U(\theta) &amp;amp;=&amp;amp; E [\sum_{t=0}^H R(s_t, u_t) ; \pi_{\theta}] \\
&amp;amp;=&amp;amp; \sum_{\tau} P(\tau ; \theta) R(\tau) \end{aligned} \end{equation} ここで、$R(\tau) = \sum_{t=0}^H R(s_t, u_t)$としている。 また$P(\tau ; \theta)$はパスの生成モデルであり、定義より \begin{equation} P(\tau ; \theta) = \prod_{t=0}^H P(s_{t+1} | s_t, u_t) \pi_{\theta}(u_t | s_t) \label{eq:p_tau_theta} \end{equation} である。</description>
    </item>
    
    <item>
      <title>強化学習についてまとめる(2) 反復による価値の推定</title>
      <link>http://blog.syundo.org/post/20171110-reinforcement-value-policy-iteration/</link>
      <pubDate>Fri, 10 Nov 2017 19:54:59 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/20171110-reinforcement-value-policy-iteration/</guid>
      <description>前回はMDPとベルマン方程式について扱った。 ベルマン方程式を解くことができれば、$Q^{\pi}$を計算できるのだが、どう計算するのか、価値関数からどのように方策を決定するのかという問題がある。 今回は、多数のデータを使って反復的に計算することでこれを求める方法について扱いたい。 価値推定と反復 価値関数についてのベルマン方程式において、常に最適な方策を取るという前提を置けば、以下の最適ベルマン方程式を定めることができる。 \begin{equation} \begin{aligned} V^{\pi}(s) = \max_{a \in A} \sum_{s&amp;rsquo; \in S} P(s&amp;rsquo;|s, a) \left(r(s, a, s&amp;rsquo;) + \gamma V^{\pi}(s&amp;rsquo;) \right) \end{aligned} \label{eq:belman_value_func_max} \end{equation}
\begin{equation} \begin{aligned} Q^{\pi}(s, a) = \sum_{s&amp;rsquo;} P(s&amp;rsquo;|s, a) \left(r(s, a, s&amp;rsquo;) + \gamma \max_{a&amp;rsquo; \in A} Q^{*}(s&amp;rsquo;,a&amp;rsquo;) \right) \end{aligned} \label{eq:belman_q_func_max} \end{equation}
あるいは、取り得る方策が確率的でない、常に方策が決まっている定常方策を取るとすると、以下のようになる。 \begin{equation} \begin{aligned} V^{\pi}(s) = \sum_{s&amp;rsquo; \in S} P(s&amp;rsquo;|s, a) \left(r(s, a, s&amp;rsquo;) + \gamma V^{\pi}(s&amp;rsquo;) \right) \end{aligned} \label{eq:belman_value_func_const} \end{equation}
\begin{equation} \begin{aligned} Q^{\pi}(s, a) = \sum_{s&amp;rsquo;} P(s&amp;rsquo;|s, a) \left(r(s, a, s&amp;rsquo;) + \gamma Q^{\pi}(s&amp;rsquo;,a&amp;rsquo;) \right) \end{aligned} \label{eq:belman_q_func_const} \end{equation}</description>
    </item>
    
    <item>
      <title>強化学習についてまとめる(1) MDPとベルマン方程式</title>
      <link>http://blog.syundo.org/post/20160410-reinforcement-learning-mdp-belman-equation/</link>
      <pubDate>Sun, 10 Apr 2016 15:19:17 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/20160410-reinforcement-learning-mdp-belman-equation/</guid>
      <description>強化学習について古典的なものからDeepNNを使ったものまでまとめていきたい。
マルコフ決定過程 マルコフ決定過程(Markov Decision Process; MDP)は状態の遷移が確率的に起こり、マルコフ過程を満たす過程のことをいう。 MDPは状態$s$、行動$a$、遷移先の状態を$s&amp;rsquo;$、状態遷移確率$P(s&amp;rsquo;|s, a)$の組で表現される。 また、状態$s$において行動$a$を選択したとき、即時報酬$r(s, a, s&amp;rsquo;)$が得られるとする。
とくに時間的な過程の進展を表すため、特に時刻$t$から$t+1$の状態の遷移について
$$ 状態: s_t\\
行動: a_t\\
状態遷移確率: P(s_{t+1}|s_t, a_t)\\
報酬関数: r_t = r(s_t, a_t, s_{t+1}) $$
を考える。
価値関数 時刻$t$において将来($t \rightarrow \infty $)にわたって得られる報酬について、割引累積報酬$G_t$を定義する。 \begin{equation} G_t = \sum_{k=0}^{\infty} \gamma ^k R_{t+k+1} \end{equation} ここで、$R_{t+1}$は$r(s_t, a_t, s_{t+1})$の値とする。 また、$\gamma$は$0 \le \gamma &amp;lt; 1$の値で、遠い将来に得られるであろう報酬を低く見積もるために使う。
状態$s$において、行動$a$が選択される確率を$\pi = \pi(a | s)$とする。 この$\pi$を方策と呼ぶ。 ロボットで言うと次の状態をどう選ぶかの判断を行う部分である。
さて、ある方策$\pi$を採用したときの報酬がどの程度のものか見積もりたい。 方策$\pi$のもとで、以下のように関数$V^{\pi}$を定義する。 \begin{equation} V^{\pi}(s) = E[G_t|s_t=s] = E[R_{t+1}\ + \gamma R_{t+2} + \dots | s_t = s] \label{eq:v_func} \end{equation} これを状態価値関数(あるいは単に価値関数)と呼ぶ。 期待値を取っているのは、方策$\pi$は確率的であるから、$s_t=s$となるのも確率的であるため、$s_t$について周辺化して評価したいためである。</description>
    </item>
    
    <item>
      <title>超人工生命ハッカソンに行ってきた</title>
      <link>http://blog.syundo.org/post/20160409super-a-life/</link>
      <pubDate>Sat, 09 Apr 2016 10:17:51 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/20160409super-a-life/</guid>
      <description>4月9日(土)、超人工生命ハッカソンに行ってきた。
どんなのができるの? こんなの。  緑の箱に触ると報酬GET 黄色のボールに触ると報酬DOWN 赤の箱に触ると死ぬ  という状況の中で、左右どの方向に進むのか、ジャンプするのかを決めて勝手に動き回る。
使っているのは、一人称視点のカメラの情報(とDepthセンサの深度情報)だけ！！！
これはすごい！！！！！！
セットアップ ここらへんを見よう！
 https://github.com/wbap/lis http://qiita.com/nakamuu_m/items/2a2ba63cbd546ca2ea80  mac環境でしかやってないけど、とくにハマることもなくできた。 シミュレーションが起動するまで数分待たないといけないので、根気よく待つ。
簡単にできるカスタマイズ アクションを増やす この部分 を
actions = [0,1,2,3] にしてみる。ジャンプもするようになるぞ！同じ要領で この部分 を変更すると、動作を追加できる。
負の報酬も与えるようにする Hierarchey &amp;gt; SceneController &amp;gt; items にMinusRewardItem を追加する。 ResetItemは触ると死ぬようになるぞ！
使われている技術 今回のハッカソンでは中村政義氏が開発した、「Lis」(リズ)というプログラムを使うことになっていた。Lisはpython側のサーバとUnity側のエージェントで構成されており、この２つはWebsocket通信によってやりとりして、うまく役割分担をしている。
 python側  Unity側から画像データを受け取る ImageNet + DQNを組み合わせたネットワークを使ってエージェントの行動を決定し、Unity側に送る。  Unity側  python側から行動の命令を受け取って、実際のエージェントの動作に反映する。 エージェントの望ましい行動に対して与える報酬を決定する。 エージェントに固定されたカメラから得られる画像と、報酬をpython側に送る   というような役割になっている。
当日僕がやったこと コードを読む ハッカソンが始まると、まずpython側のコードを読んだ。DQNには以前から興味があったが、なかなか触る機会がなかったので、今回のハッカソンを機に親しみたいと思っていたからだ。以下はコードを読んだときのメモ。
 ImageNetのプーリング層に入れる前の層(256 * 6 * 6 次元)をQ-Networkの入力にしている  なぜここなのかというと、物体がある位置のニューロンが活性化するようになっている層だかららしい。チュートリアルで、写真と、活性化している位置の画像を並べたのを見せてもらいながらそういった説明を受けた。いきなり生の画像を入力するのではなく、すでにチューニングされたネットワークを使うことで学習時間を短縮しようということなのか。なるほど。  ImageNetのほうは強化学習によって学習せず、DQNのほうのネットワーク(Q-Net)だけオンラインで学習していくようになっている。 Q-Netは中間層が1層(255次元) のネットワーク  中間層1層なので全然Deepじゃない。複雑な行動を学習させていないから、これで表現力としては十分なのだろう。 4step分の状態を使って学習できるようになっているが、デフォルトでは1stepだけの入力を使っている。 action はデフォルトで3つ(左右旋回、前進)   ここまで理解したときには45分くらいが経っていた。 次にUnity側を読みに行った。</description>
    </item>
    
    <item>
      <title>セグメント液晶のことを全然知らなかった話</title>
      <link>http://blog.syundo.org/post/2016-02-28-lcddisplay/</link>
      <pubDate>Sun, 28 Feb 2016 23:32:31 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/2016-02-28-lcddisplay/</guid>
      <description>この冬、私は急に太ってしまった。 寒さから食欲が増したことと、食事の時間が不規則な食生活に原因があると思われる。 腰回りの肉のせいで体を反らしにくくなったり、すぐ疲れるようになったりして、自覚するようになってきた。 今思えば、体重計が家に無いせいで、自分の体重についてそれほど気にしていなかったのも良くなかった。
とりあえず体重計を買おうと思った。できればネットに記録を上げられるような良い奴が欲しい。 witnessというやつが今のところ一番良さそうだった。
しかし、思ったより高かった。普通の体重計を改造してWifiモジュールを取り付けてやれば安価に作れるのではないか?と思った。
早速、秋葉のヨドバシでタニタの3000円くらいの体重計(体脂肪計測機能つき)を買ってきた。 店頭にあった体重計を裏返して物色し、ネジで簡単に開けられそうなやつを選んだのだった。 果たして普通のドライバーでネジを回してやって、マイナスドライバーをちょっと差し込んでやるだけで、簡単に裏蓋を開けることができた。
体重などの数値を取得するために、LCDに入力している部分を横から他のマイコンで読み取れないものかと算段していた。 体重計に付いている液晶は、7セグメント液晶と同じ原理なんだろうと、考えていた。 しかし蓋を開けてみてみれば、LCDのセグメント数と端子数は明らかに違った。 マトリクス状に回路が組んであって、2つの端子の組み合わせで、表示するセグメントを決めるのだろうと推察した。 ちょっと面倒だが、解析できなくもないだろうと思った。
オシロスコープをマイコンからLCDにつながっている部分に当ててみると、なんと、500Hzほどのパルスが出ているではないか。 しかもPeek to Peek が 1v程度であった。 LCDをドライブするのにこんなことが行われいるなんて全く知らなかった私は非常に混乱した。
結局、ネットを調べているうちに、こちらのブログ記事を発見した。 LCD(TN 1&amp;frasl;3 bias, 1&amp;frasl;4 duty) を汎用I/Oポートで出力制御
バイアスとデューティーを巧みに設定して、各セグメントにおける平均電圧が0になるように入力が与えられるのか&amp;hellip;。
こういった出力を用意することは、マイコンのLCDドライブ機能を使えば簡単にできるが、これを読み取るのは容易なことではない。 体重計のLCDの端子は18本だったので、18本のA/D変換を用意しなければならない。 さらに、時系列も考慮して、デューティー分の表示をタイミングよく記憶しておかなければならない。
体重計のIoT化は、あきらめた。</description>
    </item>
    
    <item>
      <title>mbedのMPU6050のライブラリを更新した</title>
      <link>http://blog.syundo.org/post/2016-01-31-port-6050-library/</link>
      <pubDate>Sun, 31 Jan 2016 15:32:18 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/2016-01-31-port-6050-library/</guid>
      <description> こちらのArduino用に書かれたコードからmbed用に移植したものを公開していたのだが、いかんせん何年も放ったらかしにしていたため、重い腰を上げて最新のコードに追従させた。特に何か大きく新しい機能が入ったとかは無いようで、リファクタリング程度の更新だった(とはいえ未だコードの品質は良いとは言えない&amp;hellip;)。 mbed用のライブラリはこちら。使用方法はこちら
mbedのライブラリに加えた変更点は
 Arduino側のライブラリで変更があった箇所(接続テスト用の関数のようだが、なぜ追加したのかよくわからない)の修正 I2Cに流すデータのフォーマットなどを決めている便利クラスI2Cdevのメンバ関数をArduinoに倣って全部staticにした。pinName をマクロで指定しなきゃいけないとか、複数のMPU6050を複数のi2cポートで使うのが難しくなるとかあるので、本当はやりたくなかったけど、Arduinoにコードを近づければ、ほぼコピペするだけで移植を終わらせることができるから、そうした。 ArduinoのSerial.printをエミュレートするクラスを作った。これでArduinoのprintデバッグ部分をちょっと書き換えるだけで移植できるようになった。  Arduinoからmbedに移植するときに書き換えないといけないのは、
 MPU6050.h : 48-52行のコメントアウトされているのを外す。なんでこれコメントアウトされているんだ？コンパイル通らない。 MPU6050.cpp : 何もなし MPU6050_6Axis_MotionApps20.h : 103-108行 のデバッグ出力の部分をArduinoSerialに書き換える helper_3dmath.h : sqrtを使っているところをsqrt((float)(x*x + y*y + z*z));に書き換える  今後変更があっても簡単に追従できるようにできたのは良かった。 MPU9150も動かしたいというようなリクエストも今まで何回か来ていたので、MPU9150の方もちゃっちゃとやってしまおうかなと思っている。
おわり。
追記 MPU9150のライブラリも移植した。MPU6050のために周辺を整備していたおかげで一瞬で移植できた。
 ライブラリ: https://developer.mbed.org/users/syundo0730/code/MPU9150/ 使用例: https://developer.mbed.org/users/syundo0730/code/MPU9150_Example/  </description>
    </item>
    
    <item>
      <title>良い物をメモしておく</title>
      <link>http://blog.syundo.org/post/2016-01-22-goods-memo/</link>
      <pubDate>Fri, 22 Jan 2016 23:57:58 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/2016-01-22-goods-memo/</guid>
      <description>リンクしておきたいメモ
加工機 低価格なレーザー加工機
光造形式3Dプリンタ G Printer
電子部品 BLE無線モジュール
超小型USBシリアル変換モジュール</description>
    </item>
    
    <item>
      <title>HugoでGitHub markdown形式でコードブロックを記述する</title>
      <link>http://blog.syundo.org/post/2016-01-01-hugoformula/</link>
      <pubDate>Fri, 01 Jan 2016 23:41:35 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/2016-01-01-hugoformula/</guid>
      <description>ふとブログにコードを載せようとしてmarkdown形式で書いてみたら反映されなかった。 Hugoに設定が要るらしい。
Hugoをbrewからインストールして使っていたが、versionが古く0.14がインストールされていた。 最新のHugoをビルドして使う必要がある。
まずgo を入れていなかったのでインストールする。
$ brew install go mercurial も入れていなかったのでインストール。
$ brew install mercurial 最新のHugoをビルドして使う。
$ export GOPATH=$HOME/go $ go get -v github.com/spf13/hugo $HOME/go/bin にHugoのバイナリが生成されるので、ここをPATHに追加しておく
$ export PATH=$PATH:$HOME/go/bin Hugoがちゃんと入ったか動作確認する。
$ hugo version Hugo Static Site Generator v0.16-DEV BuildDate: 2016-01-01T23:34:08+09:00 次にコードのハイライトを解析するPygmentsのインストールをする。
$ pip install Pygments config.tomlにPygmentsを使うことを設定する。 Pygmentsのスタイルのプレビューは公式サイトで見ることができる。Pygments
pygmentscodefences = true pygmentsstyle = &amp;#34;paraiso-light&amp;#34; ただし、Qiitaのmarkdown記法でbash:filenameとか書いてもファイル名は表示されない</description>
    </item>
    
    <item>
      <title>意識はいつ生まれるのか</title>
      <link>http://blog.syundo.org/post/20151220nulladipiugrande/</link>
      <pubDate>Sun, 20 Dec 2015 04:15:34 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/20151220nulladipiugrande/</guid>
      <description>意識はいつ生まれるのか――脳の謎に挑む統合情報理論 ジュリオ・トノーニ (著), マルチェッロ・マッスィミーニ (著), 花本 知子 (翻訳) を読んだ。
この本で述べられていることはそのタイトル通りで、 脳を観測することで意識があるのか無いのかがわかるということ、 つまり意識がいつ生まれていつ消えているのかということだ。 結論から言うと、大脳の一部である視床-皮質系の情報処理の複雑度の高/低によって 意識のON/OFFが切り替わるらしい。 この視床-皮質系が何をするところとされているのかいまひとつよくわからなかったが、 視神経に直接関係するというわけでもないらしく、そこを計測してみたらそうなったということらしい。 切り替わる原因となるのは脳内に分泌される正イオン(カリウムイオン)による電位の変化で、 ニューロン間の信号の伝達が鈍くなることだと述べられている。 例えばノンレム睡眠のときはこれが分泌されるし、 麻酔の一種は脳内でカリウムを分泌する器官の働きを高めたりするらしいので、 意識の変化と関係があることは間違いない。
筆者らは視床-皮質系の一部に電気的な刺激を加えて、 脳波計によって視床-皮質系のその他の部分が活性化するタイミングを計測した。 情報処理の複雑度をどう計算するのかは詳細が書いていなかったが、 「統合」と「情報」の合計値で評価するらしい。 「統合」とはあるニューロンに刺激が加えられたときにその他のニューロンが活性化するかということ。 「情報」とはあるニューロンに加えた刺激とその他のニューロンの活性の時系列的な差を示すものだ。 ノンレム睡眠時の脳とか脳死状態の患者の脳を計測して数値を計算すると、意識があるときの脳とはっきりとした違いが 出るというから面白い。
ただ、この本で述べられているのは意識があるならば視床-皮質系の情報処理の複雑度が上がる、 ということだけで、いかにして意識を生み出すのかということは依然謎に包まれている。 視床-皮質系がぐちゃぐちゃと活性化しているときに行われている情報処理とは一体何なのか、 これがわかってくると意識を持った人工知能が実現できるかもしれない。
おわり。</description>
    </item>
    
    <item>
      <title>マスタリングTPC/IP勉強</title>
      <link>http://blog.syundo.org/post/2015-11-23masteringtcpip/</link>
      <pubDate>Tue, 24 Nov 2015 00:18:47 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/2015-11-23masteringtcpip/</guid>
      <description>1章 ネットワーク基礎知識 1.3 プロトコルとは TCP/IP &amp;hellip;IETFによって標準化されたもの
1.5.3 OSI参照モデル  アプリケーション層  通信に関係するアプリケーション  プレゼンテーション層  データ形式に関するところ  セッション層  データ転送に関するところ  トランスポート層  宛先のアプリケーションにデータを確実に届ける役目  ネットワーク層  宛先までデータを届ける役割  データリンク層  物理層で直接接続されたノード間の通信を可能にする  物理層  ビット列を電圧の高低や光の点滅に変換したりそういうこと   1.7 通信方式の種類 1.7.1  コネクション型  データを送る前に送信ホストと受信ホストの間で回線の接続をする  コネクションレス型  通信相手を確認しない   1.8 ネットワークの構成要素 1.8.1 通信媒体とデータリンク ツイストケーブルとか
1.8.2 ネットワーク・インターフェース LANポートの部分
1.8.3 リピーター ネットワークを延長するもの。減衰した信号を増幅する
1.8.4 ブリッジ/レイヤ2スイッチ データリンク層
1.8.5 ルーター/レイヤ3スイッチ ネットワーク層
1.8.6 ゲートウェイ トランスポート層からアプリケーション層までの階層で、データを中継する装置</description>
    </item>
    
    <item>
      <title>記号創発システムシンポジウムに行ってきた</title>
      <link>http://blog.syundo.org/post/souhatu20151123/</link>
      <pubDate>Mon, 23 Nov 2015 10:17:28 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/souhatu20151123/</guid>
      <description>ドワンゴで開催された記号創発システムシンポジウム に行ってきた。 ニコ生はこちら新鋭「人工知能×ロボティクス」プロジェクトによるシンポジウム 以下はメモ。でも途中でPCのバッテリーが切れてしまったので、午前中の分しか無い。
記号創発システム論調査研究会設置にあたって 谷口忠大先生（立命館大学）
谷口先生による記号創発システムの重要性についての説明
記号接地問題 そもそも記号とは  記号の恣意性 真なる記号系が存在しているとか呈している 与えられた記号系からそれに設置しようとするからだめ  何が問題だったか  記号とは何か  セミオーシス[Peirce] 言語における記号も、サイン、解釈項、対象、これらがダイナミックに変わる   じゃあどこから始めるべきか  主体のセンサー、身体  環世界 エルンスト＊マッハ　「感覚の分析」   記号創発システム論  記号が生まれる  記号を使って社会と関わる   CREST「記号創発ロボティクスによる人間機械コラボレーション基盤創成」 長井隆行先生（電気通信大学）
プロジェクト概要
全体像  概念、信念、応用  目指す世界  人とロボットの調和的, etc  ２つのアプローチ  DN, ベイズ 従来のアプローチ  入力に対するラベルを人手でやる -&amp;gt; 認識  新たなアプローチ  教師なし学習   [研究内容紹介1（概念班1）] 尾形哲也先生（早稲田大学）
背景  DNNをロボットに応用する、ロボティクスへの応用はこれから  パターンを認識されても困る 感覚と運動によってどう変わるかという概念獲得をしてほしい  マルチモーダル学習  画像、音声、全部を生データとしてDNNに入力する 時間方向に引き伸ばして2000次元  記号と外界の結合  多義性を持った入力 ちゃんと汎化してくれる   まとめ  パターンの有限数の符号への対応付け 概念: パターンを生成した機構を推定し、予測、生成すること  [研究内容紹介1（概念班2）] 谷口忠大先生(立命館大学)</description>
    </item>
    
    <item>
      <title>第8回ROS勉強会に参加してきた</title>
      <link>http://blog.syundo.org/post/ros%E5%8B%89%E5%BC%B7%E4%BC%9A/</link>
      <pubDate>Sun, 04 Oct 2015 13:06:49 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/ros%E5%8B%89%E5%BC%B7%E4%BC%9A/</guid>
      <description>2015/10/04に開催された、第８回ROS勉強会に参加してきた。
https://ros-users.doorkeeper.jp/events/30434
Dronecodeの概要とROSの対応について @himamura さん Droncodeとはオープンソースのフライトコントローラ(のソフト)のことらしい。 これのROS対応を進めているらしい。 Linuxを積んだボードなのでその中でROSが動く。
遠隔操作をROSのメッセージでもって行うのはやっていないし、難しそうという話が会場から出た。
kotlinでROSノードを動かしてみた @iwata_n さん slackのメッセージを受けてROSに送るプロキシみたいなものをkotlinで書いたということ。
何をするのか  ROSJavaのインストール kotlinを書く intelliJを使ってkotlinからJavaに変換する ROSの上でkotlinが動く  kotlinはJavaを書くよりマシだというだけでなく、 pythonより幾分か素敵な文法と機能を持っているという点で魅力的だと思う。
ただ、文法がC的でないという理由で馴染めない人も多かろうからROSでは流行らない。
sphinxcontrib-ros @otamasan さん ROSのドキュメント生成をソースのクラス定義などを使って一部自動化したという話。 ROSのドキュメントの置き場、生成法にはいろいろ派閥があるそうで、新しい選択肢として名乗りを上げてほしい。
自律型生活支援ロボットMini @ken_demu さん 発表者が17歳だった。 これを17歳が作れるのかというのがにわかには信じられない。 圧倒されて会場の空気が変わってた。 ものすごい実装力。 オープンソースのものをうまく組み合わせて高度な機能を実現していた。
テーブルトップ型対話ロボットSotaの紹介 @masato_ka さん NTTデータのロボット事業の紹介。 SotaとNTT研究所の研究成果を組み合わせた例。 高齢者見守りなどに使えるらしい。 例えば夜間に寝床を抜けて徘徊しそうなとき、声をかけてそれを止めたりする。
最後に未来館でのデモを実演してくれた。 Sotaはまだ一般には売られていないが、将来的に10万程度で買えるらしい。 かわいい。ほしい。
euslispでロボットプログラミング @hyaguchijsk jskではこれが使われているんだなぁ。 一部だろうけど。 機械系出身のひとにはいきなりLispはきつかろうと思う。
でも東大生ならなんてことないのかもしれない。 会場では取り残されている人が続出していた様子だ。
ROS2.0時代に備えるためのc++11, 14 @OTL さん 発表中に挙手でアンケートが取られたのだが、 C++11, 14 を普段から使っている人は0だった。
私はここ半年触っていないなぁと思ったので手を挙げなかったが、 ここはC++勉強会で無かったのでC++14, 17とかいうものの存在を知っているだけで珍しいのだった。 カルチャーショックだ。
rviz、rqtなどによるオンライン可視化、ログデータのオフライン可視化(仮) @garaemon_coder さん 可視化はマルチスレッドのプログラムになるから難しいが、ROSのpub/sub型の通信方式によって可視化がしやすくなった</description>
    </item>
    
    <item>
      <title>ROBO-ONE 27th</title>
      <link>http://blog.syundo.org/post/robo-one-27th/</link>
      <pubDate>Sat, 03 Oct 2015 22:46:10 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/robo-one-27th/</guid>
      <description>第27回ROBO-ONEの予選を見に行ってきた。 今回はヴァニラはエントリーしていなかったが、人形使いさんのチームメンバーという形で大会に顔を出させていただいた。
予選は安定して4.5m踏破できるロボットが増えてきた印象だった。 自分で確かめてはいないが、話を聞くところによると、床に置かれた障害物はゴムシートとプラスチックの板？のようだということだった。 今までは幅の狭いゴムのシールが貼ってあっただけだったので、難しくなったと言える。 しかし、ちゃんと足を上げて歩行していれば今までと同じように進むことはできるようだった。
Frostyさんの速さといったら、なんということだろう。
 西村さんは予選の総括として、自律性の向上を推奨したいと仰っていた。 自動で避けろという問いかけで、避けなければ通れないような障害物が置かれるときが来るかもしれない(ないない)。
今回のロボワンで(特にドール勢の)注目の的になっていたのが、真広さんのST-00だ。 予選の動画を見てもわかるようにものすごい完成度だ。 遠目で見ると本物のHRP-4Cが歩いているようにしか見えない。
 予選が終わった後、念願のドールロボ大集合！写真撮影をした。
ROBO-ONEの歴史の中でこれだけのドールロボが集まったのはこれが初めてだろう。 そして最後かもしれない。 左から順に、びいむさん @beam8000 の「まい」ちゃん、 舞鈴堂さん @Blade_Oh の「音叉」ちゃん、「剣姫」ちゃん、 真広さんの「ST-00」ちゃん、 きゅんどう @ksyundo の「ヴァニラ」、 人形つかいさん @witch_kazumin の「茉莉花」ちゃん、 のむむさん @umumon の「AMATERAS」様、「ゴエン」さん。
のむむさんのAMATERASさんなんかはドールロボの道を切り開いたとも言える名前通りの神的な存在なので、 一緒のフレームにうちのヴァニラが映ることができて、とっても嬉しかった。
今年も人形つかいさん茉莉花ちゃんと写真を撮ることができた。 前回は僕がドール外皮を付けていかなかったため1年ぶりだ。 ドール集合を呼びかけていただいて、大変良かったです。 いつもお世話になってます。
うちの娘は顔の外皮がすぐズレちゃうので目が怖い。あと眼球が銀色のままだから(usbカメラ)怖い。塗らなければ。
前においてあるのは人形つかいさんが購入された鎧ボトルカバー。 ヴァニラには着れないけど、これでバトル出場されたら応援したくなること間違いない。
このようにMSDサイズ勢は兜をちゃんと被れる。かわいい。
今回、ヴァニラを運ぶために、MSDドール用のキャリングケースを導入した。 ドール用キャリングケース 秋葉原のラジオ会館、ドールスポットに在庫があったので買った。
かなりホラーだけどこんな感じに膝を曲げればすっぽりと入る。 バトルロボットだったら肩幅がきつくて入らないだろうな。
今回のロボワンはドールロボ製作者の方と集まれて楽しかった。 (ロボワン的にこれ盛り上がるのはどうなの？？って気はするけどｗｗ) 次の大会は出たい。 そしてそれがヴァニラの最後の出場になるといいと思っている。 1年とちょっとを見込んで新しいドールロボを作っていくつもりだ。 名前は「ソルト」。男みたいな名前だけどもちろん女性形にする。
真広さんのST-00を見て、本当に衝撃を受けた。 同時にどうして自分にあれが作れないのかという悔しい気持ちにもなった。
今は少なくともサーボモータは自分で作らなければ、自分が満足して開発できるものができないなという気持ちになっている。 作っても仕方がないという気持ちでは趣味のロボットの開発など続けられないのである。 技術的に更にチャレンジもしていきたいという考えもある。 サーボケースを自分で削りだすことはマストだ。 僕は機械設計にそれほど強くなく(センスが無いと言っても良い)、メカ的なことはなるべく避けてきた。 でもやらなきゃ仕方がないから、フルスクラッチすることを目指して作業を進めていくことに決めた。 １年かけて基礎技術の研究と設計をしていくつもり。
次回のロボワンはヴァニラを使って歩行安定制御の検証をしたい。 同時に俺サーボのプロトタイプのプロトタイプ程度のものができていたらいいなと思う。
もちろん仕事関係でやりたいこと、勉強しときたいこと死ぬほどあるからバランスよくやる。 redmineでも導入してタスク管理してみるといいかもしれない。</description>
    </item>
    
    <item>
      <title>Haskellで高階関数を組み合わせて部分文字列を作る例が全然わからなかったから考えた</title>
      <link>http://blog.syundo.org/post/1162/</link>
      <pubDate>Thu, 21 May 2015 22:27:54 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/1162/</guid>
      <description>最近、Haskellの勉強のために「関数プログラミング実践入門」を読んでいる。
高階関数のところまでいったけど僕の頭がクソ雑魚だから例題が全然理解出来なかった…。
Qiitaに記事を移しました。
続きはこちら http://qiita.com/nekokoneko_mode/items/724b7e9bddac58e78e83</description>
    </item>
    
    <item>
      <title>C&#43;&#43;初心者会に参加してきた</title>
      <link>http://blog.syundo.org/post/1154/</link>
      <pubDate>Mon, 18 May 2015 01:26:10 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/1154/</guid>
      <description>歌舞伎座.tech#8「C++初心者会」に参加してきた。 http://kbkz.connpass.com/event/13905/
初めて勉強会での発表ということもした（ただしLT)
発表資料はこちら http://www.slideshare.net/syundo/c-48237620
ニコ生はこちら http://live.nicovideo.jp/gate/lv220960718
メモを取って即時公開してくださっているひとがいた。 http://www.shigemk2.com/archive/category/C%2B%2B
私はLTでC++を使って開発できるマイコンボードの例としてmbedを紹介した。 だが、問題はmbedのコンパイラにあった。 C++界隈の人たちの興味はC++11，14、さらにはC++17にあるのだ。 対してmbedオンラインコンパイラはC++98だ。 C++98のことなんてもう忘却の彼方にあるし、取るに足りないことなのだ（実際僕もそう思う）。
mbedの開発環境は不自由だ。 ネット環境がないとコンパイルできないとかザコだ。 なぜそんな環境に拘っているのか？ そのご指摘はまさにその通りだと思う。
arm向けの自由なコンパイラがあるんだから、mbedはオンラインコンパイラに頼るエコシステムにすべきじゃなかったのだ。 オンラインコンパイラが無ければmbedは広まらなかったか？ 僕はそうは思わない。Arduinoの開発環境はローカルの開発環境だが超流行っているじゃないか。 Coretex-M3の強い計算機能力を発揮して楽しくC++開発できることがmbedの強みだ。 Arduinoなんて目じゃない。
それなのにコンパイラがC++98/03準拠というのはあんまりじゃないか。 mbedのコミュニティのことを考え、自分のしたい開発のことを考え、もやもやしている&amp;hellip;
C++界隈の人たちというのは濃い、強い。 自分ももっと技術力を高めて本当のプログラマになりたいと思った。
これまで聞いたこと無いキーワードや，聞いたことあったがよく知らないことをたくさん知れた。 調べて勉強してもっとC++をわかりたい。</description>
    </item>
    
    <item>
      <title>できるだけconstexprを使おう</title>
      <link>http://blog.syundo.org/post/1143/</link>
      <pubDate>Fri, 15 May 2015 02:59:51 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/1143/</guid>
      <description>Effective Modern C++メモ (Moving to Modern C++ : Item 15) constexprがオブジェクトに付加されたときはそのオブジェクトはconstのようなものになる一方で、関数に付加されたときはそれとは少し違う性質のものになるから紛らわしい。
constexprオブジェクトについて constexprをオブジェクトの前に付けるとコンパイル時に用いることができる値になる。このような値は読み取り専用のメモリに配置されるだろうから、特に組み込みの分野で重宝されるだろう。
int sz; // コンパイル時に存在しない ... constexpr auto arraySize1 = sz; // エラー。szはコンパイル時には使えない。 std::array&amp;lt;int, sz&amp;gt; data1; // 同様なエラー constexpr auto arraySize2 = 10; // 良い。10はコンパイル時定数。 std::array&amp;lt;int, arraySize&amp;gt; data2; // 良い。 constは同じ役割を果たせない。コンパイル時には値が無いからだ。constexprオブジェクトはconstだが、その逆は成り立たないのである。
constexpr関数について 引数がコンパイル時定数ならばコンパイル時に、そうでなければ実行時に計算される関数。 C++11の場合 関数内に1行、return文があるだけしか認められない。
constexpr int pow(int base, int exp) noexcept { return (exp == 0 ? 1 : base*pow(base, exp-1)); } C++14の場合 複数行にわたって記述できる
constexpr int pow(int base, int exp) noexcept { auto result = 1; for(int i = 0; i &amp;lt; exp; ++i) result *= base; return result; } 気をつけるべきこと constexprであると示すことはオブジェクトや関数のインターフェースをユーザーに通知するという意味で重要である。ユーザーはコンパイル時にそれが必要となるようなコンテキストでconstexprなものを利用するだろう。</description>
    </item>
    
    <item>
      <title>ブログも静的ページにしたらどうか</title>
      <link>http://blog.syundo.org/post/1140/</link>
      <pubDate>Thu, 14 May 2015 01:27:58 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/1140/</guid>
      <description>以前から気になっていたのだが、ブログのようだけども決してWordpressで構成されているわけでもなく、読み込みが速くて、しかもモダンなデザインのウェブサイトをよく見かける。 ああいったものをどういうフレームワークで作っているのか全然良くわかっていなかったのだが、TLを眺めていたらふいに知ることとなった。 あれらはMarkdownなどからビルドして静的ページを生成したものを公開しているそうなのだ。 DBやらphpやら準備しなくて良いので環境の構築は楽だろう。 静的ページだけなので非力なサーバでも運用できるだろう。 俄然興味が湧いてきた。
こういったツールは色々あって https://staticsitegenerators.net/ ここを見るとどれが人気があるのかわかる。
だが私は今のところgolangで動くHugoに興味がある。 機能がシンプルであるし、他に比べてサイトの生成が爆速でできるらしい。
ソースはGitHubで管理するのが良かろう。 werckerやらTravis CIなどのCI Webツールを使ってCIできると更にかっこいいだろう。 werckerはBitbucketも使えるしGitHubのprivateリポジトリも使えるらしい。 Travis CIはGitHubのみでprivateリポジトリは有料らしい。
ちなみにちょっと文脈が違うがWebサイトに数式を含めるならばMathJaxが良いという電波をキャッチした。
参考にしたところ http://task-blog.net/2015/01/25/remove-blog-rails-to-hexo/ http://re-dzine.net/2015/01/hugo/ http://rcmdnk.github.io/blog/2015/02/25/blog-octopress/ http://oku.edu.mie-u.ac.jp/~okumura/javascript/mathjax.html</description>
    </item>
    
    <item>
      <title>Haskellを入れる</title>
      <link>http://blog.syundo.org/post/1128/</link>
      <pubDate>Tue, 12 May 2015 02:04:29 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/1128/</guid>
      <description>Haskellをやってみようと思った。 環境：Ubuntu12.04 64bit
記事をQiitaに移動した。 続きはこちら http://qiita.com/nekokoneko_mode/items/ee88053c164d3b2bd20b</description>
    </item>
    
    <item>
      <title>ドコモを解約してIIJのみおふぉんにMNP転入した</title>
      <link>http://blog.syundo.org/post/1131/</link>
      <pubDate>Thu, 07 May 2015 00:30:10 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/1131/</guid>
      <description>携帯電話の料金が高すぎて、いい加減嫌気が差していたのでドコモを解約した。 ちょうど更新月であったから違約金が付かないはず。2年縛りとか自動更新とか怒りが爆発しそう。
移行先はIIJのみおふぉんにした。 月3G音声通話つきで1600円のものを選んだ。 容量はドコモにいたときと同じで値段は1/3ぐらいだ。
MNP転入するときに気になるのが、simカードが届くのに時間がかかるため通話できない期間が存在すること。 今回は5月4日 am9:54にドコモsimが停止 翌5月5日 am10:07にヤマト運輸でIIJのsimが到着した。 都内に住んでいたから早かったのかもしれないが、これなら週末のうちにでも手続きができそうだった。
通信速度は別に問題ないように思う。WEBページを見ても動画を見ても体感で何も変わらない。ドコモ契約してた時に計測しておいて比較すればよかったけど忘れてた…。
音声通話はみおふぉんダイアルを使えば安くなる。まだ試してないが、音声の品質についてはそんなに心配していない。
こうしてドコモは通信を流すだけの土管になるのだ。</description>
    </item>
    
    <item>
      <title>ロボットを吊るアームを作った</title>
      <link>http://blog.syundo.org/post/1111/</link>
      <pubDate>Sun, 19 Apr 2015 22:46:39 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/1111/</guid>
      <description>作業をしやすくするために、棚に固定できるロボット用のアームを作りました。こんなんです。

4mmの合板をCNCで切削しました。穴がいっぱいあいてるのは、CNCが脱調したか何かで穴の位置がずれてしまったため、ボール盤で開け直したからです。  ワイヤーで吊ります。
ちなみに現在の作業環境はこんな感じです。
CNC 
ボール盤と折り曲げ機  CNCに関しては防音箱の性能向上を図る必要があると考えています。
10mm厚の合板で箱が作ってあるので、低音域の騒音のカットはかなりできていると思うんですが、中高音が筒抜けな感じです。 吸音材をヤフオクで買って貼りつけようと思います。
ではでは。
&amp;nbsp;
&amp;nbsp;</description>
    </item>
    
    <item>
      <title>最近どうしているかということとROBO－ONEはどうだったかという話</title>
      <link>http://blog.syundo.org/post/1068/</link>
      <pubDate>Mon, 13 Apr 2015 02:12:29 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/1068/</guid>
      <description>お久しぶりです．今年の更新は今日が初めてです．これまで何をやっていたかというと，2月末までは修士論文を片付けていました．3月は研究の引き継ぎのための作業やら引っ越しの準備やらをしながらROBO-ONE参加をしてました．ともかくそんなこんなでなかなか落ち着かなかったわけです．有線ネットの環境も無かったりして…．
4月になり今はWEB系のお仕事してる会社で働いています．といってもまだ研修ですが． 大学に入学したときには将来は家電メーカーとかに入って組み込み技術とかの研究開発の人になろうと思ってはいたんですが，なんだか興味が逸れていきまして，結果的にそういうことになりました．現在は東京在住です．秋葉原に近いところだと思っていたのですが，自転車が無いとちょっときついかな．どこに駐輪するのが安全かが最近気になっていることです． ROBO-ONEまでにうちのヴァニラがどう変わったか こちらが改造に使った部品たちです．一部組み上がってますが… 
胴体ユニットに改造が施されまして，腰がロールピッチに動くようになっています．首は胸のあたりから2軸リンクしたのと，頭のなかの1軸で3軸方向に動きます．
今回の改造の見どころはこの頭の機構です．ヴァニラを見た人から「目は動かないの？」と散々言われ続けてきたので，眼球が左右に動くようにしました．ついでにUSBカメラを搭載しました．型番は以前の投稿に書いたものと同じものです．
動画はこちら．目線が常に平行にならないのがこの機構のまずいところですが…まぁなんとかなるでしょう． 
この写真では見難いですが，腕の自由度もかなり増やしました．軸の構成は舞鈴堂さんのところの娘を参考に致しました…というかまったく同じかな？ 
頭にはBeagleBoneが載っています．大きいですね！お人形ロボとは思えない大胆なスペースの使い方です．これが後に悲劇を呼ぶことはなんとなく予想はできてました…．
バリ取りとか塗装が間に合わなくてボツにしたんですが，腕カバーとか腰カバーを3Dプリントで作ったりしてました．ABSがテーブルから剥がれて反ることといったらもう泣けました．
これは腕カバー反らなければそれなりに使えそうなものができます．外装なので中身はスカスカ，充填率は10%です．
こちらは腰カバー．設計ミスがあってうまく嵌りませんでした…．焦ってやる仕事は良くないです…フィラメントがかなり無駄に…．
大会1週間前にこのような状態だったので，これは時間が無いかも…と思い始めたのです．そして…．
14，15日にアミューあつぎで開催された，第26回ROBO-ONEに参加してきました．
予選の結果
40cm
 敗因  コントロールボードに使っているmbedのRAMが足りなくなってきて色々つらくなってきた． シリアル受信割り込みがうまく動かず，数日間手を焼かされたあげく結局どうにもできなかった． 上半身のサーボモータを増やしたらバランスに関してシビアになってしまって，胴体軌道がsin波じゃだめだった．でも取り掛かるのが遅すぎて倒立振子規範の軌道にできなかった． 数年前にバキュームフォームで作った外装がことごとく嵌らなかったため，Inventorでドールっぽい外装を設計して3Dプリンﾄしたりしていたが，所詮Inventorだから満足のできる形にならず不採用．そうこうしているうちに時間が無くなった． 
今後は歩行の安定性を高める予定です．アイディアはある…</description>
    </item>
    
    <item>
      <title>中華CNC CNC3020導入記　USBCNCで使う</title>
      <link>http://blog.syundo.org/post/1009/</link>
      <pubDate>Mon, 13 Apr 2015 01:19:34 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/1009/</guid>
      <description>
 </description>
    </item>
    
    <item>
      <title>機械学習プロフェッショナルシリーズ第1弾から2冊買った</title>
      <link>http://blog.syundo.org/post/1090/</link>
      <pubDate>Sun, 12 Apr 2015 23:42:54 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/1090/</guid>
      <description>今月から，機械学習プロフェッショナルシリーズというものの発刊が始まる．今月は全29巻のうち，4冊が発売された．私はそのうち，岡谷 貴之「深層学習」と，岩田 具治「トピックモデル」を購入した．
まだ深層学習のほうしか読めていないが，Deep Learningの日本語で読める資料は人工知能学会の特集しかなかったりしてなかなか勉強しづらかったこともあって，色々な情報が纏まっている本書はとても意義があると思う．
DeepNNを使って何かやってみたい．</description>
    </item>
    
    <item>
      <title>WordpressをロリポップからDigital Oceanに移した</title>
      <link>http://blog.syundo.org/post/1072/</link>
      <pubDate>Sun, 12 Apr 2015 23:19:51 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/1072/</guid>
      <description>今までHPとブログに使っていたロリポップのレンタルサーバをやめて，DigitalOceanの最安プランを使うことにした．VPSを借りてWEBアプリ作れるようになりたかったからである．それにともなってブログとHPのサーバを移行する作業が必要だった．
そこで新しいサーバでWordpressを使えるようにして以前のサーバから移行するまでの手順をメモしておく．
まずはDigitalOceanに登録してDropletを作成する必要がある．今回は 512MB Ram 20GB SSD Disk Singapore 1 CentOS 6.5 x64 のものを作った．1時間1円くらいのプランだから月に500円くらいになる．案内に沿ってボタンを押すだけなので簡単だ．セットアップの途中にSSHの設定項目があるので，先に以下のSSHの設定をしておくとスムーズで良い．
SSHの鍵の登録 DigitalOceanのマイページから仮想コンソールを使ってマシンにアクセスすることもできるが，反応が緩慢なのでSSH接続したほうが色々と捗る． ```bash ssh-keygen ``` で公開鍵ができるので中身をコピペしてDropletの生成時に登録しておく．生成時にしていなかった場合は，YourSetting-&amp;gt;Securityより設定しておく． Apache 導入 yum install -y httpd httpd-devel chkconfig httpd on service httpd start PHP 導入 rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm yum --enablerepo=remi,remi-php55 install php php-devel php-mysql php-mbstring php-gdvi /etc/php.ini vi /etc/httpd/conf.d/php.conf MySQL 導入 yum install mysql-community-release-el6-5.noarch.rpm yum install -y mysql-community-client mysql-community-devel mysql-community-server Digital Oceanの最安プランではメモリが不足がちらしい．スワップファイルを作る．
sudo dd if=/dev/zero of=/swapfile bs=1M count=1024 mkswap /swapfile swapon /swapfile sudo sh -c &amp;#34;echo &amp;#39;/swapfile swap swap defaults 0 0&amp;#39; &amp;amp;gt;&amp;amp;gt; /etc/fstab&amp;#34; chkconfig mysqld on service mysqld start MySQLの設定とかする．全部Yesと答える．ただしパスワードは空欄にしておいた．</description>
    </item>
    
    <item>
      <title>Beagle Bone Blackにカメラを繋げてOpenCVで顔検出した</title>
      <link>http://blog.syundo.org/post/1033/</link>
      <pubDate>Fri, 17 Oct 2014 23:57:16 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/1033/</guid>
      <description>Beagle Bone Blackの環境が整ったので次はカメラが使えるか試してみた． そしてOpenCVで顔検出することを目指す．
今回使うカメラはこれ． 
大須のジャンク屋で売っていたもので，正体不明だったがとりあえず3個購入．1個800円．かなり古そうなので少なくともUVCには対応していないだろう． 何者か調べるためにUSBの情報を見てみる．
lsusb ID 046d:08d9 Logitech, Inc. QuickCam IM/Connect どうやらこの製品らしいhttps://support.logitech.com/en_us/product/222
どんな画像が取れるのか試しに見てみる．
sudo apt-get install xawtv xawtv -c /dev/video0 
ロボットの目として使うには十分な画質はありそうだ． ちなみにレンズ周りにあるリング部分でピント調節することができる．ジャンクだったためリングの動きが渋くて，なかなかピント調節の方法を見つけられなかった．
さて次はBBBの上でOpenCVをビルドして使えるようにする． OpenCV2.4.9のセットアップは大方このサイトhttp://www.kkaneko.com/rinkou/opencv/opencvinstalllinux.html の通りに進めた(執筆現在は最新の2.4.10のものに置き換わっている)．
ただし，ダウンロードに時間がかかったり，エラーが出たりしたのでcmakeの部分は以下に変えた
cmake -DCMAKE_BUILD_TYPE=RELEASE -DWITH_TBB=ON -DWITH_GTK=ON -DWITH_OPENGL=ON -DWITH_OPENCL=OFF -DWITH_CUDA=OFF -DWITH_UNICAP=ON -DWITH_V4L=ON -DWITH_XINE=ON . それでもBBB上では一連のセットアップに16時間程度かかった．もうどれだけ時間が掛かろうと寝るだけだったのでサンプル等一緒に入れておけばよかった． サンプル画像が無いと不便なので母艦のOpenCV環境からコピーした．トホホ．
sudo scp -P 22 /usr/local/share/OpenCV/samples/c/*.png ubuntu@192.168.7.2:/usr/local/share/OpenCV/samples/c まずOpenCVからカメラが読めるか試してみる．以下のコードを使った．
// cam.cpp #include &amp;lt;cv.h&amp;gt;#include &amp;lt;highgui.h&amp;gt;#include &amp;lt;ctype.h&amp;gt; #ifndef CV_WINDOW_FREERATIO #define CV_WINDOW_FREERATIO 0 #endif  int main( int argc, char **argv ) { cv::VideoCapture cap1(0); cap1.</description>
    </item>
    
    <item>
      <title>Beagle Bone BlackにUbuntu14.04とデスクトップ環境をインストールした</title>
      <link>http://blog.syundo.org/post/971/</link>
      <pubDate>Thu, 16 Oct 2014 21:42:07 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/971/</guid>
      <description>死蔵していたBeagle Bone Blackをやっと引っ張り出してきて，とりあえずUbuntuを入れてみたので作業のメモを残したい．BBB(Beagle Bone Blackのこと)のリビジョンはA5Aということで，いかに無駄に積まれていたのか察せられる．(在庫が無い時期で，わざわざ海外から共同購入したんだよなぁ…)
まずGetting Started(http://beagleboard.org/Getting%20Started)に従ってみようとするも，そもそもBBBがUSBストレージとしてWindowsに認識されない．なぜだかわからないが，抜き差ししているとやっと認識された．それ以後は順調だった(?)．USBケーブルをつなげば仮想的にLANが繋がってる状態になるらしい．
リビジョンが古いボードであるので，まずeMMCにあらかじめ書き込んであるAngstromのバージョンアップをしなければならない． http://beagleboard.org/latest-images にある，Angstrom Distribution (BeagleBone Black - 2GB eMMC) をmicroSDカードに書き込む．
Angstromのイメージを書き込んだSDカードをBBBに挿入して差入口付近にあるboot用のボタンを押しながら電源を投入すると，4つのLEDが順番に点いていき一瞬4つ同時に光った後，ランダムに光るパターンになる．この状態のまま1時間程度放置する．書き換えが終われば再び4つのLEDが同時に点灯したままの状態になる．SDカードを抜いて電源を投入すれば，新しいImageで動くようになっている．
以上はWindows上でもできる作業だが，後の作業はLinux環境から行うほうが都合がいい． 作業環境：VMware Player，64bit Ubuntu 14.04
下準備が終わったら，次にUbuntuのboot用SDカードを作成する． 以下のサイトを参考にして作業を進める． http://elinux.org/BeagleBoardUbuntu
wget https://rcn-ee.net/deb/rootfs/trusty/ubuntu-14.04-console-armhf-2014-05-06.tar.xz md5sum ubuntu-14.04-console-armhf-2014-05-06.tar.xz tar xf ubuntu-14.04-console-armhf-2014-05-06.tar.xz cd ubuntu-14.04-console-armhf-2014-05-06 sudo ./setup_sdcard.sh --probe-mmc 以上でSDカードがどこにあるのか表示してくれるので，そこに書き込む
sudo ./setup_sdcard.sh --mmc /dev/sdX --uboot bone SDカードをBBBに挿入して電源を入れると，Ubuntuが起動するようになる．毎回bootボタンを押すべしと書いてある古い情報もあるが，新しいAngstromのイメージに更新してあるので，ボタンを押さなくてもSDカードに入っているOSが勝手に起動する．
とりあえずBBBにSSHでログインする．
ssh ubuntu@192.168.7.2 BBBと母艦PCをUSBでつなげるとアドレスは192.168.7.2になる．デフォルトのユーザー名は「ubuntu」，パスワードは「temppwd」になっている．
さて，以上でインストールしたUbuntuはX window systemが含まれないリモートで操作することが想定されたイメージであった．（ubuntu-14.04-consoleとある）
今後OpenCVを用いた画像処理等を行っていきたいと考えているので，デスクトップがあるのが好ましい．そこで，BeagleBoneBlackでもストレスなく動くような軽量なWindow systemである，LXDEを入れることにした．
以下のサイトを参考にして作業を進める． http://elinux.org/Beagleboard:Installing_LXDE#LXDE_On_A_Micro_SD_with_Ubuntu_Raring
BBBにLXDE関係のものをインストールして再起動する．
sudo apt-get -y install lxde lxde-core lxde-icon-theme sudo reboot さてここで，BeagleBoneBlackにHDMIケーブルを繋いでディスプレイを見てみると，残念なことに何も表示されない．LXDEが無くてもログイン画面は表示されるらしいが，それも表示されない．何が悪いのか分からないが，ディスプレイとの相性もあってBBBではハマりやすい問題らしい． 結局解決できなかったので，諦めてVNCサーバーを使ってリモートデスクトップで運用することにした．考えてみるとBBBにディスプレイが専有されないからこちらのほうが便利である．
BBBにvncserverをインストールし，一旦起動して設定ファイルを生成する．初回起動時にはVNCでアクセスするためのパスワードを設定するように言われる．</description>
    </item>
    
    <item>
      <title>Pepper Tech Festival 2014に行ってきた</title>
      <link>http://blog.syundo.org/post/984/</link>
      <pubDate>Sun, 21 Sep 2014 23:49:55 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/984/</guid>
      <description>昨日9月20日に開催されたPepper Tech Festival(http://www.softbank.jp/robot/special/techfes/live/)に当選したので行ってきました．
当日の12時にpepperが開発者向けに予約開始されるということで，Pepperやその開発環境に関する情報が紹介されるという触れ込みのイベントでした．
当日説明された，開発者向けのパックの内容についてはすでにこのサイトにて公開されています．
(http://www.softbank.jp/robot/special/tech/)
開演時間の30分前に会場に入るとすでに席の半分以上が埋まっていました．ベルサールのWEBサイトによると1000人～1600人が入る部屋らしいです．マジでこれだけの人間がpepperのためだけに来たのか！？浮かれすぎじゃないか！？そしてソフトバンクはどれだけ本気なんだ！？ととにかく興奮しました． 
会場まで行った人への特典は，PepperTechFesのTシャツ，ステッカー，缶バッジ，そしてUSBに入ったPepper開発用の先行公開SDKでした． 
ただしSDKは先行公開版なので，デフォルトのロボットがNAOになっていたり，Pepper相当のモデルの名前が開発中のコードネーム（Juliet）だったりします．SDKについてはすでに会場で作業を進めた人の報告(http://qiita.com/Cocominap/items/93f9f9b8806f9ddaa513) や，秋葉原アトリエの中の人からの説明が出ています．(http://qiita.com/Atelier-Akihabara/items/c5f57358a7b333eef397)
イベント会場は講演会場と展示会場に分かれていて，それぞれ楽しめました．
講演では，Androidアプリの開発者　安生 真 さん，大阪大学基礎工学研究科　石黒 浩 教授，チームラボ代表　猪子 寿之 さん，明和電機　土佐 信道 社長によるパネルディスカッションが興味深かったです．  1→10designが製作し展示会場でも稼働していた，2台のpepperと人間の3人で会話できるデモについて石黒先生が言及されたのがきっかけでロボットと社会性について話が展開していきました．石黒先生が仰るには人間とロボットの会話があまりうまくいっていなくても，ロボット同士が流暢に会話していれば，場としては会話が成立している感じが高まり，会話の違和感が少なくなるとのことです．石黒先生自身も同様な実験を行われているようで（ちゃんと論文を追ってないのでわからないすいません），先生のトークの勢いが止まりませんでした．
猪子さんが，pepperだけ100台くらい居る部屋を作って眺めたいと話すと，水槽の中に居る金魚を外から見るより，中に入って見たほうが楽しいに違いないというような話になっていき，道端でpepper同士が会ったりしたら挨拶するようにしたらおもしろい，などという話に発展していきました．会場のみなが大爆笑の素晴らしいディスカッションでした．
私も実際に1→10designさんのデモを体験してみました．pepperは1台でもわりと勝手に話を進めていく傾向があるように思いますが，2台になるともう完全にトークの主導権を握られてしまい，敗北感を感じました．アニメ攻殻機動隊において，群れて勝手に話しているタチコマに対して人間が少し苛ついた感じで接しているシーンを思い起こしました．仲間外れにされているのがつらいと同時に，pepperにはpepperの生活があるから仕方ないと自然にロボットの人格（ロボ格）を認めることができるようでした．ロボットに社会を形成させたらどうなるか，という話はロボットの知能に深く関わっている話であります．私もpepperに期待しているのは社会性からくる知性とはどんなものか検証してほしいということです．pepperほどの性能のロボットがとりあえず数百台日本に流通するということで，成果が出てきそうな気がします．
展示の中で私が面白いと思ったのはユカイ工学株式会社さんの「マホウノツエ」というデモです． 
pepperに学習赤外線リモコン（IR kit）を内蔵した魔法の杖を持たせることで，pepperに話しかけて家電を操作することができます．このような使い方は誰でも思いつくものですし，「ロビ」もデモでやっていたりするのですが，実際に人間大のロボットが自分の命令で動く様子を見るとインターフェースとしてのヒューマノイドは喧伝されている程度には役に立つのかもしれないと思いました．こういう用途ではスマホに話しかけるのでは駄目なのか？という問題がありますが，少なくとも人間に依頼するように自然に操作できるのはヒューマノイドの持つ力だと思います．それに今後赤外線リモコンだけでなく，ゲームのコントローラでも掃除機でも，なんでも持たせられるようになると更にpepperの価値が高まってくるでしょう．一般物体のマニピュレーションなんてとんでもなく難しい問題ですが，みんなでやれば誰かがなんとかしてくれるんじゃないですかねぇ！？（無責任
TechFesに参加した１日は朝の10時半から19時半までpepperだらけの一日でした．あれだけ高機能なロボットであっても，近くに何台も居るとだんだん慣れてきました．懇親会の間，ビールを片手に何度もpepperの頭をパンパン叩き，体をどつき，指をグニグニしてると，ロボットの居る生活がそんなに遠くないようにさえ思えてきたのでした．
その他に思ったこと，メモなど １，無意識をプログラムするのが重要なんじゃないですかね！ →pepperの内部でバックグラウンド動作しているプログラムとしては，外乱に耐えてバランスをとるもの，周囲の状況と自分の姿勢を把握して衝突回避するもの，などがあるようですが，この手のバックグラウンド動作するプログラムをどんどん増やしていくことがロボットの賢さを高めるのに効果的なんだろうなと思いました．
例えば音声認識に関していえば，会話のある時点のセンテンスを認識するだけでなく，それ以前の人間対人間の会話を聞いていたり，テレビの音をなんとなく聞いていたりというのが自然な会話に役立つんじゃないかと思います．画像認識なども同様なことが言えます．これは意識とは何かということにも繋がっていくと思うのですが&amp;hellip;．現時点のSDKでは内部でバックグラウンド動作するソフトの開発はできないらしいです．今後の展開を期待します． ２．pepperの人工知能って何？ →pepperの文脈で人工知能と言っているのは，ひとつは音声，画像を入力とするニューラルネットワークのことのようです．Deep Learningで学習しているらしいです．例えば，怒った顔を見せれば，怒っているという判定が出るようなユニットです． その他に人工知能っぽいものとしてはSLAMが実装されているようです．部屋のマップを作って自己位置同定をしているようだ&amp;hellip;&amp;hellip;という話を聞きました． ３．pepperの開発をすれば最先端の職業であるロボットクリエーターになれるんですよ！！あなたたちが第一人者ですよ！ →共通ハードウェアで開発していく形がロボットの開発速度を高めていくことは間違いなく，このサイズのロボットが流通することにはものすごい意味を感じています．でも，いちユーザーが職業にできるような盛り上がりになるかはわかりません． ４．ロボット作るのが趣味な僕らはどうしたらいい？ pepper登場以前： あの大学でやってるあれみたいなのやりたい，アシモみたいなのやりたい，etc.→欲しい→でも高くて買えない→じゃあ自分でつくろう！
pepperが現れた後の世界： 君のロボットがやってるそれ，pepperなら簡単にできるよ！pepper買えばいいじゃん！！
あああああああああああああああああああああああああ！
僕「pepperなんか知らねぇよ！俺は俺のロボットを作るんじゃい！」
そしてpepperを手にした皆はコミュニティの力を集結して素晴らしいロボットを作っていくのでしためでたしめでたし．
僕「（真顔）」
５．値段について →pepperを買うには，本体価格213840円+使用料9800円×36ヶ月=566640円支払う必要があります．さすがに使用料含めると部品代よりかは安いと言えないと思いますが，アルデバランのNAOの価格が97万であるのと比べると安いと思います． みなさんどうですか！？先着順じゃないから抽選で200人に選ばれれば買えますよ！ http://www.softbank.jp/robot/special/tech/reserve/ 
おわり．</description>
    </item>
    
    <item>
      <title>あけましておめでとうございます</title>
      <link>http://blog.syundo.org/post/961/</link>
      <pubDate>Wed, 01 Jan 2014 20:46:21 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/961/</guid>
      <description>皆様，あけましておめでとうございます． 旧年中はお世話になしました． 本年もよろしくお願い致します．
今年の目標は大晦日エントリに書いた技術的にやりたいことをクリアして夏のROBO-ONEに出場することです． 2月のは行けない予定です&amp;hellip;．
目の前にある課題をじゃんじゃんクリアしていって高みを目指したいです．</description>
    </item>
    
    <item>
      <title>2013年の振り返り</title>
      <link>http://blog.syundo.org/post/955/</link>
      <pubDate>Tue, 31 Dec 2013 21:46:52 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/955/</guid>
      <description>今年ももう終わるので振り返ってみたいと思います．
・2月
-卒論発表を終える．
-第22回ROBO-ONE予選に出場するも5歩目でコケる→ウィッグ転落．
・3月
-ドイツ旅行に行く．無事大学を卒業．
～8月
-大学院の授業をやたら沢山受講する．研究にも猛烈に追われ，休みのない日々を過ごす．
合意形成フォーメーション制御の課題　https://github.com/syundo0730/VoidsModel
CPGに関する課題　https://github.com/syundo0730/CPG
・9月
-第23回ROBO-ONE予選に出場，前回よりも安定した歩行を見せるもコケる．
&amp;hellip;あれ&amp;hellip;Twitter見ながら必死に探したけど，今年はロボ活動が少なかったかもしれません？
とても充実していた気がするんだけどモノとして残っているものが無いからかなー．
でも，初めてROBO-ONEに出場したのは大きな進歩かと思います．
来年は，今年やりかけていて完成できなかったものを公開ができればいいなぁと思っています．
-足裏センサのための基板
-ブラウザで動くモーションエディタ
-MPU-6050のDMPを使ったプログラム
それ以外にやりたいことは
-コントロールボードの高性能化(大きさの面でAriaG25が気になっているから入手して使ってみたい．画像処理をやらせたい．)
-数歩分の歩容のリアルタイム最適化ができないかな？データベースから引っ張ってくるタイプも検討している
などです．
どうせ達成できないけどね．来年末に見返して絶望するといいよ＞自分．
今年は2回もROBO-ONEに参加し，そのたびにたくさんのひとにお世話になりました．ありがとうございました．
Twitterでも絡んでいただいてありがとうございます．Facebookのほうも大量友達申請しましたのでよろしくお願いします．
ではみなさま，良いお年を．</description>
    </item>
    
    <item>
      <title>XAMPPのエイリアス設定</title>
      <link>http://blog.syundo.org/post/948/</link>
      <pubDate>Sun, 29 Dec 2013 15:49:55 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/948/</guid>
      <description>C:/xampp/apache/conf/httpd.confに以下を追記．
Apache2.4以降の場合は，「Require all granted」書かないとアクセス権くれない．
Alias /(エイリアス名)/ &amp;#34;(ディレクトリ)/&amp;#34; &amp;lt;Directory &amp;#34;(ディレクトリ)&amp;#34;&amp;gt; Options Indexes FollowSymLinks Includes ExecCGI AllowOverride All Require all granted Order allow,deny Allow from all &amp;lt;/Directory&amp;gt;</description>
    </item>
    
    <item>
      <title>第23回ROBO-ONEに行ってきました</title>
      <link>http://blog.syundo.org/post/925/</link>
      <pubDate>Wed, 25 Sep 2013 00:25:41 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/925/</guid>
      <description>9月14日、第23回ROBO-ONE(予選)にヴァニラで参加してきました。
控え室でのヴァニラ

人形つかいさんの茉莉花ちゃんと

九州大学さんのサクさんと

女の子ロボがいてくれると楽しい･･･

予選の結果は2.9mで59位(散財さん調べ)だったようです。
今回は半分を超えてゴムがあるゾーンの上も歩くことができて、大変嬉しかったです。
ただ、残り20秒の時点で転倒してしまったのは残念でした･･･。実はあの瞬間、予想外の安定ぶりにいい気になって歩幅を5mm増やすコマンドを送ってしまい、それが原因でコケました。片足支持期にバランスを崩してコケるより速く倒れたように見え、しかも後ろに倒れたので、コマンドが適用されたタイミングが悪く、両足接地時に歩幅が上昇してしまい、脚をゴムに引っ掛けてバランスを崩したのだと思います。
倒れてしまいましたが、それなりにまっすぐ歩けたのは良かったです。これは東京行きの新幹線の中で書いた、なんちゃってスラローム歩行が効きました。なんちゃってというのは逆キネ計算に股ヨー軸の回転を考慮していないのに無理矢理脚を回しているからです。足を摺ることになるので今回のようなゴムのある地形では良くないです。
忘れないうちにヨー軸の回転も入れ込もうと思います。
今後の方針としては、ROBO-ONE時点では飾りだった、足裏に搭載した感圧センサを生かした歩行を研究していこうと思っています。
感圧センサの使い途としては、バランス制御のようなことは考えておらず、歩行の周期のタイミング合わせのようなものに使おうと思っています。
歩容を生成するいわゆるCPGの周期を足裏から得られる実際の歩行周期に漸近させていきます。
物理シミュレーションでテストしてみた動画はこんな感じです。
元ネタは以下の論文です。
Modulation of simple sinusoidal patterns by a coupled oscillator model for biped walking
Modulation of Sinusoidal Patterns by a Coupled Oscillator Model
ロボット学会のセミナーで紹介され、やってみようと思いました。
この方法だけでは、歩き始め、終わりの加減速が実現されないので、受動歩行規範の歩行パターンを用いたりできないかなと思っています･･･。
実機で足踏みできることを確認して、あとの開発はしばらくシミュレーションかな。</description>
    </item>
    
    <item>
      <title>InventorのシートメタルからDXFの書き出し</title>
      <link>http://blog.syundo.org/post/785/</link>
      <pubDate>Thu, 22 Aug 2013 22:38:37 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/785/</guid>
      <description>Inventorでシートメタルを作成、フラットパターンに変換してから切り抜きのためにDXFを書き出すときは、
  フラットパターンを右クリックし、「コピーに名前を付けて保存」でDXFを書き出す。   InventorからのDXFの書き出しにはいくつか方法があるが、 以下のようにするとうまくいかない。  面を右クリックして   「面に名前を付けてエクスポート」でDXFを書き出したり、  面にスケッチを貼り付けて、  「スケッチに名前を付けてエクスポート」でDXFを書き出したりすると、  後にCAMで読み込んだときにポリラインが切れて認識されてしまう。  久しぶりに触ったらはまった。  </description>
    </item>
    
    <item>
      <title>第22回ROBO-ONE</title>
      <link>http://blog.syundo.org/post/784/</link>
      <pubDate>Tue, 26 Feb 2013 02:09:40 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/784/</guid>
      <description>参加してきました．
当日までの流れはこんな感じです．
1月：
・卒研終わったらROBO-ONE観に行きたいなと思う．そして折角東京まで行くのならROBO-ONE出ておこうかなぁと思い始める(予選で歩くだけならなんとかなるかもという打算)．
2月15日：
・卒論のぎりぎりさにビビりながら申し込み締め切りまでにエントリー．
18日：
・卒論発表(提出)
～21日：
・コントロールボード(mbed+宮田さんのLittle Burnig Core)基板の作成．
・無線にはBluetooth USBドングルとSBDBTを用いたが，なかなかうまくいかず(コネクタの初期不良と判明し，部品を取り替えた)，悩む．
～23日早朝：
・PWMサーボの配線．
・上半身のシリアルサーボは動作させることを諦める．
・モーションエディタも作りつつあったが，完成していない状況だったので，ターミナルで1軸ごと指定していこうとしたが，プログラムの不具合でうまくいかない．Scilabで逆キネ計算して歩行用のモーションファイルを生成→mbedのストレージに入れ読み込ませ再生という流れでなんとか足を上げて前に出し下ろす動きを実現．
・ジャイロ，加速度センサを積んではいたが，プログラムに対応させることができておらず，「これはすぐ転ぶ」と確信する．起き上がりはできない．
23日昼：
・新幹線で東京に向かう．
・未来科学館に着くも，状況がよくわからず，机の無い控え室？の隅っこのほうでアウェー感に苛まれながらモーションを作ろうとする．が，ノーパソに入っていたScilabのバージョンが違ったせいで使えない関数があるとエラーが出てくる．代替の関数に書き換えたが，同等な結果が得られない(csvファイルうまく出してくれない)
・部屋から人が居なくなってきた&amp;amp;機体審査してない気がする→予選開始ギリギリで審査してもらう．
・このままでは予選の出番を逃してしまうと感じ，他の控え室っぽい部屋へ知っている人を探しに行く．人形つかいさんを発見し近くに座らせてもらう．
・ScilabをモバイルネットワークからダウンロードしようとするもPCのWifiがちっともうまく動作しない．手作業でcsvファイル加工していくことを考えていたが，その他作業(ドールアイがずれて怖いことになってた，首が抜けやすかった，SBDBTのコネクタが抜けやすくなってすぐ通信不可になった，ことへの対応)をしているうちに時間がなくなる．
・出走→6歩目でコケる→ウィッグが取れてパゲる→記録5cm
 ・その後人形つかいさんなどとお話をし，時間になったので新橋に予約した宿に向かう．(公式の懇親会に申し込んでいたが，次の日にあるものとばかり思っていたのでスルーしてしまったorz　5000円が…．これを翌日Twitterを見て気づく．)
24日：
・ごーすとさん，ロ技研のにゅくす君と会えたので一緒に観戦する．
・ROBO-ONE終了．芝浦工大さんおめでとうございます．
・人形つかいさんの茉莉花ちゃん，バンセイさんのロボと写真を撮れてうはうはする．あ！柔王丸の人だ！とお話したく思ったが，写真に夢中すぎて忘れる失態をする．
・にゅくす君に案内してもらって東工大のロ技研を見学させてもらう．狭いながら，工作機械は結構本格的なものが揃っており感心する．HAKUたんの話など聞かせてもらう．
・新幹線で帰宅．なぜか東京から乗る．
楽しかったです！
できれば今度も，と思います．</description>
    </item>
    
    <item>
      <title>あけましておめでとうございます</title>
      <link>http://blog.syundo.org/post/782/</link>
      <pubDate>Thu, 03 Jan 2013 23:29:21 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/782/</guid>
      <description>帰省していたため遅くなりましたが，今年も宜しくお願い致します．
今年はできれば練習会を見に行きたいなと思っております．
新しいことに挑戦し続けられる1年でありますように．</description>
    </item>
    
    <item>
      <title>今年</title>
      <link>http://blog.syundo.org/post/781/</link>
      <pubDate>Mon, 31 Dec 2012 22:05:32 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/781/</guid>
      <description>更新するの久しぶりすぎてログインできないかと思った・・・。
twitterやってるとブログ更新のハードルが上がりますね。
大晦日なので今年を振り返りたいと思います。
今年やったこと（時系列順）
・倒立2輪ロボを立たせることができた。
・サークルの後輩達が、一度書類審査落ちたものの、色々あって鳥コン出られるようになり、結果優勝できた。
・Digikey, AliExpress等海外通販にチャレンジした。
・AquesTalkPicoを使ってみた。
・FPGAを（ほんの僅か）触った（現在放置中・・・）。
・組み込みボード（PandaBoard）にAndroid入れてみた（だけ）
&amp;nbsp; ・mbedでのモーション再生プログラムが8割方できた。
宮田さんのLBCを参考に24軸ジッタフリーPWM出した。
  ・大学院入試クリアした。
・CNCを入手。
・卒研でOpenGL, PhysX, Lua等学んだ。
・人形ロボの石膏型の気に入らなかった部分を削って調整した。
・GUIライブラリのQtのPython版、PyQtをちょっと使えるようになった。
・東工大のロ技研の人たちに教えてもらったLEDマトリクスディスプレイを入手し、表示させてみた。
 
Twitterとブログ見返しながら挙げてみましたが、大したことしていないなぁ・・・。
来年は開発速度、学習速度、上げていきたいです。
最近はJavaScriptその他に興味が出ていて、ブラウザでモーション作れるようになったらいいなぁと思ってます。
あと一度プリント基板を外注してみたいです。FusionPCB安い。
あとは卒論執筆ですね・・・。頑張らないと。
それでは良いお年を。</description>
    </item>
    
    <item>
      <title>中華CNC CNC3020導入記　設定編2</title>
      <link>http://blog.syundo.org/post/852/</link>
      <pubDate>Sat, 08 Dec 2012 03:21:56 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/852/</guid>
      <description>前回：中華CNC CNC3020導入記 設定編
LinuxCNCの設定 一応，送られてきたCNCの箱の中にはA4一枚のMach3での設定方法が入っていたのですが，LinuxCNC(EMC2)のものはありません．設定についてはメールで問い合わせよ，と商品ページには書いてあったものの，とてもLinuxCNC用の資料が貰える気はしません．ですのでMach3の説明を見ながら推測してLinuxCNCでの設定値を決めていきます．
CNCタブから「Setting」を選んでCNCの設定を始めます．

設定の名前はCNC-3020T-DJにしました．自由です．
First Parport Addressのところには前に調べたPCIExpress-パラレル変換ボードに割り当てられたアドレスを指定します．
Base Period Max…のところは，「Test Base Period Jitter」を押した後，ブラウザ開いたり動画見たり数分間PCに負荷を与えて出た値よりちょっとだけ大きい値に設定します．
次です．これはそのままで次行きます．

パラレルポートのピンの割り当てをします．

このように設定しました．今のところうまく動いているので間違いは無いようです．
各軸のステッピングモータの回転数と軸方向への移動距離を対応づけます．

台形ネジの精度が良くなく，ピッチが実測で3.965くらいらしいのでそのように設定します．
Table Travelは実際の可動範囲の2倍に設定しました．これはデータによって可動範囲外に出たぞ，という警告が出てきて作業が進まなくなったからです．データの作り方や原点の合わせ方が間違っている可能性があるのでここは要検討です．
Y軸はTable Travelは-300～300に設定し，それ以外はX軸と同じように設定しました．
Z軸はこのようにしました．

「Test This Axis」というボタンを押して，移動量を決めてから試験的に各軸を動かしてみることができます．
ちなみにY軸に関しては，ノギスを当てて移動距離を測ってみました．何回か繰り返しましたが，無負荷の状態では指令値との誤差は±0.02mm以下でした．ホントか？バックラッシを作るように動かしてから測っても同じでした．まぁ切削しながら測ってないからわからないです．

設定はこれで終わりです．

適用押します．</description>
    </item>
    
    <item>
      <title>[C&#43;&#43;]CSVファイルの読み込み</title>
      <link>http://blog.syundo.org/post/851/</link>
      <pubDate>Fri, 30 Nov 2012 02:15:53 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/851/</guid>
      <description>CSVファイルを読み込んで，カンマを除いたデータを配列に書き込むプログラムです．
　Split(string &amp;amp;src, string key)でカンマの読み飛ばし，readCSV(string filename, int* p)でファイルのOpenと文字列データの数値への変換，配列への書き込みを行います．
#include &amp;lt;iostream&amp;gt;#include &amp;lt;fstream&amp;gt;#include &amp;lt;sstream&amp;gt;#include &amp;lt;string&amp;gt;#include &amp;lt;vector&amp;gt; using namespace std; vector&amp;lt;string&amp;gt; Split(string &amp;amp;src, string key); bool readCSV(string filename, int* p); int main(void){ int data[256];//ファイルから読み込んだ数値を入れる配列  readCSV(&amp;#34;data.csv&amp;#34;, data);//ファイルから読み込み  //最初の10個を表示させてみる  for(int i = 0; i &amp;lt; 10; ++i) { cout &amp;lt;&amp;lt; data[i] &amp;lt;&amp;lt; endl; } } bool readCSV(string filename, int* p) { fstream file; string str; file.open(filename.c_str(), ios::in); if(! file.is_open()) { return false; } while(getline(file, str)) { vector&amp;lt;string&amp;gt; str_line = Split(str, (string)&amp;#34;,&amp;#34;); int size = str_line.</description>
    </item>
    
    <item>
      <title>[C&#43;&#43;]1次元配列を3次元配列に整形する</title>
      <link>http://blog.syundo.org/post/850/</link>
      <pubDate>Fri, 16 Nov 2012 01:15:57 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/850/</guid>
      <description>外部RAMなんかに書き込んでおいたデータを扱いやすくするために3次元配列の形にしたいことがありました．案外てこずったのでメモしておきます．
　3次元として持つための領域を動的に確保しているのでサイズが可変です．
#include &amp;lt;iostream&amp;gt;using namespace std; int data[256]; //元となるデータ領域 int main() { //データ領域への値の代入  for(int i = 0; i &amp;lt; 256; ++i) { data[i] = i; } //3次元配列の大きさ  char size_z = 3; char size_y = 4; char size_x = 5; //とりあえずポインタに元のデータ領域の先頭アドレスを代入  int* p = data; //3次元配列arrayへの整形  int*** array = new int**[size_z]; for (int i = 0; i &amp;lt; size_z; ++i) { array[i] = new int*[size_y]; for (int j = 0; j &amp;lt; size_y; ++j) { array[i][j] = p + size_x * j; } p += size_x * size_y; } //確認のため表示  for (int i = 0; i &amp;lt; size_z; ++i) { for (int j = 0; j &amp;lt; size_y; ++j) { for (int k = 0; k &amp;lt; size_x; ++k) { cout &amp;lt;&amp;lt; array[i][j][k] &amp;lt;&amp;lt; endl; } } } //メモリの解放  for (int i = 0; i &amp;lt; size_z; i++) { delete[] array[i]; } delete[] array; } (sizeof int) * (1 + size_z)だけのメモリを消費します．</description>
    </item>
    
    <item>
      <title>中華CNC CNC3020導入記　設定編</title>
      <link>http://blog.syundo.org/post/849/</link>
      <pubDate>Wed, 14 Nov 2012 02:14:07 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/849/</guid>
      <description>前回：中華CNC CNC3020導入記　購入編
組み立て終わったので，動かしてみたいと思います．
まず基板を見てみる とりあえず，一度見てみないと心配なので，コントロールBOXを開けてみました．

大きなトランスと，電源基板，ステッピングモータ制御基板が入ってました．

モータドライバは東芝 TB6560AHQでした．アルミの放熱板に固定されています．
基板をよく見ると，
[bash gutter=&amp;ldquo;false&amp;rdquo;]
LIMIT X Y Z
GND PWM VCC
PROBE
[/bash]
などと書かれているピンがありました．リミットスイッチや，スピンドルの回転数の操作，切削Z軸センサの追加が可能なのかもしれません．
コントロールBOX内で見つけた不具合なんですが，EMERGENCY STOPのスイッチに繋がる配線が抜けていたのでESTOPと書いてあるピンに差し直しました．
それ以外はハンダ付けもきれいですし，問題ないようです．
パラレルポートの増設 コントロールボードはPCのD-sub25pinのパラレルポートに繋がなければなりません．しかし，そんなもの手持ちのPCに付いてないので，PCI Express接続のパラレルポート変換基板を用いました．
変換基板はこれに似たものをヤフオクで買いました．「PCI-Express　パラレル」とヤフオクで検索して出品されていればそれですhttp://auctions.search.yahoo.co.jp/search?p=PCIExpress+%E3%83%91%E3%83%A9%E3%83%AC%E3%83%AB&amp;amp;auccat=&amp;amp;aq=-1&amp;amp;oq=&amp;amp;ei=UTF-8&amp;amp;tab_ex=commerce&amp;amp;slider=0．Ubuntuの入ったPCで使うので，Linux対応と書いてあるのがポイントでした．
OSについて CNC制御用のPCのOSにはUbuntu10.04を使います．
この理由なんですが，
・手持ちのPCでPCIExpressポートが空いてるのがたまたまUbuntuの入ってるPCだった．
・Windowsで使えるCNC制御ソフトのMach3は32bitOSでないと使えなくて，しかもXP推奨だが，手持ちのWindowsは64bit版のWindows7しかない→Linuxしかない
・せっかく激安CNCなんだからフリーのソフトにこだわりたい．
・Ubuntuで使えるCNC制御ソフトのLinuxCNCがUbuntu10.04じゃないとだめだった．
という感じです．
Ubuntu10.04をインストールしていなければ，ここから日本語Remix版のISOを入手して，インストールしてください．
さて，UbuntuをインストールしたPCの，PCI(Express)スロットに変換ボードを挿したら，端末より
[bash gutter=&amp;ldquo;false&amp;rdquo;]
$ lspci -v
[/bash]
と入力してパラレルポートのアドレスを調べます．私の場合は1000と1008の二つ出てきたんですが，どちらが使えるのかやってみないとわかりません．
後で使うのでアドレスをメモしておきます．
LinuxCNCのインストール LinuxCNCをlinuxcnc.org/からダウンロードします．
HOME&amp;gt;Download&amp;gt;Other Installation Options　と進んでいって，
If you prefer to start with the distributed Ubuntu CD, you can install LinuxCNC yourself with these instructions:</description>
    </item>
    
    <item>
      <title>中華CNC CNC3020導入記　購入編</title>
      <link>http://blog.syundo.org/post/848/</link>
      <pubDate>Tue, 09 Oct 2012 00:14:50 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/848/</guid>
      <description>CNCが欲しい！ 最近作りたいものが増える一方で，実際に工作する時間が無くなってきて，CNCが欲しいなぁと思うようになってきました．ろぼとま，ロボスポット，ヴィストン，アミエなどで加工サービスがありますが，板厚に制限があったりして案外作れるものが少なく感じます．加工サービスにも一回1万円程度かかりますので，それならばいっそCNCを買ってしまおうと決断しました．
何を買うか 現在ホビー向けに小型CNCがいくつか売られています．
ローランド：　MODELAシリーズ
オリジナルマインド：　KitMillシリーズ
秘密基地：　黒い奴
中国製(不明)：　Sable-2015
中国製(不明)：　CNC3020，3040，6040
Edward氏：　Shapeoko
etc…
今回は値段の安さや，人柱的チャレンジ精神から，中華製のCNC～シリーズの中から購入しようと決めました．
この中華CNCには3040Tとか3040Nとか，命名規則のほどはよく分かりませんが，種類がいろいろあります．3040とかいう数字はX,Yの加工範囲を表しています．3020はDCモータ，台形ネジ駆動です．3040，6040にはDCモータ，台形ネジ駆動のものと，ACモータ，ボールネジ駆動のものがあって，後者のほうがお値段が高いです．またACモータのものにはインバータがセットになっていて，大抵AC200Vが必要になります．
今回はサイズや値段を考えて，2012年新モデルのCNC3020T-DJを購入しました．
中華CNC3020T-DJ CNC3020T-DJのスペックは以下の通りです．
CNC3020T-DJスペック
X,Y,Z 加工範囲: 300×200×45mm
最大材料高さ: ≤60mm
外形n: 520×400×370mm
テーブルサイズ: 440×240mm
構造材: 6061&amp;frasl;6063 アルミニウム合金
ステッピングモータ: 2相(バイポーラ型) 57&amp;frasl;1.8A
ドライブユニット: 1204 2条台形ネジ
スライドユニット: Chromeplate shaft
最大速度: 4000mm/min
切削速度: 300-3000mm/min
繰り返し位置精度: 0.05mm
主軸モータ: 230W DC スピンドルモータ
主軸速度: 11000RPM/MIN
ツールホルダ: ER11/3.175mm
インターフェース:パラレルポート
利用可能なソフト:Mach3/Emc2,(Type3,Wentai, ArtCAM)
コマンド: G code/.nc/.ncc/.tab/.txt
重量: 21kg(梱包含む)
AliExpressに出品してる会社のうちここ
http://www.aliexpress.com/item/110V-230W-CNC-3020T-DJ-upgrade-from-3020T-3020-Router-Engraver-Milling-Drilling-Machine/434982856.html
から購入しました．購入時最安でした．
購入時は本体535.00ドル，送料153.97ドルでした． AliExpressからの請求は，クレジットカードの明細を見ると，54677円でした．安い！また，荷物到着から1週間後くらいにFedEXから封筒が届き，消費税/付加価値税　500円，関税・消費税特別手数料　500円の計1000円を請求されました．コンビニや銀行で払えます．</description>
    </item>
    
    <item>
      <title>倒立振子など</title>
      <link>http://blog.syundo.org/post/778/</link>
      <pubDate>Mon, 02 Apr 2012 00:47:26 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/778/</guid>
      <description>さすがに正月からずっと更新してないのはまずいだろうと思って更新です．
3月にやろうと思ってたことが全然できなかったので1月2月のことですね．

・倒立2輪ロボット
mbedに慣れるためとか現代制御の勉強するためとかで友達と協力して作りました．
  最適制御なはずですけど微分項一個手でいじってます．まぁ…そんなもんでしょう．
しかし配線とかプログラミングとか結局全部自分がやることになるので，パラメータだけ教えられて作るってのは結構辛いものがあるなと思いましたｗｗｗ俺は作業しかしてねぇぞとｗｗｗ
もうちょっと安定させたいですね…．
モータはステッピングモータです．
DCモータの奴も作ったけどうまく立ってないです．エンコーダに難があるように思います．
・AquesTalk pico
MTMで販売されてその後Webショップでも入手出来ない状態だったものがリニューアルして販売．データ送るとすぐ喋ります．
アンプに100円ローソンで売っている「ボリュームアンプ」という商品を使いました．お手軽．余計な配線も残ってるのであれですけど，アンプはボード下の黒い箱の中です．
 PCのスピーカーで喋らせた様子
 使わないピンが多いのでちょっと邪魔かな．フラットパッケージのが出るらしいですね．
・DE0購入
FPGAの勉強したいと思いDigiKeyから購入しました．
7セグに表示出してみた図．
 でも論理回路のこと分からないしどうしようかと思っているところです．
まぁ焦らず行こう．
・DigiKeyで購入したもの
DE0，PandaBoard，HMC5883L
初めての海外通販でした．
例によってPandaBoardは購入理由を聞かれましたが，カメラを使ったロボティクス云々書いておきました．でもしばらく触れないかも．
HMC5883Lは地磁気センサですが，トラ技の記事によると0.1度程度の幅で方位が出るらしいです．
動作テストがうまくいってません．裏返して無理矢理ユニバーサル基板にハンダ付けしたのでそれがまずかったのか，I2C通信のやり方が間違ってるのか不明です．
ストロベリーリナックスで700円程度で実装されたのが売ってるので，それを買った方がよかったかも．チップは300円くらい．
・胃腸風邪になる
ホントつらかったです．熱も40度近くでました．
下痢の症状は10日くらい続きました．
健康に気をつけようと思いました．
・サークルまた鳥コンに落ちる
書類審査キビシーｗｗｗｗ




今日研究室決まるはずなのでどうなるのかなーと思ってます．
院試の勉強もしないといけないしね！
今年度は忙しくなりそう．</description>
    </item>
    
    <item>
      <title>2012謹賀新年</title>
      <link>http://blog.syundo.org/post/777/</link>
      <pubDate>Wed, 04 Jan 2012 15:10:30 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/777/</guid>
      <description>あけましておめでとうございます。
旧年中はお世話になりました。
今年も宜しくお願いします。
ホントは去年の振り返りとか書いたほうがよかったけど、もう年越しちゃったので、今年の製作の目標をば書きましょう。
・現在mbedを制御ボードに仕立て上げようとしている。要求は多PWM出力。宮田さんのLBCを参考に製作中。
ファイルシステムが使えるようにお膳立てされてるから、mbed内にcsvファイルなんかでモーションデータを保持できたら楽かな、と思う。
・mbedが一段落したら、BeagleBoadなんかに手を出したい。カメラをUSBで接続して画像認識させることが目標。今年中にできるとは思わない。
BeagleBornなんていうもう少し小さいのも出るとか・・・。
・去年末にロボットバトル観て、気持ちはバトル方向にも傾いたんだけど、やっぱ当分はお人形ロボ作っていたい。お人形ロボはたぬたぬさんを目標に構想を始めたもので、ドールよりかぬいぐるみに近いけどぬいぐるみタイプで無い、ぐらいの等身を目指している。かわいさを、追求したい。そろそろモーションも作る・・・。
・友達と始めた倒立2輪ロボットの製作、Scilabでシリアルポートを介して制御しようとしたが、通信がうまくいかず、実は今年のとりあえずの課題となっている。写真↓
 これもなんとかしたい。
今年も頑張るぞー！
研究室配属とか院試とか、あるけど、どうなるか、わからないけど。
時間を有効に使わねば。</description>
    </item>
    
    <item>
      <title>ロボットバトルin名古屋モーターショー観戦、中部ロボット忘年会</title>
      <link>http://blog.syundo.org/post/776/</link>
      <pubDate>Fri, 23 Dec 2011 21:54:07 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/776/</guid>
      <description>（バトルは撮る余裕がなかったのでモーターショーの写真）
今日は名古屋モーターショーと同時開催のあいちITSワールド内で行われたロボットバトルin名古屋モーターショーを観戦してきた。
昼頃に友人と会場に入り、とりあえずはモーターショーの展示を一通り見て、その後２時頃からバトルを観戦した。バトルを生で見るのは第８回ROBO-ONE以来かなぁ。
バトルも悪くない。とても楽しめた。優勝はレグホーン。一緒に居た友人も２足には詳しくないが、率直に楽しんでいたようだ。
（あ、そういえば今期のディジタル回路の先生が解説をしていらっしゃった。大同大学の先生だとは聞いていたけどまさかバトルの解説してらっしゃるとは。）
その後はモーターショーでまだ見てなかったブースを回り、時間になったので友人と別れロボット忘年会に合流した。バトル終わってからすぐ離脱せずに機体を見せてもらえばよかったかなぁとちょっと後悔。まぁ仕方が無い。
忘年会ではネット上で知っていた方の名前と顔を一致させることができたｗｗｗ
ちょっとモチベーション上がってきたかな。
とても楽しい一日だった。
あ、それと自分が知らないロボットがいっぱいいた。学生はネットに情報公開をあんまりしないという話もしたが、顧みると自分ももっと公開していかないといけないなぁとも思った。
サーボは何使ってるかとか。身長も公開してないもんな自分。しっかり計ってないからだけど。重量も同じ。</description>
    </item>
    
    <item>
      <title>作業進んでなくても記事が書ける、だってASIMOの新型が出たんだもの</title>
      <link>http://blog.syundo.org/post/775/</link>
      <pubDate>Tue, 08 Nov 2011 20:35:36 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/775/</guid>
      <description>・新しいASIMOがスゴイ。片足ケンケンで横移動してるの見て感動した。
動画　動画　動画
こんなん自分のロボでできたらいいのになぁ・・・
・船場RFCの記事書くべきだったんだけど、全く動かない状態でステージに立ったこともあって、動くようになってから動画とともに紹介したいと思っていた。
しかし時間の余裕ができるとイベント前の忙しさの反動であれもこれもと手を出してしまってロボットの作業は遅々として進んでいないのである。
船場RFCに関しては色々な人とお話しできて(自分がいっぱいいっぱいだったのが問題だったけど)、非常に楽しかったことは報告させていただきたい。特に舞鈴堂さんの音叉ちゃんとはツーショット写真が実現してほんと幸せだった。
自分のロボをどういう方向性で開発していくのか色々考えることにもなった。たまにはイベントにも参加していきたいものである。
・最近はmbedをいじっている。かなり乗り遅れてる感もあるけど。ものすごいポテンシャルを秘めたボードだなと思う。小型でロボット向けにも使いやすいかも知れない。
とりあえずはサーボ動かしたりステッピングモータ動かしたりした。写真↓ブレッドボードに挿せるのがすごくイイネ。
 ステッピングモータは倒立2輪ロボ作りたいなーとふと思ったから買ってみた。
クラウドで開発(キリッ　ってのが大きなアピールポイントではあるのだろうけど、いかんせんエディタなどが使いにくく感じる。でもUSBに挿すだけで良いってのは確かに楽だ。最初は。
・他にはサークルで開発中のフライトシミュレータのためにArduino使って回転数計作ったりしてた。http://aircraftact.blog53.fc2.com/blog-entry-39.html
明らかにオーバースペックだけど楽でいい。あとから拡張もしやすいし。
どんどん新しいことに挑戦していきたいな。ASIMOを見習って。え、これ伏線だったの。</description>
    </item>
    
    <item>
      <title>鳥人間→船場ロボコン</title>
      <link>http://blog.syundo.org/post/774/</link>
      <pubDate>Mon, 22 Aug 2011 00:53:02 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/774/</guid>
      <description>サークルで１年間制作してきた人力飛行機が完成し、３回のテストフライトも終え(本当は５回やる予定だったが雨で流れた)、非常に性能の良い機体であったことが分かりました。機速は当サークルでは歴代最速の8.3m/s程度です。昨年より小型化し、8kg程度軽量化出来たのが大きかったのではないかと思います。
テストフライトの動画はこちらになります。
http://www.youtube.com/watch?v=S4J0JxsRe-Q&amp;amp;feature=youtu.be
8:20～飛行場飛び切りしています。
先日、テレビで鳥人間コンテストが放送され、仲間と一緒に観て、大いに楽しめました。
うちの大学は今年、書類選考で落ちてコンテストには出られず、結果、3年間全く鳥コンには縁がなかったということで残念でしたが、テレビ放送を観て、色々踏ん切りがついた思いです。
何より元々自分はロボットとの二足のわらじを履いている状態でしたし、飛行機のこともロボットのことも同時に考えてきました。これからはロボットをじっくりやっていきたい思いがあります。在学中にロボットをやれる時間ももうあまりない気もしますから。実際、来る10月に行われる第2回船場ロボットファッションコンテストにもエントリー済みです。
夏休みは船場ロボコンに向けてロボットを完成させたいです・・・。
あとTOEIC</description>
    </item>
    
    <item>
      <title>お掃除ロボットルンバ購入ガイド</title>
      <link>http://blog.syundo.org/post/896/</link>
      <pubDate>Fri, 01 Jul 2011 01:57:53 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/896/</guid>
      <description>今回はルンバについて紹介する記事を書こうと思います。最近CMなどでみかけるようになって興味を持っている人も多いのではないでしょうか。
ルンバとは
ルンバ（英: Roomba）は、iRobot社が製造販売するロボット掃除機です。2002年に登場し、その後毎年新型や改良版が発売されてきました。
現在日本で販売されているルンバには日本版と並行輸入版があります。米国で売られているルンバは日本のものとは違います。日本版は正規販売店やその他の専門店、輸入盤は正規でない専門店、オークションなどで販売されています。
日本版ルンバの購入→iRobotStore、家電量販店
海外版ルンバの購入→非正規専門店、オークション
ルンバの種類
ルンバには日本版モデルと海外版モデルがあります。2011年9月現在一般的に入手可能なものを以下に挙げます。
・日本版モデル
ルンバ527、537、577
ルンバピンクリボンモデル、ハローキティモデル　(←ルンバ537と同等品)
ルンバネット通販モデル　(←ルンバ537のセットでバーチャルウォールを1個にしたもの)
・海外版モデル
ルンバ530、532、560、610
ルンバの機能
ルンバには機種ごとに機能の違いがあります。以下の表にまとめました。

バーチャルウォール
バーチャルウォールとは、ルンバに仮想の壁を認識させるための装置です。これをルンバの近づかせたくないところに置くと幅2m程度の範囲に壁があると認識し、近づかなくなります。配線の込み入っているところや書類が積み重なっているところなどに置くという使い方をします。でもバーチャルウォール周辺は掃除されないことになるので、狭い部屋での使用は考え物ですね。
お部屋ナビ
この機能があれば部屋を区切って順番に掃除させることができます。もちろんお部屋ナビを使わずにドアを開けておけば部屋が違ってもルンバは掃除をしていきますが、ルンバは1つの部屋として認識して掃除するので、結果として掃除をしきれないところが出てきます。お部屋ナビを置けば部屋ごとに1部屋分の掃除時間をかけるので、しっかり掃除を仕上げてくれます。お部屋ナビが2つあれば3つの部屋を順番に掃除できることになります。また、お部屋ナビはバーチャルウォールとしても使えます。
自動充電
掃除が終わると自動的にホームベースに戻り、充電をする機能です。充電器を差し込む手間が省かれますし、何よりもすごくロボットっぽくてかっこいいです！(笑)しかし、当然ながら充電器がある部屋から離れていたり隔離された部屋の掃除をやらせると戻っては来ません。
スケジュール設定
掃除のスケジュールを曜日、時間で分単位の指定ができます。時間になると自動的に掃除を開始します。自分が出かけている間に掃除を始めさせられるというわけです。まぁ、出かける前にスイッチ入れればいいじゃんって話もありますけど・・・(笑)。まぁロマンです。
MAXモード
日本版のルンバにはまだ無い機能です。オフィスや店舗などの広いスペースを掃除するモードです。
日本版と海外版の違い
上の表を見ていただければ、機能面では日本版537と海外版530が同一、577と560がほぼ同一だとわかります。違う点はわずかで、以下のようになります。
537と530の違い

本体の持ち手が無いのはどうしようもないですが、リモコンとクッションラバーは別売りで買えます。この点さえ気にしなければ530と537の違いは問題にならないと思います。
577と560の違い

V-Wとはバーチャルウォールのことです。577にあるお部屋ナビ機能が560にはありません。本体の取っ手は560にも付いています。その他の付属品は別売りで買えます。お部屋ナビ機能が要らなければ同等品と考えられます。海外版でお部屋ナビ機能が欲しい人は610を選択すればいいと思います。
海外版には大容量ダストボックスや、MAXモードなど、日本版にない特徴を持つ機種もありますし、ルンバを購入するときには海外版も検討するべきだと思います。
日本版と海外版どちらを買えばいいのか
海外版と日本版との共通点や海外版の利点を挙げてきましたが、どちらを買うか悩むことになります。その要因は価格とサポート、どちらを取るかということにあります。
価格
例えば日本版ルンバ537の定価は￥69,800、これと同等品の海外版ルンバ530の定価は$299.99です。円高の今の基準で考えると日本版は約3倍の価格となっています！この価格の差はちょっと見逃せません。
サポート
日本でアイロボット社のサポートが受けられるのは正規版のルンバだけです。公式サイトの注意書き←をお読みください。
サポートの内容としては［１年無償修理サービス ］［ 無料メンテナンスサービス(1回) ］［ 保証外無償対応サービス(90日以内) ］などがあります。その他には［ メンテナンス・レギュラーパック ］［ メンテナンス・サービスパック ］という有償のメンテナンスパック(それぞれ7000円、10500円)も用意されています。これは上記3つの無料サービスの期限が切れている場合の修理依頼ということになります。この有償サービスでは場合によってはルンバの制御アルゴリズムをアップデートしてもらったり、新品や新型に換えてもらったり、ということもあるらしいです(正式にアナウンスされているわけではないので注意)。
私個人の見解
やっぱりただのお掃除ロボットとしては日本版のルンバは高すぎます！とても手が出ません。その点、機能はほぼ同一で安い海外版のルンバは魅力的です。
サポートについては、非正規の専門店でも独自に修理サービスを行っているところがあります。修理代金も公式のものより安い場合が多いです(修理の内容は違うでしょうけど)。海外版ルンバが壊れた場合が心配ならばそのような店から購入すれば良いと思います。そのような代理店から購入した場合、日本語の説明書(のコピー)もついてくる場合が多いので安心です(かなりグレーな気がしますが・・・)。
というわけで、私は海外版のルンバを購入しました！サポートなど正規版に比べて不利な点もあるでしょうが、今のところ全く問題ありません。
うちのルンバ</description>
    </item>
    
    <item>
      <title>ひずみゲージとその利用法</title>
      <link>http://blog.syundo.org/post/895/</link>
      <pubDate>Sat, 04 Jun 2011 03:59:32 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/895/</guid>
      <description>材料試験などによく使われるひずみゲージについて情報をまとめます。ロボットに貼り付けてもフレームの変形などが検知できるので軸力センサのような使い方もできるかもしれませんね。
ひずみゲージの測定原理 ひずみゲージには主にワイヤゲージと箔ゲージ(フォイルゲージ)があります。
ワイヤゲージは薄い台紙の上に細い抵抗線をくねらせながら貼ったもので、箔ゲージは抵抗部に線ではなくエッチング技術で製造したパターンを用いたものです。最近は半導体製造ラインで製造でき安価なので、箔ゲージが主流となっています。
しかしながらワイヤゲージも箔ゲージもその測定原理は同じで、伸びによって変化する導線の抵抗値を読み取ってひずみを測定するというものです。
ひずみとひずみゲージの抵抗値の変化には以下の関係が見られます。抵抗値の式から考えれば当たり前かと思います。
･･･(1)
Rはひずみゲージの抵抗値、Lはひずみゲージの長さです。また、Ksはゲージ率と呼ばれ、ひずみゲージ固有の値です。
ひずみゲージの抵抗値の変化はホイートストーンブリッジ回路で測定されることが多いです。ホイートストーンブリッジは原理的に測定量が平衡点にあるどうかで測定量を知る「零位法」という区分の測定をしているため、測定精度が高く、微少な抵抗値変化も検知できるからです。
ホイートストーンブリッジの回路図は以下の図のようになります。

図　ホイートストーンブリッジ回路
キルヒホッフの法則から以下の式が導き出されます。
･･･(2)
例えば、抵抗R1をひずみゲージだとみなして、R1→R1+ΔR1と変化したとし、他の抵抗値を合わせてR1=R2=R3=R4=Rとします。すると
･･･(3)
となります。
ΔＲ＜＜Ｒであるので分母のΔRを無視すると
･･･(4)
この式(4)と式(1)より
･･･(5)
ひずみεは
･･･(6)
であるので
･･･(7)
とひずみを表すことができます。
以上のようにひずみゲージと、それと抵抗値の等しい抵抗器3つを用いたホイートストーンブリッジ回路で、電圧の変化からひずみを求めることができるのです。
ロゼット解析 </description>
    </item>
    
    <item>
      <title>あおいは！</title>
      <link>http://blog.syundo.org/post/773/</link>
      <pubDate>Sat, 14 May 2011 15:51:17 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/773/</guid>
      <description>千石電商でsparkfunのbluetoothモジュールBluetoothMateを買いました。
ストロベリー・リナックスで売っている同等品よりかは幾分か安い。
 L型ピンヘッダを付けました。
 左がBluetoothMate、右がUSB→TTL変換基板。
USB→TTL変換基板→BluetoothMate→(無線)→東芝BT-MicroEDR1X(USB)でPCの二つのCOMポートを繋げてテストしてみました。
 双方向の通信を確認できました。
ここ←を参考に通信速度を38400bpsに変更できました。
疑問なのがBluetoothドングルをSPPでCOMポートとして扱う場合、通信速度の設定はどうしたらいいんだろということです。色々設定を変えてみましたが、どれでも通信できたので、まぁそういうことなんでしょう。あまり気にしないようにしようと思いました・・・。
さて、別ネタも放出。
 ご丁寧にボタンに番号が書いてあるUSBゲームパッドが安かったので買いました。
これをDirectX.DirectInputを使って読み取るプログラムを書きました。
 ネットの情報を集めてコピペしたらなんとかできました。（あまり勉強にはならなかった）
スティックのアナログ値も見えます。
しかし例外処理がなんかうまく行っていないのが玉に瑕です。ゲームパッドを繋ぎ忘れるとTHE　END！でもひとまず放置です・・・。
このゲームパッド、bluetoothネタと関連して、私が何をやりたいのか察しが付いている方も多いと思います。でもそうするとミニノートが欲しくなるわけです。うむ・・・。
さらに別ネタ。
 アミエさんに注文してたのが届きました。
たまには手加工しろよ自分。と思いましたが。やっぱそんな時間はない。
これで上半身を増強します。

最後に一言。
追い詰められているときこそ、開発は進む！ある意味、現実逃避なの☆</description>
    </item>
    
    <item>
      <title>人形みたいな写真とかあるから注意</title>
      <link>http://blog.syundo.org/post/918/</link>
      <pubDate>Fri, 06 May 2011 01:58:20 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/918/</guid>
      <description>て、今更ですけどねｗ
去年から全く更新していなかったこのブログ。 半年近く経っていたんですね。 ちまちまと作業しながら、しかしあまり進んでいない感じです。
・脚カバー

作業中はフレームにくっつかないようにマスキングテープ貼ってあります。

フレームの一部が飛び出てもラインが出ていれば綺麗な足に見えるだろう、という着想からこういう風にしているんですが、最近続出の細い足のドールロボをみてるとかなりうらやましいです。（靴下も履けないしね！素足で靴履くのも変だしどうしようか考え中） 肌色に塗ったらまた見え方変わってくるかも知れませんが。
股関節の黒いのはHRP-4Cの真似です。（パンストで作った・・・orz）
・顔
以前作ったのがいまひとつ納得できていなかったので修正。

目を大きく、鼻をとんがらせて、口元と顎をいじくりました。ボークスニュースを見ながら必死にやりました。写真で見るともう一息な気がしないでもないです。奥が深い。
目と鼻の穴に空気抜きの穴を開けています。
バキュームフォームで↓

前回のは1mmのプラ板でやったんですが、試行回数とまんべんなく熱する努力が要求される割に綺麗に出来ないので、0.5mmのを重ねて使うことにしました。

抜け勾配的にまずかったため、型から取るために切れ込みを入れたのもあります。(もう一個は力ずくで取った。しわが付いた・・・。）
口元とかの複製精度に差があるのでやっぱ完全には重なりません。でも接着剤をたんまり塗ればなんとかなるのではないでしょうか。

首振り軸をどう入れるか検討中なので接着するのもひとまず保留。強度を保ちつつ、整備しやすくしたいです・・・。
腕の設計とか一部の部品の製作もなんとなく進めているので、後一、二ヶ月でうちのロボも完全体になれるのではないでしょうか。そうなるように頑張りましょう・・・。
思いの丈を殴り書き↓
 俺規格で人形作っているからともかく着せられる服がない。 伸縮性がありそうなSDの服を見つけてうっかり買ってももれなく着られない。 自分が思ってるよりこやつはふとましいことを忘れないようにせねばならない。 ウィッグもブライス用のを新調するつもり。 この世には10インチまでのウィッグしかないと思っていたけどそうでもなかった。 もし次作るならSDに合わせて作りたい。 でもドールをフルスクラッチできることが分かったから、それなりの収穫だった。 転んだら壊れるんじゃ無いだろうか。このロボ。 大丈夫か！？バネとか入れるつもりだけども！  ではでは！</description>
    </item>
    
    <item>
      <title>C言語のポインタについてまとめ</title>
      <link>http://blog.syundo.org/post/894/</link>
      <pubDate>Thu, 14 Apr 2011 22:54:39 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/894/</guid>
      <description>ポインタの宣言 char *a;
 とする。間接参照演算子*とは別。
間接参照演算子* char *a;
について間接参照演算子*を使うとその型は
aはcharのポインタ *aはchar型
 アドレス演算子&amp; char a;
についてアドレス演算子&amp;amp;を使うとその型は
aはchar型 &amp;aはcharのポインタ
 ポインタと配列 宣言の仕方による違い色々
char a[5];//←配列(要素数5) char *b[5];//←ポインタの配列(要素数5) char (*c)[5];//←配列(要素数5)へのポインタ char (*d[6])[5];//←配列(要素数5)へのポインタの配列(要素数6)
 ポインタと構造体 以下のような構造体test1、構造体ポインタtest2について考える。
struct TEST { char a; char b[5]; char *c; char *d[5]; char (*e)[5]; char (*f[6])[5]; }; struct TEST test1; struct TEST *test2;
 それぞれの構造体のメンバへの値アクセスの方法は
test1.a=10; test1.b[0]=10; *(test1.c)=10; *(test1.d[0])=10; *(test1.e)[0]=10; *(test1.f[0])[0]=10; test2-a=10; test2-b[0]=10; *(test2-c)=10; *(test2-d[0])=10; *(test2-e)[0]=10; *(test2-f[0])[0]=10;
 </description>
    </item>
    
    <item>
      <title>サーボQ</title>
      <link>http://blog.syundo.org/post/772/</link>
      <pubDate>Sun, 10 Apr 2011 13:19:38 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/772/</guid>
      <description>シリアル通信で動かすのが億劫で放置していた週刊ロボゼロ3号のRS306MD-DCを触ってみました。
PWMで動かすこともできますが、折角のシリアルサーボなのでシリアルで動かしたいです。
ともかくIDとか通信速度とかの設定をPCからいじってやらないと使い物にならないのでVBでプログラムを書きました。
ROM用のデータを送ってからそれを書き込む命令を送って、1秒以上待つ。再起動。という流れが分かるまで苦労しました。
配布されてるサンプルプログラムはID設定だけで、通信速度設定のはありません。
このサンプルでは書き込みフラグと再起動フラグを同時に立ててまとめて命令送信していますが、これができるのはID設定だけ？で通信速度設定では出来ません。
再起動は1秒以上待ってからする必要があるのです。
ID設定には書き込み後の再起動は必要ではないが通信速度設定には必要、そしてもし書き込み後に再起動するなら1秒以上待たないといけない。
でもややこしいからROM書き込みをやるときには書き込み命令後に1秒待って再起動。
ということでいいのではないかと思います。
う・・・資料をじっくり読んだ人でないと分からない内容な気がします・・・。
IDや通信速度をいじっている間にどういう風に設定したか分からなくなってしまったサーボが出てきました。
IDと通信速度を合わせてやらないと通信できないので、サーボの中身も見られない。
なんというジレンマでしょう・・・。手動で設定を変えながら何回も送信したら反応してくれて、結局解決したんですが、忘れないうちにサーボ設定値初期化の記述も書かないと危ないなぁと思いました。
というか双葉が設定用のプログラム配布してないんですかね？
まぁ見つからなかったから自分で作ったわけですが。
あっても良い物でしょう。
そういえばほんとにサーボが動くか試しにコマンド送ってみたときにこのソフトを使いました。
http://kondo-robot.com/sys/archives/354 ま、実際これでサーボに命令するのはかなり面倒なんですけどね・・・。
でもシンプルで使いやすいと思いました。</description>
    </item>
    
    <item>
      <title>SH7125でPWM12本生成</title>
      <link>http://blog.syundo.org/post/893/</link>
      <pubDate>Sat, 09 Apr 2011 00:21:56 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/893/</guid>
      <description>SH7125のCMTとMTUを使ってサーボモーターを動かす方法を解説します。
概要 SH7125のMTUにはPWMモードというのがあります。これはその名の通りPWM信号生成に特化されたモードで、MTUに必要な設定をしてやれば割り込みを使わなくても任意の周期、デューティーのPWM信号を作ってくれるというモードです。
でも、今回はこのモードには設定しません。なぜなら、MTUの5チャネルの全部を使っても12本しかPWMを作れないからです（PWMモード2）。
では、どうするのか。CMTに周期、MTUにデューティーを担当させてPWMを作ればいいのです。これなら12本のPWMを作るにしてもMTU3チャネルで実現出来ます。
CMT（コンペアマッチタイマ） ＳＨ7125には2チャネルのＣＭＴがあります。どちらを使ってもいいので、今回はチャネル0を使いましょう。
力尽きた。続きはいつか。
2010/01/09追記
全部書ききる自信がないので、私がPWM信号を16本生成した方法を大雑把に書き殴っておきます。
周期にCMT、デューティーにはMTUを使う。
CMTで周期ごとに割り込みを発生させる。このとき設定するのが、
INTC.IPRJ、CMCSR、CMCOR
また、割り込み発生後は、CMCSRのCMFというフラグをクリアする必要がある。
CMTの割り込みでMTUを立ち上げる。
CMT割り込みがなされる度にMTUの設定をしなくてはならない。
このとき設定するのが、
TRWER、TOER、TCR、TMDR、TIOR
まず最初にTSTRでMTUを停止し、TCNTをゼロクリアして、上記項目を設定し、TGRにデューティーに対応する数値を書き込んでから、TSTRでカウントスタートさせる。
私のプログラムを載せておきます。
#include &amp;#34;iodefine.h&amp;#34;//プロトタイプ宣言 void main(void); void initIo(void); void pwm(void); void initCMT0(void); //サーボの初期値 (1125-1)～(3487.5-1) #define RL0 2305.25f #define RL1 2305.25f #define RL2 2305.25f #define RL3 2305.25f #define RL4 2305.25f #define RL5 2305.25f #define LL0 2305.25f #define LL1 2305.25f #define LL2 2305.25f #define LL3 2305.25f #define LL4 2305.25f #define LL5 2305.25f  //大域変数の設定 int rl[]={RL0,RL1,RL2,RL3,RL4,RL5}; int ll[]={LL0,LL1,LL2,LL3,LL4,LL5}; //関数 void main(void){ //provide clock to cmt  STB.</description>
    </item>
    
    <item>
      <title>非直交軸の逆キネ</title>
      <link>http://blog.syundo.org/post/771/</link>
      <pubDate>Sun, 20 Mar 2011 03:23:56 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/771/</guid>
      <description>Dream Drive! blogさんで非直交軸の逆キネが紹介されていて、あれ？自分も前にこれ計算したよな。でもなんか自分のと違う希ガス。と思っていたのだが・・・面倒で放置していた。
さっき重い腰を上げて過去ログから自分のを見てみると、なんかすごく遠回りな計算をしていた・・・。相変わらずだな。トホホという感じ。
式を変形していくと（第1余弦定理）同じになることを確認し、明らかに計算が速いであろうみっちーさんの方法にプログラムを修正した。感謝です。



サークルが忙しくてロボットやれていないが、お人形型ロボットにはやっぱSHIN-WALKのようなものが適しているのではと思ったり。だって、やっぱ膝曲げ歩行やらせたら不気味だったし。
SHIN-WALK構造で重心が上下動しないように（もちろん支持脚の膝は曲げない）拘束すると歩幅は構造によって決まるし、左右の重心移動は正弦波、前後は余弦波になる（どの時点を基準にするとかあるけど）。これが線形倒立振子モデルの重心軌跡とあまりに乖離すると歩かない（かも）特に前後方向が駄目な気がする。歩き出す前の姿勢が振り子の振幅最大のところになっているのも問題で、遊脚を上げられないのではと思ったりもする。
もしかしたら膝を曲げるにしても膝曲げ量を小さくできるのかな。計算してみないと。もしそうなら、ロール軸だけでなくもピッチ軸も膝曲げ分だけオフセットしておけば一番綺麗な見た目で歩けるのか？それは設計段階から歩容考えないと、ということなんだなー。キビシー
まー何にしてもロボットのコンセプトが定まってないからあれこれ考えたり手を出したりしてなかなか纏まらないんだと思う。でも割り切るのって難しい。</description>
    </item>
    
    <item>
      <title>NINTENDO3DSレビュー</title>
      <link>http://blog.syundo.org/post/892/</link>
      <pubDate>Sat, 26 Feb 2011 16:45:40 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/892/</guid>
      <description>ついにラブプラスが3Dでプレイできる！と発表時から楽しみにしてました(ラブプラス3DSはまだ発売日決まってませんが･･･)。ともかく3Dのゲームがどんなものなのかwktkです。
予約開始日に予約しておいたので発売日にゲットできました。
まぁレビューなんて大層なものではないですが写真など載せて紹介します。

外箱。
傷だらけなのは帰り道に袋が破けて道に投げ出されたから･･･うう･･･

パカり。本体、充電器、充電器用スタンドが入ってます。

本体表。カメラが二つ付いてますね。




SDカード付属です。本体に予め入っています。今時miniSDやmicroSDじゃないのがなんか･･･うん･･･

内面。

SELECT、HOME、STARTのボタンがかなり押しにくいです。プレイ中に押しちゃったら面倒だからなのかもしれませんが、それにしても感触が固いし、どこが凹むのかわかりにくいです。

起動してみます。最初は色々設定をしろと言われます。案内に従って簡単にできます。この写真は3D画像の見え方の確認をしているとこです。wifiの設定も簡単に済みました。

本体にはあらかじめ数種類のゲームソフトが入っています。他にソフトを買わなくても一応3Dを体験できるわけです。

顔シューティングをやってみました。
自分の顔や友達の顔を撮影したものを使ってシューティングゲームにしようっ！というソフトです。
友達を撃ち殺していいんですか･･･？
撃ち殺したい人なんていますか？
あ。
いた。

QBに犠牲になって貰いましょう。

うわｗｗｗ立体化します。きめぇｗｗｗ

自分の部屋を背景にQBが動き回ります。
DS本体をあっちこっちに動かして照準を合わせます。ジャイロセンサで回転を検知してるのでしょうか。角度を出すときの積分誤差をどうやって解消しているのか気になります。まぁそこらへんはWiiなんかで培った技術があるでしょうから任天堂のお手のものって感じなんでしょう。

QB「撃ち落とせなかったら契約してね」
撮影にかまけてたら大変なことに･･･。しっしっ！あっち行け！
あ、画像を見ても分からないとは思いますが、当然、今までの場面はすべて肉眼で見ると3D映像で見えます。
うーんなんか不思議な感じですね。3Dテレビも見たことがなかったので、3D初体験でした。
目が疲れる、という事前情報がありましたが、それは視線を画面の正面に固定しないといけないからではないかと感じました。
ちょっと横から覗くと、ぼやけて立体になりません。
あとやっぱり画面がちょっと小さいかな。原理的に大きくできないものなんでしょうか？よくわかりませんが。将来3DSLLとか出たらかなり凹みますね。いやまぁ出るでしょうけど。
ソフトは戦国無双 Chronicleを買いましたが、まだアマゾンから届いていません。
それをやってみたら3Dすげぇ！ってなるかもしれませんが、今のところ立体視できることにそれほど感動は憶えませんでした。やっぱラブプラスを･･･</description>
    </item>
    
    <item>
      <title>掲載場所移動のおしらせ</title>
      <link>http://blog.syundo.org/post/770/</link>
      <pubDate>Sun, 30 Jan 2011 01:33:42 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/770/</guid>
      <description>現在、この技術情報にあるいくつかのページを他のブログに移し替える作業をしています。
現状では、RAMデバッグ(sh7125)、HEW使う(sh-2)をすでに移し替えました。
それぞれ以下のURLです。
マイコンプラス：RAMデバッグ(sh7125)
マイコンプラス：【初心者のための】ルネサスHEWの使い方【チェック】&amp;nbsp;
読みやすい構成に変わりましたし、大部分加筆しています。
ここにある他の文章も移し替える予定です。
ぜひブックマーク登録をお願いします。</description>
    </item>
    
    <item>
      <title>正直舐めてた「X-RHex」</title>
      <link>http://blog.syundo.org/post/891/</link>
      <pubDate>Sun, 30 Jan 2011 00:53:06 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/891/</guid>
      <description>先日、ペンシルベニア大学の「X-RHex」について記事を書いたが6足ロボット「X-RHex」
正直なところ、
「まぁちょっと思いつけば作れるんじゃない？こんなくらい」などと思っていた（爆死
しかし私はとんでもない動画をみつけてしまった。
もはやロボットにしておくにはもったいない愛くるロボット「X-RHex」が更なる進化した姿を披露
 これはさまざまなバージョンのX-RHexの動画をまとめたもので、X-RHexの開発記録である。
まず第一に、岩場や草原などの不整地を走行するには、普通のタイヤより圧倒的に速い！ということを再認識した。この一見簡単なように見える脚の構造自体がものすごく偉大な発見なのだ！！
そして動画の中でカメラを使って色を認識してボールを追いかけたり、ライントレースをしているところがある。非常に完成度の高いシステムなのである！！
最後に、最も驚いたところは、私が2足ロボット好きなこともあるが、3:00あたりのbiped mode（2足歩行モード）である！！なんともちょこちょこと安定して歩く（むしろ走っている）じゃないか！！
本当にアメリカの研究者はこの手の制御がうまい！！それになによりもこんなことやってる暇があるのがすごいのではないか？ちょっと2本脚で歩かせてみようぜ！ってできるものなのか！？
いやぁ。すごい。
本当に驚いたんですよ。見つけてよかった。</description>
    </item>
    
    <item>
      <title>ルネサスHEWの使い方</title>
      <link>http://blog.syundo.org/post/890/</link>
      <pubDate>Fri, 28 Jan 2011 14:14:35 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/890/</guid>
      <description>目次
・HEWとは
・ワークスペース、プロジェクトの新規作成
・HEWの生成するファイル群
・メイン関数のありか
・IOレジスタを操作する！！
・割り込み処理はどこに？
・math.hが使えない！？
・スタック領域を変える
・最適化オプション
・ルネサスコンパイラ固有の関数など
・割り込みが動かない！？
・プロジェクトの複製
・プロジェクトの追加
HEWとは 　HEW（High-performance Embedded Workshop）はルネサスが提供しているエディタ、コンパイラ、エミュレータといったツールを、使いやすくまとめてくれている統合開発環境です。
コンパイラ、リンカなど、各工程ごとに用意された複数のツールを、 あたかも多機能な一つのツールであるかのように 操作できます。
　HEWをインストールすればコンパイラもリンカも入っているので、HEWがあればルネサスエレクトロニクスのマイコンの開発はできるということになります。
プロジェクトの新規作成 　プロジェクトの作成についてはこのサイト↓に詳しく解説されています。
HEWでAKI-H8/3048Fのプログラミング
　色々な設定のうち、プロジェクト生成後に変更できないのはCPUの種類と、「Use Heap Memory」、「Use I/O Library」にチェックを入れるかどうかというところです。メモリ管理ライブラリや入出力関連のライブラリが要らない場合はいいです。しかしライブラリを生成しておいても後でプロジェクトから外すこともできますからチェックを入れてもいいかもしれません。
HEWの生成するファイル群 　HEWは初期設定が終わった段階で、ターゲットに合わせたファイルを自動的に生成します。以下のようなファイルです。
　初期設定の時にチェックマークを付けなければ生成されないものもあります。sbrk.c、sbrk.h、lowlvl.src、lowsrc.c、lowsrc.hは必ずしも要りません。
dbsct.c･･･_初期値がある変数、初期値がない変数のセクション初期化テーブルの設定。 ○○○.c（○○○はプロジェクト名）･･･メイン関数がある。 intprg.c･･･割り込み関数がある。 resetprg.c･･･パワーオンリセット時の処理が記述してある。 sbrk.c･･･メモリ管理ライブラリの低水準インターフェースルーチンなど。「Use Heap Memory」にチェックを入れると生成される。 sbrk.h lowlvl.src･･･入出力関連の低水準インターフェースルーチン。「Use I/O Library」にチェックを入れると生成される。 lowsrc.c lowsrc.h vecttble.c･･･ベクタテーブルがある。 vect.h･･･vecttble.cにある関数のプロトタイプ宣言 stacksct.h･･･スタックサイズが記述してある。ここは直接触らない。 typedefine.h･･･typedefを使って変数の型に別の名前をつけている。他のファイルでインクルードされて使われている。 iodefine.h･･･IO操作用の構造体などが定義されている。
 　初心者の方は特にファイルの細部については気にしなくていいと思います。そのためのHEWなんですから。
でも一応、詳細はここにあります↓
http://documentation.renesas.com/jpn/products/tool/rjj10j0929_hew_s.pdf
メイン関数のありか 　HEWでプログラミングするとき、メイン関数はどこに書けばいいのでしょう？実はメイン関数は○○○.c（○○○はプロジェクト名）に自動生成で用意されています。では中身を見てみましょう。
○○○.c（○○○はプロジェクト名）を見ると、以下のようになっています。
//○○○.c //#include &#34;typedefine.h&#34; #ifdef __cplusplus //#include  // Remove the comment when you use ios //_SINT ios_base::Init::init_cnt; // Remove the comment when you use ios #endif void main(void); #ifdef __cplusplus extern &#34;</description>
    </item>
    
    <item>
      <title>6足ロボット「X-RHex」</title>
      <link>http://blog.syundo.org/post/887/</link>
      <pubDate>Tue, 25 Jan 2011 21:37:04 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/887/</guid>
      <description>GetRoboBlogさんの記事を見た感想。
足が両側で2＋1本ずつ動く6足ロボット「X-RHex」
 ペンシルベニア大学のロボットらしい。
動画の1:00のあたりで全部の足が浮いている瞬間がカメラに捕らえられている。
特別な制御をしているみたいでもないのに、走行状態になっているんだー。
どうもシミュレーションはしてあるみたいだけど。
脚の柔軟さがポイントなのかも。
二足ロボットにしても脚の構造自体が非常に重要みたいだし↓
日本のアスリート・ロボット、世界を駆け巡る
 これもまだ何も制御してないのに人間の走りそのものだよなぁ。
やっぱ構造は重要。</description>
    </item>
    
    <item>
      <title>2足歩行ロボットキット一覧</title>
      <link>http://blog.syundo.org/post/884/</link>
      <pubDate>Sun, 23 Jan 2011 23:57:02 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/884/</guid>
      <description>ホビー向け2足歩行ロボットキットを各社まとめてみました(2011/2/22現在)
今は販売していないものには(終)をつけています。市場に全く出回っていないかはわからないですが。
一応大手の販売元を網羅してますが、細かいことを言えばまだ他に2足歩行ロボットキットは存在する気がします。気づいたら追加します。
近藤科学
KHR-1(終)
KHR-2HV
KHR-1HV
KHR-3HV
Vstone
Robovie-M ver.3(終)
Robovie-MS(終)
RB2000
RB300
Robovie-i
Robovie-X
Robovie-nano
京商
MANOI PF01
MANOI AT01
ハイテックマルチプレックスジャパン
ROBONOVA-Ⅰ
姫路ソフトワークス
JO-JERO
STD-ZERO
HPIジャパン
GR-001
杉浦機械設計事務所
BIOLOID PREMIUM Kit
ベストテクノロジー
BTH050:FREEDOM jr.III Basic Kit
BTH051:FREEDOM jr.III Complete Kit
BTH060:ROBOBUILDER
アイ・ビー
Pirkus・R　Type-01
Pirkus・R　Type-01 DX
エスケイパン
GogicFive
ビーエルオートテック
Varibo(終)
エルエルパレス
Neebo
共立電子産業　ワンダーキット
Weird-7(終)
プチロボ(終)
プチロボ改
プチロボMS5
プチロボX
浅草ギ研
AT-WALKER
Remo HKP(HumanoidKit/P)
日本遠隔制御
RB1000(終)
RB2000(Vstoneへ移管)
RB300(Vstoneへ移管)</description>
    </item>
    
    <item>
      <title>距離センサ</title>
      <link>http://blog.syundo.org/post/843/</link>
      <pubDate>Fri, 21 Jan 2011 19:33:25 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/843/</guid>
      <description>・距離センサ 赤外線を使った近接センサやPSD距離センサ、超音波センサなどがある。
近接センサ ほぼ触れるかどうかという近距離の物体の存在を検知する。
PSD距離センサ 10～80cm程度の距離を測る。距離に応じた電圧を出力する。
超音波センサ 音波を発して、それが反射して帰ってくるまでの時間を計って距離を測る。基本的に時間を計る処理は自前でする必要がある。
・距離センサリンク 近接センサー　AS-PROX
シャープ測距モジュール　ＧＰ２Ｙ０Ａ２１ＹＫ
超音波センサ（送受信セット）</description>
    </item>
    
    <item>
      <title>ジャイロセンサ</title>
      <link>http://blog.syundo.org/post/882/</link>
      <pubDate>Fri, 21 Jan 2011 18:39:41 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/882/</guid>
      <description>ジャイロセンサは計測対象の動き、特に回転方向の動きを検出するのに用いられるセンサです。一昔前は‘ジャイロ’と言われればコマのジャイロ効果を用いた機器、だと考えれば良かったのですが、近年ではMEMS技術の発達などにより小型化が進み、他の方式のジャイロが主流になりつつあります。
・ジャイロセンサの測定原理 ジャイロセンサとは角速度を検知するセンサである。
一般にジャイロセンサは角速度に比例した電圧を出力端子から出力する。
しかし、ホビーロボット界ではRCジャイロのことも単にジャイロと呼ぶことがある。
RCジャイロは入力されたパルス幅に検知した角速度に比例した幅を加減して出力するものである。
RCジャイロで角速度を検知するにはRCジャイロに特定のパルス幅の信号を入力し、出力信号ともとの信号の差を取ればよい。
RCジャイロでない普通のジャイロセンサでは、角速度に応じた電圧が出力されるわけだが、角速度に対する電圧の変化の割合、すなわち感度はデータシートを読めば分かる。
・使い方 このジャイロセンサの使い方として主に２つ考えられる。
１．「角速度をゲインを通してフィードバックする」
電圧を読み取ってそれに適当な値を乗じた物をサーボ信号値に加える。
２．「積分して角度を求める」
出力電圧を読み取って、感度を参考にして、角速度を正確に求める。それを一定周期の割り込みで積分していけば角度が求まる。
その場合、温度ドリフトや積分誤差が問題になってくる。
・ジャイロセンサリンク RCジャイロ
ＧＷＳジャイロユニット
ジャイロ
AE-GYRO-SMD
ＩＤＧ－３００
司21:HS-EG3</description>
    </item>
    
    <item>
      <title>加速度センサ</title>
      <link>http://blog.syundo.org/post/881/</link>
      <pubDate>Wed, 19 Jan 2011 15:44:34 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/881/</guid>
      <description>加速度センサについて
・加速度センサ 加速度センサは加速度を検知するセンサである。
検知した加速度に対応した電圧を出力したり、1バイト程度のデジタルデータを出力するものなどがある。
加速度センサデバイスには1軸～3軸まで他種類ある。
・使いどころ １．｢衝撃を検知する｣
なんらかの衝撃を与えられると、速度が変化して加速度が発生する。これを検知できる。
人間の場合、座っているときや、走っているときに誰かにぶつかられると衝撃を感じて、受け身の体勢に入ったりする。これをロボットにやらせることができる。
２．｢ロボットの傾斜角度を検知できる」
地球上の物体は常に重力加速度で地面方向に移動しようとする。加速度センサの値を見ると、実はこの重力による加速度も検知している。重力加速度はいつでも物体に働き、常に地面方向に向いているから、ロボットの姿勢が地面に対して(重力方向に対して)何度傾いているかが分かる。
加速度センサは以下のサイトで入手しやすい。
・加速度センサリンク ３軸加速度センサモジュール　ＫＸＭ５２－１０５０
加速度とは速度の時間変化率のこと。
速度が単位時間あたり(例えば1秒)の距離の変化を表しているのと同じように、加速度は単位時間あたりの速度の変化を表している。
速度の例：
1秒の間に、ある物体の位置が5ｍ変化する→5m/s(5メートル毎秒)
加速度の例：
1秒の間に、ある物体の速度が3m/sだけ変化する→3m/ss(3メートル毎秒毎秒)</description>
    </item>
    
    <item>
      <title>ロボットの構成要素</title>
      <link>http://blog.syundo.org/post/880/</link>
      <pubDate>Wed, 19 Jan 2011 14:51:30 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/880/</guid>
      <description>ロボットは主に以下のように構成されている。
センサ
アクチュエータ、骨格
コントローラ
電源
その他
・センサ
センサは人間で言うところの感覚器官である。姿勢のバランスを保ったり、音声認識させるためのものである。ジャイロセンサ、加速度センサ、地磁気センサ、圧力センサ、距離センサ、軸力センサ、タッチセンサetc.
・アクチュエータ
人間で言うところの筋肉である。ロボットの動作の源である。モーター、人工筋肉etc.
・骨格(フレーム)
アクチュエータと他の要素を結合するためのものである。アルミやその他合金、プラ、カーボンなどで作られる。
・コントローラ
人間で言うところの脳である。ロボットを制御するためのコンピュータ。
マイコンやPCが使われる。
・電源
電源がなければロボットは動かない。
家庭用の交流電源からACアダプタなどを用いてロボットの電源としているのものや、ロボットにバッテリーを積み込んでいるものがある。
・その他
アクチュエータとは違う方法でロボットの状態を外部に伝えるもの。
例えば、LCDディスプレイや、スピーカー、LEDなどである。</description>
    </item>
    
    <item>
      <title>RAMデバッグ(sh7125)</title>
      <link>http://blog.syundo.org/post/877/</link>
      <pubDate>Wed, 19 Jan 2011 00:00:27 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/877/</guid>
      <description>RAMデバッグの方法を解説したいと思います。
更新履歴
2009　8/9ひとまず完成
2009　8/10非公開にした後復活
2010　12/26一部修正
2011　1/18公開場所変更
１．はじめに ここでは、開発環境としてHEW4を使っていることを前提とします。
私の手元にSTK-7125があるので具体的なことはSTK-7125について書きます。
ルネサスのモニタプログラムとHtermを使ってRAMデバッグ環境を整えていきましょう。
２．なぜRAMデバッグするのか マイコンのROMというものには実は書き込み回数に制限があります。制限というのは具体的には、書き込み回数100回までしか動作は保証しかねるよ、というようなことです。10万回書き込めるようなマイコンもあります。しかしそうでないマイコンの場合は困ってしまいます。そんなときにRAMにプログラムを書き込むと便利です。RAMは書き込み回数には制限が無いので、安心してプログラムを書き換えられます。
RAMに書き込むといっても、マイコンは普通RAMだけを使って動作することはしません。RAMに書き込んでプログラムを実行させるためには何か他に手助けが要るわけです。その手助けをするものがエミュレーターだったりモニタプログラムだったりします。ここではモニタプログラムを使います。
３．モニタプログラムとは モニタプログラムとは、マイコンに組み込まれて、ユーザープログラム（あなたが実行したいプログラム）をRAM上で実行できるようにしてくれるプログラムです。
このような組み込み型モニタの利点はマイコンのほかにエミュレータと呼ばれるデバッグを行うための機器を必要としないところです。もちろんエミュレータとは機能的には違うところもあるけど、とりあえず気にしなくていいです。
４．ソフトを揃えよう 必要なものをダウンロードしていきましょう。
ルネサステクノロジに行って、右上の検索BOXから「Hterm」と検索してください。
四つぐらい候補が出てきます。その中から自分のマイコン向けのページを選んでください。
そこで自分のマイコン向けのモニタプログラムとHtermをダウンロードします。自己解凍ファイルなので2つとも実行して好きなとこに解凍してください。解凍先にhtermというフォルダと、sh2というフォルダが出来ています（SHｰ2シリーズを選んだ場合）。
５．モニタプログラムの設定をしよう フォルダsh2の中のmonitorという名前のHEWWorkSpaceFileを開いてください。プロジェクトの中にmonitor.cとmonitor.sub、そしてdependenciesには7040s.hというファイルがあります。
まずmonitor.cを編集しましょう
/*********************************************************/ /* SH7600 Monitor Program Ver. 2.0A */ /* Copyright (C) 2003 Renesas Technology Corp. */ /*********************************************************/ #include &#34;7125s.h&#34;//① /* */ /*********************************************************/ /* User Initialize Module */ /* Input PR 0(0) Byte */ /*********************************************************/ #pragma noregsave(INITIALIZE) /* Non Register Save */ void INITIALIZE(void) /* */ { /* */ CPG.</description>
    </item>
    
    <item>
      <title>うっうー</title>
      <link>http://blog.syundo.org/post/769/</link>
      <pubDate>Mon, 17 Jan 2011 02:22:57 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/769/</guid>
      <description>・ちょっと間を空けるとすぐに興味が無くなってしまうから困る。
モーションプラス及び村田ジャイロの進展はなし。
・V-Sido・・・ニコニコで話題になったユニコーンガンダムの人のソフトがKinectに対応したらしい。個人レベルであそこまでやってのける氏の力量には愕然とするしかない。
・実家に帰ったとき、2006年のロボコンマガジンを読んだが、マイコンの使われ方や、ロボットの構成について今と殆ど変化がないように思われた。
しかし着実にPCは小型化してスマートフォンも普及してきている。もう趣味レベルでもマイコンだけでロボットを動かさなくても良くなってくる。タブレットPCやスマホの台頭は今年、組み込み趣味に大きな進歩をもたらすのではないかと思う。
・いまのアナスタシアプロジェクト（開発中のロボット群のコードネームｗ）には、吉野さんの60日でできる・・・のサンプルプログラムをほぼ流用させてもらっている。でも自分で作ったもので無いので一度理解しても少し間を空けるとすぐに理解不能になってしまう。これは時間の無駄なので主要なところを図にまとめてみた。
無いよりましな感じ。
いつか自分で全部書き直した方が良いと思う。想定外の使い方をすることで無駄が生じている・・・ような気がする・・・。</description>
    </item>
    
    <item>
      <title>あけましておめでとうございます2011</title>
      <link>http://blog.syundo.org/post/768/</link>
      <pubDate>Tue, 04 Jan 2011 22:49:17 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/768/</guid>
      <description>あけましておめでとうございます。今年も宜しくお願いいたします。
実家より帰還しました。
また成人式のときに帰ります。岐阜は近いなー。
ところで、タイミングが良すぎます。良すぎるのです！
実家にwiiが導入されてました。時期的にかなり乗り遅れているのでは・・・とも思えますが、去年の11月にwiiリモコンプラスが出たということを考えるとかなりグッジョブかもです。
ちょうどWiiResortもあったので、ジャイロの働き具合を確認してきました。wiiリモコンプラスのジャイロ（2軸+1軸）はモーションプラスのものと同じらしいのです。
リモコンをかなりゆっくり動かしてもちゃんと追従してきます。
初期化に10秒ほどかけています。ジャイロの原点だしだけでは無いと思いますが。（机の上に置けと言われる）
どのようにドリフトをキャンセルして積分しているのか気になるところですが、それはわからないんですよねー。しょうがない。
さっそく名古屋に戻ってから、Arduinoで読み取ってみました。
 出回っていたサンプルをそのまま使えました。Arduinoの種類が変わっても全く同じものが使えるというのはすごく新鮮。面白いものを手に入れたなー。
ただ、wiiモーションプラスからの6バイトのデータについて自分がいまひとつまだ理解できていないので（解析はもうされてる）、角度を出すのはちょっと時間かかるかもしれないです。
あとは村田ジャイロもいじりたいなー。
わんだほー2月･･･</description>
    </item>
    
    <item>
      <title>OH～波、ばんばばんばん</title>
      <link>http://blog.syundo.org/post/767/</link>
      <pubDate>Wed, 29 Dec 2010 01:05:08 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/767/</guid>
      <description>茶色いバカンスよ
というわけで明日、というか今日帰省します。
ブログ開設以来の連続更新記録が止まってしまうのが残念。
今日は性懲りもなくジャイロ試験しました。
加工したものの設計ミスや変更で使えなくなったものたちを貼り合わせてサーボとジャイロセンサを合体しました。
 0度から-90度→0度に回した様子↓
 うわぁ。これはひどい。帰りの感度が行きの2倍になってる！？
ともあれなんか突破口は見えそう。やってみてよかった。
Arduinoやwiiモーションプラスも含めて来年に持ち越しだなー。残念。
あ、そういえば忘れてたけど前にこんなのも買いました。
 http://www.aitendo.co.jp/product/2456
USB→TTL変換のやつ。普通に動きました。カバー付いてないから差し込みにくいです。
それでは良いお年を！</description>
    </item>
    
    <item>
      <title>ミニミニミクロ電子・・・</title>
      <link>http://blog.syundo.org/post/766/</link>
      <pubDate>Tue, 28 Dec 2010 01:33:52 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/766/</guid>
      <description>sh7125、RAMが小さくてデバッグしにくい！
ちょっと凝ったことやろうとしても試せない！
タイニー君だから増設もできない！
ううううう！
ゼロ点電圧付近で積分しない幅を作ってみた。静止状態では値がぶれなくなったが、昨日までの問題は解決せず。
ゼロ点よりー９０度まわしてとめた様子↓
 プラスに回してもマイナスに回しても最終的には＋４程度に収束していくみたい。
なんだろーなんだろー。
しかし微小変異（系列１）を足し合わせていくと系列２のグラフになるのか？ぱっと見そうは見えないけど。そうだとしたら（そうなんだけど）とてつもなく微妙で繊細なことをやろうとしてるんだなー。
埒が明かないからサーボと組み合わせたものを作ってしっかり計測してみるかなー。
それかひとまず放置してArduino+wiiモーションプラスに戻ろうかなー。
それならUSBケーブル！寒いけど！買いに行こうよ！</description>
    </item>
    
    <item>
      <title>溢れてくるのはこの気持ち</title>
      <link>http://blog.syundo.org/post/765/</link>
      <pubDate>Mon, 27 Dec 2010 01:58:46 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/765/</guid>
      <description>まだまだ世の中には分からないことがいっぱいあるなー（笑）という気持ち。そして気怠さ。
ジャイロのドリフトってのは思いのほかもの凄かった。
何も動かしていないのに値が増え続けるときの焦燥感・・・。
補正してみても、時間経ってからもう一回やってみると殆ど効かなくなってくる。
しかし角度にそれほど精度はいらないから、どこかで桁を落としてやるといいのかも。でもそうすると積分値がずれてくるだろう。これがいたちごっこか。
温度ドリフトはまだいいが、せめて相対角度くらいちゃんと出したいものである。
プログラムに不備があるのかわからないが、やはりセンサを静止させると原点からの角度によらず、原点近傍の値に収束していってしまう。
原点から90°回して静止した様子↓

90°回したのに90にならないのは係数がおかしいからだろうからまぁいいが（納得できてないけど）、そのまま静止させてるのにどんどん値が0に向かって減少してしまう。
角速度と合わせたグラフ。別の試行↓
 静止させるとゼロ点電圧よりも出力電圧が低くなっていて減少するという仮定は温度ドリフトで角度が増加していく傾向とは逆だからおかしい。そもそも減少率がかなり大きく、センサの特性でこんなになることはないだろう。
単純に積分してるだけなのになぁ。ハイパスフィルタとかローパスフィルタのせいなのだろうか？そのへんよく知らない。調べるかー。
台形積分は温度ドリフトの影響をもろに受けて難しいのでひとまず保留した。
ArduinoのためのUSBケーブルは外が寒すぎて買いに行けない・・・。おお寒い。寒いよー。</description>
    </item>
    
    <item>
      <title>ぐるぐる使い</title>
      <link>http://blog.syundo.org/post/764/</link>
      <pubDate>Sun, 26 Dec 2010 03:48:40 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/764/</guid>
      <description>Arduinoが届くまで暇だったので、村田のジャイロスター搭載ボードAE-GYRO-SMDで角速度積分による動的角度計測をやってみようとした。
wiiモーションプラスいじる前にこれをやってみるべきだったんですがねホントは・・・。
しかしこれが意外にも手強く、静止状態ではそれが原点でなくても角度が０となってしまうよくわからない挙動になってしまった。
#define K_GYR&amp;nbsp; (5*1000/1023)/0.67*10.1
#define D_T&amp;nbsp; 0.01
void main(void){
&amp;nbsp; &amp;nbsp; int i;
&amp;nbsp; &amp;nbsp; int sum=0; &amp;nbsp; &amp;nbsp; float angle=0,delta=0;
&amp;nbsp; &amp;nbsp; int adc0,adc1;
&amp;nbsp; &amp;nbsp; for(i=0;i&amp;lt;10;i++){
&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; sum+=Get_ADC();
&amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; adc0=sum/10;
&amp;nbsp; &amp;nbsp; //無限ループ
&amp;nbsp; &amp;nbsp; while(1){
&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; adc1 = Get_ADC();
&amp;nbsp; &amp;nbsp; }
}
//CMT0割り込み関数
void CMT0_interrupt(void){
&amp;nbsp; &amp;nbsp; CMT0.CMCSR.BIT.CMF=0;
&amp;nbsp; &amp;nbsp; delta = (adc1-adc0)*K_GYR;
&amp;nbsp; &amp;nbsp; angle += delta*D_T;</description>
    </item>
    
    <item>
      <title>山河あり</title>
      <link>http://blog.syundo.org/post/763/</link>
      <pubDate>Fri, 24 Dec 2010 00:26:30 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/763/</guid>
      <description>PIC12F683、タイマ比較レジスタ値調整してPCと通信はできるようになった。
早速見てみたが、wiiモーションプラスにデータを100kbpsで送っても反応なし、ACKも来てない事がわかった。
もう戦略的撤退をするべきか。どうにもならない。
そこでふいにスイッチサイエンスのホームページを見る。
あ、送料無料じゃん。ArduinoUNOをポチリ。
これでWiiRemote界隈で流行ってるArduinoのサンプルスケッチを試せる。
何やってるんだろ
何やってるんだろ
これでwiiモーションプラス関連に1万五千円程度つぎ込んだことになる。
これもう普通に高性能なジャイロ単体で買ったほうが良かったんじゃない？
家庭教師のバイト今月で無くなるんじゃないの？
＿＿＿
／　＼
／ノ　＼　u. ＼　！？
／ （●） （●） ＼　|　（__人__）　u. |　＼　u.｀ ⌒´　／
ノ　＼
／´　ヽ</description>
    </item>
    
    <item>
      <title>your best clock</title>
      <link>http://blog.syundo.org/post/762/</link>
      <pubDate>Thu, 23 Dec 2010 03:27:26 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/762/</guid>
      <description>セラロックを外付けしたらI2Cの速度が100kbps出るようになった。
配線が長いと良くないっていうんでいくつかのサイトを参考にブレッドボード向けの形にした。
  最後にノイズ出てるけどACK受信するところだからだった。
I2Cが速くなったのはいいけど、今度はソフトUSARTの速度が合わなくなってきた。
調整が要りますな・・・。また明日・・・。</description>
    </item>
    
    <item>
      <title>最近怠けすぎ</title>
      <link>http://blog.syundo.org/post/761/</link>
      <pubDate>Tue, 21 Dec 2010 23:06:04 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/761/</guid>
      <description>もうすぐ冬休みで休講がなんか多いし、もうやり放題。駄目人間になっているな・・・。
それはともかくwiiモーションプラス。
どうやらpic12f863の内蔵クロックではIC2の通信速度が50kbpsくらいしかいかないから発振子外付けしないといけないみたい。
Wiiリモコン系のI2Cは一応、高速I2C(400kbps)だと分かっているみたいで、できるなら400kbpsで通信したほうがいい。
でも、こっち側がマスターの場合はそれほどシビアでなく、標準の100kbpsでも反応が確認されている（らしい）。
外付けクロックの周波数を上げるにも限度があって、ソフトI2Cの通信は100kbpsくらいにしかならないから、もしセラロック買ってきて付けても駄目だったらひとまずあきらめようかなと。
ところでロボゼロ、全国販売決まってたんだｰ！！
やったー。最初にサーボが付くのは2月22日発売のやつだと思う。来年のお楽しみだなーwktk</description>
    </item>
    
    <item>
      <title>この気持ちを今あえて言葉にするなら･･･</title>
      <link>http://blog.syundo.org/post/760/</link>
      <pubDate>Tue, 21 Dec 2010 02:16:37 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/760/</guid>
      <description>特殊ドライバーセットが届いたのでWiiモーションプラスを分解した。
ネジ二つ外すために3000円のドライバーセット買うのってかなりお馬鹿ではないか。
  PICマイコンでソフトUSARTとI2Cを実装した。ある書籍のサンプルプログラムをごっそり借用したのだが、まさかタイマがスタートされていなかったとは。動作確認してあるものじゃないのかね・・・。（ちゃんと設定してあった・・・今となっては何が悪かったのか分からない・・・）まぁでも怠けずに自分でデータシートを確認しておけばあんな悩むことは無かったな。
  ともかく下地は出来たのだが、データを送っても案の定wiiモーションプラスからの反応が無いようである。うーん・・・。
周波数が合ってない？I2Cって周波数にうるさいものでないような感じだけどよく分からない。
Wiiモーションプラスの出力ピンを間違えている？Arduinoと繋いでるのを紹介しているサイトの通りにしてるのだが、どうも外国のサイトの情報とは違うような気がしなくもない。よく分からない。
配線が長すぎる？いや、どうだろう・・・。
うまくいくといいな。
使われているジャイロのスペック値がはっきりわからないし、ある一定の角速度以上になるとWiiモーションプラスの測定レンジが変わる(計算式はどうもあやふや)らしいから、角度の測定にはもしかしたら使えないかも。今更ですけど。見て見ぬフリをしていましたけど。でも最近これにはまっていていつでもどこでも気になるから当然続ける。
あとは2ヶ月放置したらまったく手に負えなくなってしまったロボのモーション再生プログラムとかをなんとかしないと。
それと足カバー。</description>
    </item>
    
    <item>
      <title>ドールロボ外装製作に関する記事</title>
      <link>http://blog.syundo.org/post/20101218-vacuum-forming/</link>
      <pubDate>Sat, 18 Dec 2010 00:44:57 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/20101218-vacuum-forming/</guid>
      <description> ドールの原型を作るところから、ドールロボの外装を作ることについての記事をまとめました。
バキュームフォームに使ってる道具とかコツとかを書いた記事は無かったかも&amp;hellip;。 書こうと思っていたんですが&amp;hellip;まぁ他のサイトでも解説されていることなので、そちらに譲ります。
原型製作過程 (分解されたドール画像多数のため注意)  お人形制作過程 お人形制作過程2 お人形制作過程3 お人形制作過程4 お人形制作過程5  バキュームフォームした外装について  外装被せてみた 人形みたいな写真とかあるから注意  </description>
    </item>
    
    <item>
      <title>記者の善永と申します</title>
      <link>http://blog.syundo.org/post/759/</link>
      <pubDate>Fri, 17 Dec 2010 00:14:15 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/759/</guid>
      <description>wiiモーションプラス届いた。
早速分解しようとしたけどネジが特殊。無理矢理やってなんかペキっという基盤にダメージをあたえたっぽい音がしたところで（大丈夫だよねー？）手を止め、素直にドライバーを注文した。前から欲しいと思っていたし！いいもん！
ああ。中間テスト終わった勢いで徹夜で開発する計画は儚くも頓挫。
読み取りはPICマイコンでやろうと思い、PIC12F683とPICkit2を買ってきた。
8ピンでちっこくて可愛くていとおしい。
初めてのPIC、ついにアセンブラに挑戦か？と思うも、なんか割とコンパイラも揃ってるみたいで、自分ではもうやらないだろうなと思う。PICのうまみを消しているとも言えるけど・・・。容量が足りるのかだけは心配。
I2CモジュールもUSARTさえもないからソフトで実装しなくちゃいけない。
そこは8ピンPICマイコンの使い方がよくわかる本
に詳しく書いてあるっぽかったから（立ち読みです）買おうかな。大学生協の割引率が上がる日を狙って・・・なんかこう勢いづいてるのはテスト前によくある、他のことを勉強したくなる衝動によるものだった気がする。
その衝動に関係してだけども、半年前くらいに買ってたITORONの解説本を読み直し・・・いや読み始めたりした。
製作ガイドの続編であるROBO-ONEで進化する・・・を読んでHOS入れてみたいなと思ったから。interfaceのSH-2A基盤に関する記事でも使ったりしてるしまた興味が湧いてきた。
前だったら新しいことに挑戦すると、まだロボット出来てもいないのに・・・っていう気分になったけど一応未完成ながら船場ロボコンにエントリーしたことで(パレードですけど！ロボコンマガジンでは一切触れられてませんでしたけど。全くかまいませんけど。)気が楽になったかも。
ソフトばっかじゃなくてロボット本体もいじっていかないといけないとは思うけども。
腕のサーボとして使いたいRS306MDが広島限定の週間ロボゼロに低価格で付属しているらしい。どう頑張ってもロボゼロは買えないんだけど、サーボ定価で買うには踏ん切りがつかない。びんぼーしょー。
鳥人間もがんばるよ！</description>
    </item>
    
    <item>
      <title>角度計測</title>
      <link>http://blog.syundo.org/post/758/</link>
      <pubDate>Sun, 12 Dec 2010 23:53:39 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/758/</guid>
      <description>またまた久しぶりの更新。
youubeでとある動画を見つけて、ジャイロセンサの出力を積分して動的な姿勢角を得る方法が思っていた以上に使えるのではないかと思った。
ジャイロセンサで角度を得ることは最近、普通の会社員の日記の人のところで知っていたが（ロボット制御では割とよくやることなのか？）、ピッチ軸、ロール軸の動的角度を得られてもとても使いこなせないなと思っていた。（極座標→直交座標とか考えるだけでうう・・・。）
しかし、ヨー軸の動的角度は二足歩行ロボットを真っ直ぐ歩かせるために是非とも利用してみたいものではないか？この手の目的で地磁気センサやGPSなんかを検討したりしなかったりしたが、これはもしかしたら使えるかも。
問題はジャイロセンサの温度ドリフトや、積分回数を重ねるごとに累積する誤差。
ヨー軸方向を加速度センサで補償することはできないし、コンパスモジュールで補ったらよけいずれそう。
秋月の基盤で村田製作所のジャイロスターを使った物は、何も工夫しなければ左右に90°ずつ振るたびに3°くらいのずれが出てくるそうな。手元にあるAE-GYRO-SMDで自分でやってみれば早いのだが（汗
このずれを解消するのはなかなか難儀なものらしく・・・調べると先人達の苦労の跡が・・・。
まぁ結局、人間が操縦するわけだからある程度誤差が出てきても歩行を止める度にゼロ点リセットすればそんなに気にならないのかもしれない。どうだろう。
そしてWiiモーションプラスに使われているジャイロセンサがなかなかにドリフトが出にくく良い感じだという情報も発見。定価1500円で三軸のジャイロがついてくるなんて良いんじゃないかこれ。と思って条件反射的にポチッとな。在庫少ないらしく一個しか買わせてもらえなかった。
ただ、このWiiモーションプラス、調べても作例が何故かArduino使った物ばっかり・・・。モーションプラスとはI2Cで通信しなきゃいけないそうだが、それが理由なのかよくわからない。
あ、そしてよく考えたらSH7125ってI2Cモジュール無かった。どうしよう。
I/Oポートを直接叩いて通信してたりする作例を発見・・・。うっほ・・・。
村田製作ジャイロとwiiモーションプラス、どっちが近道なのかはよくわからない。（でも多分モーションプラスはタンスの肥やしに・・・）
でも当分のあいだ、これに熱中できそうである。
ほかにやるべき事がたくさんあるはずなのに。
　／￣￣￣＼
／　─　─ ＼
／　&amp;lt;○&amp;gt; &amp;lt;○&amp;gt;　＼.
|　（__人__）　|　ぽけー
＼　｀ ⌒´　／
／ ＼</description>
    </item>
    
    <item>
      <title>縮小粘土物語</title>
      <link>http://blog.syundo.org/post/916/</link>
      <pubDate>Sun, 28 Nov 2010 23:33:19 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/916/</guid>
      <description>Mr.クレイ、乾くと縮む縮む！
盛って、乾かして、取れたら瞬接を繰り返す。 うーむ根気の要るもんだなぁ。 正直これでフィギュア一体出来るとかならいいんだが、足カバーか･･･。
そして、サフを吹くと表面が毛羽立ちまくるらしい。
溶きパテとかいうのをやればいいのか。 ああ、あとエアブラシも欲しいかも。 店で見てきたがコンプレッサー無しなら意外と安価なもんなんだな。
うーん･･･
いやぁ･･･</description>
    </item>
    
    <item>
      <title>パブロフの犬だ！パブロフの犬だ！</title>
      <link>http://blog.syundo.org/post/915/</link>
      <pubDate>Sat, 27 Nov 2010 03:28:38 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/915/</guid>
      <description>もうなんもやる気しない･･･が最近の口癖のようになっていましたが、先行き不透明だったことの終わりがなんとなく見えてきて気が楽になったようす。休日も潰してストレスを溜め込みに行くなんて碌なことじゃあないよ！という主張も結局は気の持ちようというもので･･･。
さて、プログラムの方をいじらなきゃという気持ちはあるもののなかなか手が進まないので工作をば。
足の見栄えを良くしようとしました。

バキュームフォームで作ったカバーでは足の付け根の部分に隙間ができてしまう、手で持ったときにぐらぐら動いて扱いにくい、合わせ目の隙間がいかんともし難い、というような理由から石膏粘土で足カバー（の型？）を作ろうかと思います。

Mr.クレイが思ったより軽量だったのでこの表面にパテを塗って固めたらいいのではないか？でもせっかくだからこれの見えない部分を肉抜きしたものを型にしてレジンキャストとかしてみたほうがいいのか？やったことないけど、重いか？というような色々な打算の結果ざっと粘土を盛ってみている様子です。最終的にはもっと丁寧に造形しないとね！

見栄えが悪いけどこういう過程を残しておくのが製作記というものではないでしょうかっ！？（目をカッと見開いている）
実際のとこ明日になって乾いてくれないと良いかどうか分からない･･･
お人形型をやると決めてから今まで触れたことのない材料を扱うようになってなんかちょっと楽しいかも。</description>
    </item>
    
    <item>
      <title>おお</title>
      <link>http://blog.syundo.org/post/757/</link>
      <pubDate>Tue, 26 Oct 2010 00:59:58 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/757/</guid>
      <description>宮田さんのところのブログが2年ぶりに更新されている。
すげえ。なんかすごい。
よくわかんないけど一度聴いてみたいなぁ。
でもウォークマン持ってないんだよなぁ・・・。
ipodの容量が一杯になったから、これを機に移行するのもいいかも・・・。
でもあの小っちゃい箱に入ってた奴が今でも凄く気になっているんですが・・・。
つまり持ち歩きたい・・・。</description>
    </item>
    
    <item>
      <title>部屋中粉だらけ</title>
      <link>http://blog.syundo.org/post/914/</link>
      <pubDate>Thu, 21 Oct 2010 01:19:31 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/914/</guid>
      <description>さて、更新。
バキュームフォームで作った外装に手を加えました。
以前までは形が完璧に抜けていなかったので、ボディの継ぎ目が気になる出来でした。

綺麗に抜けるまでやり直すということも考えられますが、それまでにいくら失敗するか考えるだけでも鬱になります。バキュームフォーマーを改良しないと。
そんなことやってられないので、スキマをパテで埋めました。

これはこれで結構時間がかかりました･･･
部屋も粉っぽくなるし･･･。
見た目完璧とは言えないけどまぁ綺麗になったかなと。
誰がこんなところを見るのかと言うと自分だけな気がしますが･･･。これを足のカバーにもやれば良いと思います。
次、
船場ロボコンのときにはただの発泡スチロールの塊だったヘッドの中身を作り直しました。

これで頭の中に受信機とか入れられるし、首回したりできるです。
頭頂部が出っぱっていますが、これはこうしないとウィッグがはまらないから｡ カイン技師さんに教えて貰った首のケーブルが捻れない構造です。 いわゆる萌え軸は入れない予定。
最近、小手先なことばっかやってる気がするのでガツーンとロボットやりたい。 でも他にもやること多すぎぃぃぃ</description>
    </item>
    
    <item>
      <title>船場ロボットファッションコンテスト及びパレード</title>
      <link>http://blog.syundo.org/post/913/</link>
      <pubDate>Tue, 12 Oct 2010 03:25:10 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/913/</guid>
      <description>やっぱ忘れないうちに書いておこうと思いまして。
パレードに参加しました。

うちの娘が一番可愛いに違いないと思って行ったんですが、徹夜で作ったこともあって、他のロボットと比べて見劣りする点も多々ありました。腕が作れず、発泡スチロールだったのは本当に可愛そうだった･･･。
舞鈴堂さんにはドールの手先を貸して頂きました。
ご自身がお忙しい中、色々気を掛けて頂いてありがとうございました。
カイン技師さん、私の大好きなロボットの一人であるマヌイちゃん（とその内部構造）を生で見られて感激でした。ありがとうございました。
その他の方々も不審な動きをする僕に対応していただいてありがとうございました。
他にも写真を。と。

妙に写真映りがよろしくないのも何とかしたいです。
やっぱ表面の微妙な凸凹に陰ができてしまうんですかね。磨き上げねば。
あと多分塗装（メイク）の仕方ももうちょっとしっかり学んだほうが良いと思います。

あ、まつげがずれてる。アイもちょっとずれてる･･･
それと、ふたえに見えるような塗装が必要だったか･･･？

パレードについて。
結果一歩も歩けなかったわけですが、一つにはバッテリーが傷んでいてもう殆ど容量がない感じだった、もう一つはパンチカーペットの上を歩くのは想定していなかったというのがありました。残念。
もし今度同じような大会があったら準備を怠らないようにしたいです･･･。 これから暇を見つけながらロボット界で一番可愛い子に仕上げていけたらなぁと思います。 もちろん動きも含めて。
歩行に関しても研究していきたいなぁ･･･</description>
    </item>
    
    <item>
      <title>船場ロボコン・パレード</title>
      <link>http://blog.syundo.org/post/756/</link>
      <pubDate>Sun, 10 Oct 2010 20:56:23 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/756/</guid>
      <description>うちの娘がいちばん可愛いに違いない。
と思って行ったら、普通に皆さんクオリティ高くてかわいかったー。
写真はまた別にどこかで。
舞鈴堂さん、ご自身がお忙しい中、色々気を掛けて頂いてありがとうございました。
手先があるかどうかでかなり違いました。
カイン技師さん、私の大好きなロボットの一人であるマヌイちゃん（とその内部構造）を生で見られて感激でした。ありがとうございました。
その他の方々も不審な動きをする僕に対応していただいてありがとうございました。
さて、今回の反省。
・前日に作業をしすぎた（前日までに残しすぎた）。実質16時間連続作業。朝8時完了、8時半出発。異常ですよ。
・荷造りを怠った。具体的には2つのニッケル水素バッテリーが死んでいることを当日まで気づかなかった、充電器も持って行かなかった。パソコンも。パソコン等は結局要らなかったかも知れないと思うけども。
・整備しにくすぎるロボットである。電源入れるのも一苦労。
・整備するときに人の目が気になった。バスタオル等必要・・・。
こんなもんでしょうか。
パレードについては結局一歩も歩けなかったわけですが、どだいカーペットの上を歩くなんて無理だったから諦められた。</description>
    </item>
    
    <item>
      <title>いてきま</title>
      <link>http://blog.syundo.org/post/755/</link>
      <pubDate>Sun, 10 Oct 2010 08:04:58 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/755/</guid>
      <description>化けて出そうなしあがり・・・
なんとかなるのか？
さらし者にされてかわいそうな我がロボよ</description>
    </item>
    
    <item>
      <title>せんばろぼこん</title>
      <link>http://blog.syundo.org/post/754/</link>
      <pubDate>Sat, 09 Oct 2010 23:41:31 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/754/</guid>
      <description>KRC-1の受信機からの信号がいっこうに読み取れないｗｗｗ
ニッケル水素バッテリーを過放電で死なしていたｗｗｗｗｗｗ
雨降ってて塗装出来ないｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗ
まｗｗにｗｗｗｗｗｗあｗｗｗｗわｗないｗｗｗｗｗｗｗｗｗｗｗｗｗ
ここ数ヶ月のプログラミングにかけた手間暇は結局なんだったのｗｗｗ
またほかのチャンスがあるさｗｗｗ
今回はRCB-1をつかおうｗｗｗｗｗpgrpgrpgr</description>
    </item>
    
    <item>
      <title>お洋服買った</title>
      <link>http://blog.syundo.org/post/912/</link>
      <pubDate>Mon, 04 Oct 2010 00:31:23 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/912/</guid>
      <description>前回更新から一ヶ月、パレードまであと一週間もない。
思うように製作を進められなかった。 グチりたい。しかし書くまい。 最低限、服を着せていないと表に出せないので慌てて買ってきた＠大須
写真多めでいきますです。

azoneの60cmドール用ワンピース。
肩から先が丸見えになってしまい、誤魔化せないので、腕を作っていない現状を考えるとリスキー。
しかし、切り開きやすそうなのを優先。そう。どう見ても入りそうになかったんだよなぁこれが。

ほらやっぱり。

切開する。思いっきり全部開いてしまったことを後悔。 後に綺麗な縫い目が無駄に汚い手縫いになってしまう。

大学のクラス写真とかいうものを撮るのに使った黒いネクタイ。百均のもの。こんなもん一生使わんだろ。

開いた。簡単に縫い目が解けるｗｗｗ三角形に切って縫い付けた。


仮縫いのつもりでやっていたが、終わったときにはもうやり直す気力など無かった。
びらびらになってるところをいつか処理したい。この反対側の縫い目が更に酷くお見せできない。全体の型崩れにまで発展している。なんとか時間を作ってそこは縫い直したい。
ひとまず入ることがわかったのでまあ安心。

前から。しかし丈がひどく短いなぁ。破廉恥。やっぱサイズ合ってないとこうなる。

うしろから。
間に合うのか！？間に合わせるのか！？
そもそも歩くのか！？
がんばろう！
やるべきこと
 肌の塗装 入らないウィッグを入れるために、二段構造の頭を作る。  （ああそうなんですよ10インチのウィッグ買ったんですが入らなかったんですよね。あれってもっとゴムがびょんびょん伸びるものだと思っていた･･･。もう一息大きければなぁ。）  歩かせる 無線化←これがいちばんやばい。もう誤認識しまくりでもいいや。アナログ入力もとうの昔に諦めた。最悪、懐かしのRCB-1に頑張ってもらうことになるだろう･･･ェ  </description>
    </item>
    
    <item>
      <title>外装被せてみた。</title>
      <link>http://blog.syundo.org/post/911/</link>
      <pubDate>Sat, 04 Sep 2010 02:36:18 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/911/</guid>
      <description>ロボットの骨格が出来たから、バキュームフォームで作った外装を被せてみた。 そういえばバキュームする記事書いてなかった･･･。もういいや。 これ骨格

被せた。前から。

後ろから。

外装の表面が凸凹しているし、極端に薄いところもある。 塗装のテストをしてみてから新しいのを作らねば。 ヒートガンを買ったからその威力を確かめてミネバ・ザビ 足のカバーも型は出来てるからバキュームしたいな。
腕はどうなるか不明。</description>
    </item>
    
    <item>
      <title>形がみえてきた</title>
      <link>http://blog.syundo.org/post/753/</link>
      <pubDate>Sat, 04 Sep 2010 02:13:01 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/753/</guid>
      <description>船場ﾛﾎﾞﾌｧｯｼｮﾝｺﾝﾃｽﾄへの応募がテスト期間中に締め切られてしまってがっかりした＋鳥人間で忙しかった（そうでもない）とかで夏休みに入って1ヶ月近く経ってしまった。
気分転換として部品を集めてロボットの形にしてみた。
 腰のヨー軸はロッドで回る。ちょっと曲がってるのは後で修正せねば。
  うわあぁ・・・。配線するのめんどくさぁい。
 </description>
    </item>
    
    <item>
      <title>お人形制作過程５</title>
      <link>http://blog.syundo.org/post/910/</link>
      <pubDate>Thu, 15 Jul 2010 01:31:37 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/910/</guid>
      <description>じゃじゃーん。

ちょっと首元の造形に違和感が。鎖骨作ってなかったそういえば。 いつか修正しよう・・・。

こんなかんじに真っ二つに切ってしまいます。ああ。

人形の開き。
頭のほうも真っ二つにします。（あれ？写真撮ってなかったか・・・）
これでやっとバキュームフォームの型ができたわけです。 いつか普通の球体関節人形として完成させてあげたい・・・。</description>
    </item>
    
    <item>
      <title>お人形制作過程４</title>
      <link>http://blog.syundo.org/post/909/</link>
      <pubDate>Thu, 15 Jul 2010 01:30:04 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/909/</guid>
      <description>表面の凸凹を消すための作業をします。
クロスクレイとかいうものを使うといいらしいんですが、お人形作りだけが目標じゃないのでちょっと買うのを躊躇しました。 代わりにラドールを削ったときに出てきた粉を水で溶いて使いました。

（なんか余計なゴミが入っててあんま良くない状態だった・・・）


鮭ほぐし！！

筆でひたすら塗る。

こいつの表面をやすれば良い感じになるでしょう・・・。

顔も。

こんな感じ。</description>
    </item>
    
    <item>
      <title>お人形制作過程３</title>
      <link>http://blog.syundo.org/post/908/</link>
      <pubDate>Thu, 15 Jul 2010 01:20:43 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/908/</guid>
      <description>次に頭を作ります。 造形的に細かいものがありますし、見た目に直に関わってくるところなので大変です。

うっうー。難しい。

でもごにょごにょと頑張る。

なんとか形になったか！？

鼻と口元を修正。 うーん。劣化したような気もする。好みの問題か。 後悔してもしゃーない。
乾燥させて。

目の位置の当てをつけて。

彫ってみた。目を書き込んでみる。 最終的にはドールアイを入れるんですが。

なんかイケメンな子になっちゃいましたね。 まあ、これはこれでありなのでひとまず終了。
うーん。やっぱ奥深い。難しい。1ヶ月くらいかけて造形したかった・・・。</description>
    </item>
    
    <item>
      <title>お人形制作過程２</title>
      <link>http://blog.syundo.org/post/907/</link>
      <pubDate>Thu, 15 Jul 2010 01:09:49 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/907/</guid>
      <description>発砲スチロールの型に粘土を巻き付けます。 石膏粘土の「ラドール」というものを使いました。
まずは胴体から。


乾燥させたら、更に粘土を盛っていって、リアルにします。



指でのばして、こんな感じ。


造形的に納得できないところもありますが、こればっかりやってられないのでひとまず胴体は終わり。
難しいです。奥が深いです・・・。</description>
    </item>
    
    <item>
      <title>届いた</title>
      <link>http://blog.syundo.org/post/752/</link>
      <pubDate>Fri, 09 Jul 2010 02:19:09 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/752/</guid>
      <description>Vstoneさんから切削サービスの届いた。
速すぎだろｗｗｗ
オプション付けてないよｗ
しかもなんかおまけで外国のおもちゃが入ってたし。
エクスプレスサービスなんていらんかったんや・・・・・・。</description>
    </item>
    
    <item>
      <title>お人形制作過程</title>
      <link>http://blog.syundo.org/post/906/</link>
      <pubDate>Thu, 08 Jul 2010 01:24:17 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/906/</guid>
      <description>外装の型にするためにまずドール一体作ってしまいます。 現在は頭と胴体のみですが。 その過程を紹介。
まず発砲スチロールを切り出す。

アイミさんのサイトの設計図を基にしています。ありがとうございます。



やする


ラップを巻いて剥離しやすくする

あ、頭もできてますね。
今回はここまで。</description>
    </item>
    
    <item>
      <title>設計だす</title>
      <link>http://blog.syundo.org/post/905/</link>
      <pubDate>Thu, 08 Jul 2010 01:08:04 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/905/</guid>
      <description>こんなのに外装被していこうと思ってます。</description>
    </item>
    
    <item>
      <title>加工経路</title>
      <link>http://blog.syundo.org/post/751/</link>
      <pubDate>Tue, 06 Jul 2010 21:52:13 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/751/</guid>
      <description>わくわく
 待つのみ！！</description>
    </item>
    
    <item>
      <title>やっと</title>
      <link>http://blog.syundo.org/post/750/</link>
      <pubDate>Mon, 05 Jul 2010 18:26:37 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/750/</guid>
      <description>やっとVstoneさんに発注した
 これから徐々にテスト期間に突入していくだろうから、ちょうど良いタイミングで届くだろう。
あとはAD変換関係のデバッグ。
モーションを組み込むためのポインタか配列。
足裏センサは、最近のしまけんさんの記事を読むと、どうも難しそう。
アナログ値を取る以前の問題らしい。まいったなあ。</description>
    </item>
    
    <item>
      <title>はじまり</title>
      <link>http://blog.syundo.org/post/904/</link>
      <pubDate>Sun, 04 Jul 2010 12:43:32 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/904/</guid>
      <description>ドール型ロボットを作るプロジェクトについて、
親や友人にブログを見つかってしまっている、
という理由から書くことがはばかられるようなものがでてきたので、
某年某月ドールロボ隔離を発動したわけであります。
このブログではドール型ロボのハードウェアに関して
制作過程を紹介していきたいと思います。
果たしてうまく完成するのでしょうか！！？</description>
    </item>
    
    <item>
      <title>軌道戦士バンナム</title>
      <link>http://blog.syundo.org/post/749/</link>
      <pubDate>Tue, 06 Apr 2010 22:18:07 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/749/</guid>
      <description>もうタイトルつけるのが面倒で仕方がない。
支持脚が入れ替わる度に倒立振子の原点も入れ替わることを忘れていた。
また、左右方向の軌道エネルギーが正になるとコケるということでもあるんだと分かった。山を越えていくのは前後方向の軌道。
というわけで重心のx､y方向の軌道が求まった。
左右方向
前後方向
二歩分。やっぱ両足支持期間が必要だなあ。
それに遊脚をどうするかも悩みどころ。
メモ
Tc=sqrt(Zg/g);
ex=exp(Tp/Tc);
y=-y_FP;
dy0=(1.0/Tc)*((1-ex)/(1+ex))*y0;
y=y0*cosh(t/Tc)+Tc*dy0*sinh(t/Tc)+y_FP;
dx0=(1.0/Tc)*((1+ex)/(1-ex))*x0;
x=x0*cosh(t/Tc)+Tc*dx0*sinh(t/Tc);</description>
    </item>
    
    <item>
      <title>絶望した</title>
      <link>http://blog.syundo.org/post/748/</link>
      <pubDate>Sun, 04 Apr 2010 02:29:06 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/748/</guid>
      <description>久しぶりの更新。弟よ。見ているかｗｗｗ
進捗具合を報告。
PCからサーボの角度を調整したり、サーボを等角速度または加減速して動かす仕組みは出来ました。出来ています。
といっても吉野さんの60日で（ryのサンプルプログラムをほぼ流用させていただいたんですが。（あ、加減速で思い出しましたがこのサンプルに動作には影響しない間違いを発見しましたです。servo_data.directionのとこ。もう訂正されているのか？）
それはともかく、モーションを作れば歩ける可能性が高くなってきたわけです。
となると計算歩行について始めなきゃということになります（理由は不明ｗｗ
計算歩行と言っても、今までは単に3次元線形倒立振子規範の動作をさせることを考えていました。解析解が分かってるのでプログラムに組み込むだけで楽チンだからです。すぐ出来ます。
この方向性が合っているのか検討したくてしまけんさんのラムダロボ研（別に面識は無いです汗）の過去ログを読ませていただきました。
しまけんさんは画像処理とか受け身とか色々取り組んでいらっしゃいますが、歩行に関して変遷を追えば
線形3次元倒立振子規範→y軸(左右方向)だけ普通の倒立振子→股関節ロール軸は固定で足首を回す→二重倒立振子→更に剛体振り子？相当単振子？で考える→ZMP規範の歩行→関節負荷？動力学フィルタとかその関連？なのか？の考慮
という感じではないかと思います。
これを受けて、将来的に難しいことをやろうとは思うけどひとまず線形倒立振子かなというふうに考えていたんですが、まともに歩けないようならそれに拘るのは危険かなというように考えるようになりました。
つまり、うまくいかなかった場合、しまけんさんのようにモデルを変えていったりZMP規範にしたりするのはあまりにもツライだろうと。今まではそれに立ち向かうだけの心づもりはあったんですが、いつまでもマイロボットが完成しない状況が恐ろしいのです。
そういうことに取り組むのは自分の能力が十分上がってからとかもっと良い開発環境が出てからにするべきでしょう。
ですからひとまず線形倒立振子規範のを試してからある程度パラメーター変えても駄目なら諦めて、モーション決めうち歩行にすることもやむ無しかもですね。
計算で出したy軸方向の重心位置↓
これにポテンシャルの山を越えてるかどうかとかの問題が含まれてるかが不明。
全然想像と違う動きなんですもん。
もう一度ヒューマノイドロボット読まねば。</description>
    </item>
    
    <item>
      <title>ロボットのためのC言語</title>
      <link>http://blog.syundo.org/post/746/</link>
      <pubDate>Sun, 14 Mar 2010 03:20:57 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/746/</guid>
      <description>１．構造体のじょーずな使い方
　ファイルや関数をまたいだ構造体の使い方について書いてみます。
何故構造体なのかというと、大きなデータを簡単に受け渡しできるため、ロボットのプログラミングには非常に便利だからです。
複数のファイルから使う変数を値ではなく参照で共有することにより、プログラムが軽くなっていることに注目してください。
（まあ、実はコンパイラの設定によっては、自動的にグローバル変数を参照渡ししてくれたりするらしいんですけど･･･。なんか気持ち悪いから。これについては「SuperHファミリのCプログラミング」などの本を読まれるといいと思います。たしか。）
早速以下にサンプルを示しながら説明します（そんな大層なものでもないけど）
any_define.h, main.c, function.c の三つのファイルがあるとして見てください。
//any_define.h
struct TEST
{
&amp;nbsp; &amp;nbsp; unsigned int&amp;nbsp; &amp;nbsp; test1;
&amp;nbsp; &amp;nbsp; unsigned char&amp;nbsp; &amp;nbsp; test2[4];
&amp;nbsp; &amp;nbsp; unsigned int&amp;nbsp; &amp;nbsp; *test3;
};
　ヘッダファイルで構造体を定義しておきます。
ここでは実体は生成してません。
//main.c
#include &amp;quot;any_define.h&amp;quot;
void main(void)
{
&amp;nbsp; &amp;nbsp;&amp;nbsp; struct TEST test;　//ここで（メイン関数内で）生成する
test.test1=10;　//初期値を与える（他のメンバにも適宜行う）
&amp;nbsp; &amp;nbsp;&amp;nbsp; function(&amp;amp;test); //サブルーチンへは構造体testのアドレス（先頭アドレス）を渡す
}
　メイン関数内で構造体の実体を生成しています。
サブルーチンへはアドレスを渡していることに注目してください。
test.test1に初期値を与えているのは、function1内で構造体のメンバを使うときに値が不定にならないようにするためです。なぜtest1だけなのかと言うとほかのメンバを例として使うのが面倒だったから（笑）。test2もtest3も使うなら初期化すべきです。
//function.c
#include &amp;quot;any_define.h&amp;quot;
void function1(struct TEST *test)
{
&amp;nbsp; &amp;nbsp; int a;</description>
    </item>
    
    <item>
      <title>首が無いんだ</title>
      <link>http://blog.syundo.org/post/745/</link>
      <pubDate>Sat, 13 Mar 2010 02:14:33 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/745/</guid>
      <description>一応設計が終わったようです。他人事みたいですが。
おかしなところがないかもう少しチェックしますです。
 手がショボいのは仕様です。
ひとまず歩かせることに集中したいからとかプロポーションの問題からです。
起き上がれるか不明。
首のあたりも設計しましたが、inventerが言うこと聞いてくれなくてくっつかなかったので敢えて努力はやめました。CPU負荷がすごいし。
あとは膝のオフセットアームも設計してあるのですが、折り曲げ加工がうまくいくか不明だったので基本はこのブラケットということに。一応オフセットのも製作します。
さあ、次はソフトの充実だ。
ジャイロと加速度センサつける。</description>
    </item>
    
    <item>
      <title>動画紹介</title>
      <link>http://blog.syundo.org/post/744/</link>
      <pubDate>Mon, 01 Mar 2010 04:26:45 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/744/</guid>
      <description>ぽちっとな
あまりにも凄すぎてどうコメントしたらいいのか分からないの・・・。
僕がやりたいのはこういうことだと思うの・・・</description>
    </item>
    
    <item>
      <title>辛いが旨い</title>
      <link>http://blog.syundo.org/post/743/</link>
      <pubDate>Fri, 26 Feb 2010 16:50:13 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/743/</guid>
      <description>こたつ上開発環境。
狭いが快適。
 この後ろにデスクトップのディスプレイがあったり、こたつの周りに専門書が散らばってたりする。
部屋はどんどん汚くなる。
足先軌道計算→モーションについての考察
歩行の一周期分を計算しておいて再生
なのか、その場その場で計算していくのか。
前者はモーション保存用の領域が要るが、</description>
    </item>
    
    <item>
      <title>やがて洪水がすべて夜の青の色に染めていくように</title>
      <link>http://blog.syundo.org/post/738/</link>
      <pubDate>Mon, 15 Feb 2010 22:10:00 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/738/</guid>
      <description>Inventorの背景の青色がなんか変な色だけどディスプレイの設定がよくないらしい。
よくわからない。
それはともかく今日はこんなリンクの入出力角について考えてみたよ。
 ボールジョイントの描き方が分からなかったから、作業点をメイト拘束した。
図がわかりにくいかも。４節リンクで一方が垂直に立ってるやつ。
角度を計算してみたのだけどなんだか間違っているみたいだった。
機構学とかいうものの本を読んでみればわかるのかも。
え・・・空間４節連鎖とかで調べると論文みたいなの出てくるんですけど・・・。</description>
    </item>
    
    <item>
      <title>サーボ描いた</title>
      <link>http://blog.syundo.org/post/737/</link>
      <pubDate>Mon, 15 Feb 2010 03:08:02 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/737/</guid>
      <description>今日は測定し直したりしながらサーボ描いたよ。
 だいたいInventorの使い方は分かってきた。
まだシートメタルのやつを触ってないのでそこを習得しないと。</description>
    </item>
    
    <item>
      <title>仮想パーティ</title>
      <link>http://blog.syundo.org/post/736/</link>
      <pubDate>Sun, 14 Feb 2010 02:41:11 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/736/</guid>
      <description>テストおわった。
逆キネで計算した姿勢がどうなっているか確かめるため、Inventorでダミー君を作った↓
  角度拘束をエクセルでいじれるようになっている。</description>
    </item>
    
    <item>
      <title>最近読んだ本</title>
      <link>http://blog.syundo.org/post/735/</link>
      <pubDate>Sun, 17 Jan 2010 14:52:40 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/735/</guid>
      <description>CPUの創りかた
 CPUの創りかた 著者：渡波 郁
販売元：毎日コミュニケーションズ
Amazon.co.jpで詳細を確認する
 今期の期末テストは難易度高そうなので最近はロボを自粛して勉強しようとしているけど合間にこの本を読んだりする。
出版社はあの神作「60日で出来る二足ほｋ・・・以下略」を出版してるマイコミ。
この本も驚きのクオリティである。10個のICとその他電子部品でCPUを作るのを目標としている。笑えるのが、このCPUのROMが「手動」なのである。つまりスイッチをいっぱい繋げたやつなのだｗｗクロックも１Hzという驚愕のスペックｗｗ動作がテスターで追えるらしい。
CPU内部まで自分の手でデバッグできるなんて信じられないことだね。
この本を読めばマイコンに関することはかなり効率的に超初級から勉強できると思う。アマゾンでの評価の高さも見て欲しい。間違いなく誰もが認める良書である。そんなわけで表紙はきわどいけどおすすめ！
ふう。勉強しよ。</description>
    </item>
    
    <item>
      <title>泥沼から逃れる</title>
      <link>http://blog.syundo.org/post/734/</link>
      <pubDate>Sat, 09 Jan 2010 13:30:40 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/734/</guid>
      <description>sh7125MTU出力端子の一部からPWM信号が出てこなかった件についてやっと解決した。
MTU3と4の設定が足りなかったのだ。
ずっと、設定している部分について間違いがないか調べていたが（間違いはなかった）、まだ設定しなくてはならない項目があったとは・・・・・・。
MTU23と24はなんか特別らしく、レジスタへの誤った書き込みを防止したり、MTU出力をデフォルトでブロックする機能があったのだ。
まったく・・・・・・。TRWER、TOERの設定を忘れてはダメです。
これから得た教訓はデータシートをもっとしっかり読みましょう、と言ったところか。</description>
    </item>
    
    <item>
      <title>倉庫</title>
      <link>http://blog.syundo.org/post/733/</link>
      <pubDate>Wed, 06 Jan 2010 22:41:26 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/733/</guid>
      <description>「haisen.xlsx」をダウンロード
「kine.xlsx」をダウンロード
「kokansetulink.xlsx」をダウンロード
「stk-7125-evb.xlsx」をダウンロード INPUT&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;SUPERH,MONITOR,LOWER
LIST&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp; MONITOR.MAP
SHOW&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp; SYMBOL
OUTPUT&amp;nbsp; &amp;nbsp;&amp;nbsp; MONITOR.MOT
FORM&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp; STYPE
CHANGE&amp;nbsp; &amp;nbsp;&amp;nbsp; INFORMATION=1320
NOOPTIMIZE
LIBRARY&amp;nbsp; &amp;nbsp; SUPERH,7125
LIBRARY&amp;nbsp; &amp;nbsp; MONITOR
DEFINE&amp;nbsp; &amp;nbsp;&amp;nbsp; $BRR=13
DEFINE&amp;nbsp; &amp;nbsp;&amp;nbsp; $STACK=FFFFC000
START&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;VECTOR/0,ROM,P,C/390,RAM,USER/FFFFA000,SCI/FFFFC080
「MONITOR.MAP」をダウンロード 「MONITOR.MOT」をダウンロード
21.182mm
28.02 deg
43.348
20mmオフセット
67mm
0xffffa617
0xffffa700
2*12*64=1536
1536*2=3072
ffffb2ff
ffffb300
2*14*8=224
224*2=448
ffffb4bf
スタック領域計算すべし。</description>
    </item>
    
    <item>
      <title>ゾロ目見過ごし</title>
      <link>http://blog.syundo.org/post/732/</link>
      <pubDate>Tue, 05 Jan 2010 12:06:29 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/732/</guid>
      <description>遅くなりましたがあけましておめでとうございます。
アクセスカウンターがもう少しで11111になるなーと思ってたのに、見過ごしてしまいました。
いつのまにかこんなになってた・・・・・・。
どうもSTK-7125のRAMデバッグの記事が好評らしいです。
いや、好評かはわからないけどグーグル先生の検索の上の方に出てくるみたい。
今、7125開発ボードは紆余曲折を経て、こんなんになってまーす↓
そしてこれが↓裏側でーす。ぎゃああ
新しく買ったSTK-7125もうまく動きませんでした。
デバッガで見てみてもちゃんと設定は出来ています。ああ、無駄なことをした。
とりあえずEVB-KITから切り離して開発できるようにしてみようと思います。
というわけでなんとなく作業が停滞している様子が伝わったことと思いますが、ええと暖かい目で本年も見守っていてください。ﾍﾟｺﾘ</description>
    </item>
    
    <item>
      <title>メリクリ</title>
      <link>http://blog.syundo.org/post/731/</link>
      <pubDate>Thu, 24 Dec 2009 00:49:22 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/731/</guid>
      <description>なんかsh-7125の調子が悪くて12本の信号線のうち、6本しか出力が無かった。
汎用ポートとして利用するとハイレベルもローレベルも出力するのだが。
MTUの設定もあれこれいじったけどどうにもならないので、もう思い切って新しいのをぽちっと注文した。約三千円送料込みの支出。
SHマイコンボードだと考えれば格別に安いのだが。予想GUYの支出はﾂﾗｲでござるよ。
自炊！自炊！自炊こそ命！
これでだめだったらどうしよう。
支出がつらいのはあれですよ。サークルでも使うって言うんで、ちょっと良いデジタルノギスを買っちゃったんですよね。てへ。
ミツトヨのデジノギ純国産・・・・・・！
いいでしょ。正確さといったらないよ。
そんなに正確がいいならマイクロメーター使えって話だけど、これでもかなり正確だから。</description>
    </item>
    
    <item>
      <title>あわや</title>
      <link>http://blog.syundo.org/post/730/</link>
      <pubDate>Sun, 20 Dec 2009 01:40:53 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/730/</guid>
      <description>先日書いた股関節軸が直交でない場合の逆運動学計算をプログラムしてみた。
出力ピンをオシロで当たってみると、LOWレベルのままだったり、HIGHレベルのままだったりした端子があった。
何が原因かわからない。
ああ恐ろしや。
ともかくも段階を踏んでじっくりやることの大切さを感じた。
テスタでたどっても線は切れていないようだ。
プログラムの問題か。
TCNTがオーバフローして・・・・・・？
よくわかんなーい。
逆キネはオミットして全端子の出力をチェックしてみよう。</description>
    </item>
    
    <item>
      <title>ビルドできないとき</title>
      <link>http://blog.syundo.org/post/729/</link>
      <pubDate>Sat, 19 Dec 2009 18:30:07 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/729/</guid>
      <description>C言語でプログラムを作ってもビルド、もといコンパイルするときにエラー、警告が発生する事があります。そんなときどういう失敗をしている可能性があるのか、気付いたことからちょくちょく書き連ねていこうと思います。
・文法的には何も間違ってないところを指摘される
その直前におかしなところが有る可能性が・・・・・・
☆直前の関数のコードブロックが閉じていない。｛｝の対応をチェック。
☆セミコロンを付けていない。；のチェックはもはや基本としか言いようがない。
☆Illegal character code &amp;quot;81&amp;quot;→どこかに全角スペースが入ってる可能性アリ
・数学関数のとこにエラーがでる
標準ライブラリにmath.hが追加されていません。
ここの３．数学関数を使いたい！を参考に。
・変数の大きさをオーバーしてると言われる
エラーにはならないけど気になりますよね。
float型の場合
☆defineで定義した定数が適当な精度か？
円周率などやたら桁数を多くしても意味がない
続きは気が向いたら。</description>
    </item>
    
    <item>
      <title>やりたくねーったらやりたくねー</title>
      <link>http://blog.syundo.org/post/728/</link>
      <pubDate>Mon, 14 Dec 2009 23:34:56 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/728/</guid>
      <description>ああもう英語のプレゼンテーション発表とかもうホント一体どういうこと。
やりたくないったらやりたくない。
しかし期日は迫るばかり。
今A4原稿2枚くらいできた。
これによるともう僕は卒業できるらしいwwwwwww
ああ、でもほんと英語って使いにくい言語だなあ。
英作文をしていると日本語の繊細さ、柔軟さをしみじみと感じる。
日本語って、文法的に複雑になってきても、長々とした文にならないところがいいよね。
まあ、日本語のレポート書くときも日本語に悩んだりするから、もしかしたら日本語にしても英語にしても丁寧な文を書くってのが難しいのかもなあ。どっちだよ。こんな論理が通ってない文章をだらだらと書いても日本語能力はあがらないなあwww
それはともかく、ロボットやりたいよおお（泣）
電磁気学の中間テストもあるしあああああああ。
ロボットは設計に寸法間違いがあって殆どの部品がダメになったので、新しい構造にしてみるつもり。試しにラジコン用のロッドエンドを買ってきた。
これでスリムなボディができるはず。ああ設計したい。
大学から大須までそんなに遠くなかった。
最近は自転車でお出かけする事が多い。
やっぱりいいところだあそこは。
ROBOBASEさんにももっと頑張って欲しい。
リンク　リンク</description>
    </item>
    
    <item>
      <title>算数のお時間</title>
      <link>http://blog.syundo.org/post/727/</link>
      <pubDate>Thu, 10 Dec 2009 03:12:44 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/727/</guid>
      <description>直交じゃない場合の逆キネ。メモメモ。
ほんとにこんなんでいいのだろうか。
高校生でもできるよ。もっとかっこよく解きたかった。
それはともかく
＊のとこはこうしたら少しでも計算速くなるかなぁと思った変形。
実際のところどうなんだろう。
三角比関係の項は少なくするに越したことは無いと思うのだけど。
リンク　リンク</description>
    </item>
    
    <item>
      <title>うわー全然更新してない</title>
      <link>http://blog.syundo.org/post/726/</link>
      <pubDate>Wed, 28 Oct 2009 21:46:55 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/726/</guid>
      <description>いろいろ書きたいこともあったような気がする。
だから書いてみよう。
robotwatchで高橋さんの「ロピット」を見た。
ベルトを平行リンクみたいに使うのはたぶん誰でも考えてたと思うけど、実際やってみて動くんだからすごい。足を細くしたいときに使えそう。
それと、あのその場旋回！！何あの速さ！！あれがジャイロ２つ乗っけた効果なのか。久々に感動した。
automo06の紙樹脂固めについて。軽くて良さそう。
でも外装の展開図をどう作れば･･････。
バキュームフォーマーの枠を作った。ちょっと前にね。
もう一息完成度高くしたかったけどやっぱ構造上の問題なんだろうか。ふにゃふにゃする。
本みつけた。
トランジスタ技術forフレッシャーズCプログラミングはじめの一歩
なにこのいい本。こんなのあったら苦労しなかったよ。
後期になってC言語の授業が始まったよ。アドバンテージを生かしつつもより高みを目指したいお。いや、いい加減C++をマスターしたい。
夏休みにやるとか言ってたVBについて。ええ！やりましたとも。夏休み勉強しましたよ。でも実際使ってないからもう忘れちゃったよ。どういうことなの。
先輩に「ふーんC#もできるんだー」って家の本棚見て言われたけど。できないのですよ。だった。その後オブジェクト指向から逃れる道はないという話になった。VBもオブジェクト指向してんなよと言いたくなる。クラスとかなんぼのもんじゃーい。
最近、忙しい。でも社会人の皆さんのことを考えると全然なんだろうと思う。
でもロボット以外でやらなければならないことが尽きない・・・・・・。多種多様に。うはあ。</description>
    </item>
    
    <item>
      <title>Vstone速すぎ</title>
      <link>http://blog.syundo.org/post/725/</link>
      <pubDate>Mon, 31 Aug 2009 20:01:49 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/725/</guid>
      <description>今日の朝DXFデータ送ってアルミ加工サービス注文したら、夕方には発送の連絡があった。
スペシャルエクスプレスサービス恐るべし・・・・・・。
&amp;nbsp; </description>
    </item>
    
    <item>
      <title>やっぱギリギリ（笑</title>
      <link>http://blog.syundo.org/post/724/</link>
      <pubDate>Wed, 12 Aug 2009 16:55:42 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/724/</guid>
      <description>数学関数をROMから呼び出すようにしたら、なんとかRAMに収まった。
でもfloat型変数を一個新しく使っただけで容量が足りなくなったｗｗｗ
だめだこりゃｗｗｗやっぱ無謀すぐるｗｗ
逆キネはなんとなくうまくいってるみたいなので、ひとまず数学関数はオミットしてA/D変換のテストとかしようかなｗｗｗ</description>
    </item>
    
    <item>
      <title>なんかギリギリ</title>
      <link>http://blog.syundo.org/post/723/</link>
      <pubDate>Mon, 10 Aug 2009 23:42:44 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/723/</guid>
      <description>数学関数sinとかtanを使うようになったらRAMの容量が全然足りないようになった。
モニタプログラムの標準入出力の部分を削るか・・・・・・？
どうしたものか</description>
    </item>
    
    <item>
      <title>更新したお</title>
      <link>http://blog.syundo.org/post/722/</link>
      <pubDate>Sun, 09 Aug 2009 23:54:17 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/722/</guid>
      <description>技術情報のとこ更新しました。
RAMデバッグについては一応完成。
新しくHEWについても書いてみました。
まだPWMのとこが残ってます。
PWMとかもういいよね。わかりきってるよね・・・・・・。
もう更新する気力もないです。
「ヒューマノイドロボット」一通り読みました。なんとなく分かったけど、細部は他の書籍を参考にしないと難しいのかなと思います。でもひとまず前期勉強してきたことが役に立ったと思います。よかった。
ほかにもいろいろやってますが、ぱっとしないのでまたいつか。(/ω＼)ﾊｽﾞｶｼｰｨ</description>
    </item>
    
    <item>
      <title>ちょｗｗｗローゼン凄すぎｗｗ</title>
      <link>http://blog.syundo.org/post/720/</link>
      <pubDate>Sun, 26 Jul 2009 01:30:13 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/720/</guid>
      <description>自分のよく見るサイトにわんだほーの写真とかがうｐされてきて、なんか辛抱たまらんくなったので、前から温めていたダミーシステムに粘土を盛ってみた。
ホームセンターで売ってた粘土ですよ。
なんのこっちゃって感じだけど。
時間がないのに、息抜きのつもりで･･････とかいって始めちゃったので、やっぱ中途半端。
全然思ったとおりにならないのでトーンダウン。
どうしよう。この方法無理っぽい。
クオリティ最低。
きれいにする努力もしない。時間ないので。
折角だから今公開。でも説明はしない。時間ないので</description>
    </item>
    
    <item>
      <title>あまりにもショックだったから試験期間中のブログ更新禁止ルールを破った</title>
      <link>http://blog.syundo.org/post/719/</link>
      <pubDate>Sat, 18 Jul 2009 17:21:30 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/719/</guid>
      <description>チーズにカビが生えてた
けっこう残ってたのに
よく見たら賞味期限も過ぎてた
今度からは小さめのやつを買おう</description>
    </item>
    
    <item>
      <title>まいっちんぐ</title>
      <link>http://blog.syundo.org/post/718/</link>
      <pubDate>Wed, 01 Jul 2009 12:31:32 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/718/</guid>
      <description>どうも新機体作成は夏休みになだれ込む模様。
なんか急に忙しくなってきたぞー？
なんとか逆キネは今週中に完成させたい。
最近思ったこと
加速度センサを動的に使う場面ってどんなんだろ。
ジャイロセンサだけで事足りるような。加速度センサは起き上がり判定のみかなあ。
坂道を上るときに使えそうかも？ともかくセンサからの値を見てみないとねー（汗
図書館の本を延滞して、しかもその本が『ロリータ』だったとしてもそんなぶっきらぼうにしかも厳しく当たらなくてもいいじゃないですか、図書館の受付のひと。いや、ごめんなさい僕が悪かったです。</description>
    </item>
    
    <item>
      <title>アニメじゃなくないしホントのことでもない</title>
      <link>http://blog.syundo.org/post/717/</link>
      <pubDate>Sun, 28 Jun 2009 17:47:15 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/717/</guid>
      <description>初日にエヴァの劇場版見てきました。
感想↓
「綾波が作ってたのって絶対味噌汁だよなー萌える・・・・・・ぐふっ！」
って帰り道で前を歩いていた腐女子が言ってるのを聞いて、激しく同意しました。</description>
    </item>
    
    <item>
      <title>おお眠い</title>
      <link>http://blog.syundo.org/post/716/</link>
      <pubDate>Wed, 24 Jun 2009 02:27:24 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/716/</guid>
      <description>サーボ用のピンヘッダつけた
電源回路も作ってあるけどまだ繋がってない。
反対側のマイコン端子が固定されていないのがダメだけどめんどくさいから放置。
どう影響があるのか。
裏↓
無計画にやるとこうなる。
正式なのはEAGLEで設計してからやろうかなあ。そんでいっそのことプリント基板に・・・・・・いかんいかん自分でハードル上げすぎている。でもいつか挑戦したいということは確か。
テストボードにするにはもったいないくらい苦労した・・・・・・。
なんか写真で見るとすごくへたくそに見えるなあ。
おさる君より下手なのは確実。</description>
    </item>
    
    <item>
      <title>届いた</title>
      <link>http://blog.syundo.org/post/715/</link>
      <pubDate>Tue, 23 Jun 2009 22:46:32 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/715/</guid>
      <description>いろいろ届きましたー
届いたものが思ってたよりたいした量じゃなかったとき、後悔の念が湧いてくるのはなぜだろう。
ジャイロセンサと加速度センサは秋月で、ネジやらはウィルコで買いました。
ウィルコさんは2100円以上の注文で送料タダになるのですよ。すげー。
でも2100円も買うもの無かったです。ネジって結構安いのね。
チタンネジとかも買っておくべきだったか。
それよりか、手に取ってみると長さが足りない様な気がするこの買ったネジ。
ギリギリを狙いすぎたぜ・・・・・・。数種類買っておけばよかったかびんぼうしょー。
そしてナイロンブッシュ。手に取ってみると思ってたのと違う。これで反対軸作れるのだろうか。</description>
    </item>
    
    <item>
      <title>雛[hina]ちゃん週間ランク1位！！！！</title>
      <link>http://blog.syundo.org/post/714/</link>
      <pubDate>Mon, 22 Jun 2009 15:54:55 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/714/</guid>
      <description>あ
あ　あ
た　あ
き　ぁ っ あ
ぁ ！
あ
ぁ　・　!
あ
ぁ
あ
ぁ あ
あ 1日1回ぽっちとなニコニコ</description>
    </item>
    
    <item>
      <title>なんというかデカルチャー</title>
      <link>http://blog.syundo.org/post/713/</link>
      <pubDate>Thu, 18 Jun 2009 22:41:29 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/713/</guid>
      <description>ニコニコ動画でclockworkの人のロボットを見つけた。
今日うｐされたみたいだけど数時間で再生数が2倍になっててﾜﾛﾀ。
いつのまにか大百科も書かれてるし。
もうこのまま週間ランキング1位まで行って欲しいです。
うらやましいなあ。あんなロボットほしいなあ。
ツインテールにしたということについてGJと言うほか無い。</description>
    </item>
    
    <item>
      <title>頭が無いのは自分</title>
      <link>http://blog.syundo.org/post/712/</link>
      <pubDate>Wed, 17 Jun 2009 22:13:27 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/712/</guid>
      <description>設計をしているとネジの頭が凄く邪魔に感じる。
サーボモータ本体やサーボホーンの出っ張りのせいでやりにくいってのに更に追い打ちをかけてくれる。低頭ネジでも邪魔。もーいや。
そこでネジの頭が無ければいいということに気づいた。
無い頭にひっかかるものなど無い！まさに無敵！
検索してみるとありました頭のないやつ。止めネジっていう名前らしい。
やったー。これで設計に2mmも余裕ができたぞー！！
早速注文、注文・・・・・・
危うく注文するとこでしたよ！！！！！！！
頭のないネジでどうやって固定するつもりだったのか。
疲れてるな・・・・・・俺
ところで名古屋にネジのデパートってとこがあるみたい行ってみたい。
でもべつに欲しいネジもない・・・・・・ちなみにその止めネジってやつも売ってるみたいよそこで。
6/18追記
どこで引っかかるかということについて
今回設計しているときに邪魔になったのはサーボホーンを留めているネジなのでした。
脚部ロール軸に最近流行の前田式長穴減速リンク（なんじゃそりゃ）を採用しまして、そうするとサーボホーンのネジの上をリンクのガイドが横切るようになるんです。
寸法いい加減なとこあるけど股関節あたりの図↓
ここらへんを設計してるときにサーボホーンを留めているネジがあまりにも邪魔で、かといってサーボホーン削るわけにはいかないのでネジの頭よ無くなれ！と思ったのです。
そしてこの頭なしネジを全身に使えばネジの頭を気にして皿ネジ加工する手間がもう一切無くなる！天才か自分。とか思ったのです。疲れてたんです。ええ。
ちなみにホーンのとこのネジはしょうがないから低頭ネジにして対応することにしました。</description>
    </item>
    
    <item>
      <title>なかなか進まぬ</title>
      <link>http://blog.syundo.org/post/711/</link>
      <pubDate>Wed, 17 Jun 2009 00:21:50 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/711/</guid>
      <description>いろいろあって全然ロボットに触れない。時間をうまく作ろう。無駄にだらだらしすぎなんだ。
vistoneに切削依頼しようかと思ったけど、サークルの先輩にフライス盤とかの使い方教えてもらえそうなので、見送り。複雑なやつはアミエさんに頼もう。あと先輩がCNC自作しているので完成すればいつか使わせてもらえるかもしれない。さすがに無理か。
あ、ちなみにサークルは飛行機作るとこです。
反対軸の部品調達にミスミeカタログをあてにしていたのに、よく読んでみたら個人向けに取引はしてなかった。がっくり。反対軸には代わりにウィルコさんのテフロンブッシュを使おうと思う。数量増やせば安ーい。わああ無駄に買いたくなるううう。チタンネジも買おう。
C++の勉強が全然はかどらないので、もうあきらめてVBを勉強しようと思う。入門書読んでみたけど、2週間ぐらい頑張れば使えるようになりそう。
新しい機体完成するまで時間かかりそうなのでいまあるT-RACで重心移動の逆キネ、ZMP規範のやつをテストしてみようと思う。非直行軸で足を前に出すと一気に複雑になるからy軸方向だけなの。ピンヘッダを半田付けせねば。
第三の手が欲しい。以前千石通商で見かけたような気がするのに売ってない。ES-POEWRSHOPでも売ってた気がしたので検索してみると、なんと倒産していた！！受験勉強中ににいろいろ変わってるようわああ。この世はままならぬー。もっと買いたいものあったのに。
しょうがないのでそれっぽいのを作ってみた。意外と使いやすい。
なんか大須に新しいロボットショップができるらしい。もうすぐ開店。中間テスト終わったら行きたい。ろぼとまやロボスポットみたいにアルミ板切削サービスしてくれないかなあ。そういえば名古屋ツクモの王国はどうなってるんだろ。</description>
    </item>
    
    <item>
      <title>3DCAD</title>
      <link>http://blog.syundo.org/post/708/</link>
      <pubDate>Sun, 24 May 2009 01:34:42 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/708/</guid>
      <description>CoCreateとかいう3DCADが無料だってトラ技に書いてあったから、ダウンロードしてみました。
無料のわりには凄いのではと思いました。
でも使い方というか、どういう構成になってるのかわかりません。
円を描くアイコンが2つあるんだけどその違いがわかりません。
めんどくさがりの自分にはメニューがいっぱいありすぎて理解しようとする気が起こらないのが問題か。もう2Dでいいもん！って思ってしまいます。
どこか解説してくれてるとこ無いかなあ。無いんだなこれが。と思ったら公式に配布してるチュートリアルがあった。勉強しよ。気はすすまないけど。
マイコンのほうはAD変換やってみないとねとか思ってます。
それと足先の座標をなんか行列でくねくね指定できないかと必死で「ヒューマノイドロボット」読んでるんですがどうもわかりません。他の本も参考にしてみようかなあ。問題はページを読み進めるたびに前の内容を忘れてしまうことかもしれない。
ああ、そろそろロボットとして形のあるものが欲しいなあと思ってきました。でも今考えてる構造がほんと設計しにくくて。見た目も気になるし。ああ、でも練習会とか出たい。
ぐだぐだ言わずやれって感じですが。ほんと自分と同年代のひとが行動力ありすぎて見習いたいです。ごーすとさんとかエクセリオンのはっしーさんとか。
五月病なのだろうか。</description>
    </item>
    
    <item>
      <title>まさにムダ状態！！</title>
      <link>http://blog.syundo.org/post/707/</link>
      <pubDate>Mon, 18 May 2009 01:45:48 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/707/</guid>
      <description>現在ののSTK7125EVBの様子↓
何も無いね。つまらんね。
これ実験用ボードって位置づけだけどさすがに三段重ねはおもしろい。
USBで開発出来るってのが便利だから切り離せない。いや、それよりもこれだけで8千円くらいするから使い倒してやろうという気持ちのほうがウエイトとして大きいのかも。
だってこれほんといっちゃあ悪いけどXrossFinderうまく使いこなせないひとにはUSBぐらいしか価値ないよほんと。不甲斐ないよ、自分が。H-UDIとか書いてあるけどわけわからんし。そんでこんな三段重ね作ってから、秋月に連結フレームなるものが売っていることを知った。くそおおおお。これだったら、実験終わったら切り離せばオッケーじゃん。オシロ買うときに一緒に・・・・・・。そんでオシロ買ったよ。
大きさのわりに軽い！軽いぞおおお！説明書が英語だあああ。
でもなんとか使えた。よかった。
しかし、つらい出費なのであった。</description>
    </item>
    
    <item>
      <title>RAMデバッグとか</title>
      <link>http://blog.syundo.org/post/705/</link>
      <pubDate>Sat, 16 May 2009 22:03:49 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/705/</guid>
      <description>なんとかRAM上にプログラム展開できるようになりました。
これでいちいちフラッシュROM書き換えしなくて良くなります。
XrossFinderはなんか難しすぎて調べてもよくわかんなかったので、ルネサスが配布しているSH-2用モニタプログラムとHterm、Flash書き込みはSTK-7125EVBについてきたFlashWriterEXforSH7125、という組み合わせでデバッグ環境を整えました。
これは便利ですねー。難しい設定しなくても文字が出力出来るのがまた良い。
あ、それと秋月でオシロスコープ買いました。
これでコントロールボードの信号見てみると、思うとおりに出力できていたので、サーボにつないでみると、ばっちりセンターに！当たり前か。
ジッタも無いみたいでいい感じです。理論的にはデューティーはズレがないはずだから当たり前か。
RAMデバッグの方法とかPWM生成法について詳しいことはは忘れないうちに技術情報として書いておこうと思います。
ページ左上に乞うご期待！まあ、このブログ定期的に見てるひとなんていないだろうけど。</description>
    </item>
    
    <item>
      <title>HEW･･････なんて頼もしいの！！</title>
      <link>http://blog.syundo.org/post/703/</link>
      <pubDate>Tue, 31 Mar 2009 11:19:44 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/703/</guid>
      <description>HEW４は自動的にいろんなファイルを生成してくれるから逆に超初心者には分かりづらいです。
何ができていて何を自分で記述しなければならないのか。
うーん。まだまだだけどわかったことを自分のためのメモとして書いておきます。
・resetprg.cにパワーオンリセット時の動作が記述してある。そこでmain()が呼び出されているので、やっぱりmain()はmain関数っぽく扱えばよい。_INITSCTライブラリ関数も用意されていて、これも呼び出されている。
・dbsct.cは_INITSCT()のためのものらしい。ここで各セクションの番地情報が記述されている。
・intprg.cにはやっぱり割り込み時の動作を記述すればいい。vect.hがインクルードされているから#pragma interrupt　云々は書かなくても良いかも。vect.hに書いてあった。
・vecttbl.cはベクタテーブル
・sbrk.cはよく分からないけどヒープ領域ってやつに関する記述みたい。
・iodefine.hはレジスタ操作用の構造体とかの宣言。「C言語でH8マイコンを使いこなす」で詳しく説明してある。
・sbrk.hはよくわからん。ヒープ領域関係。
・stacksct.hはスタック領域のサイズの設定
・typedefine.hは意味不。ﾍ(ﾟдﾟ)ﾉ ﾅﾆｺﾚ?
・vect.hにはベクタテーブルの関数のプロトタイプ宣言がしてある。
こんなもんでしょうか。手探りなかんじなので間違ってるかもしれません。
しかし何故動かないサーボよ。
ハードウェア的な問題なのか？</description>
    </item>
    
    <item>
      <title>アルミ塗装法</title>
      <link>http://blog.syundo.org/post/701/</link>
      <pubDate>Sun, 29 Mar 2009 15:13:01 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/701/</guid>
      <description>アルミ塗装について
１</description>
    </item>
    
    <item>
      <title>RCB-1を攻略しようぜ</title>
      <link>http://blog.syundo.org/post/700/</link>
      <pubDate>Sun, 29 Mar 2009 11:41:11 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/700/</guid>
      <description>RCB-1について
１、２、３、４、５</description>
    </item>
    
    <item>
      <title>戦力確認</title>
      <link>http://blog.syundo.org/post/696/</link>
      <pubDate>Fri, 13 Mar 2009 00:14:31 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/696/</guid>
      <description>おひさしぶりですー。やっと受験勉強も終わりました。
一年のブランクがあったため持ち物を確認します。
まず一回だけ大会に出場したロボットT-RAC
サーボ20個使用。現在、除脳ロボットになってますがRCB-1とATmega32ボードで制御してました（しようとしました・・・・・・）
次！ロポタルさんからクリスマスに頂いたプレゼント
PRSFF09Ⅱ10個セット！
ロポタルさんの期待に応えられず1年間放置ｗ（いや別に何も依頼されてませんよ。しかし使うのが使命だと思いこんでました。）
全く触っていないマイコンボード達
SH7125ボード、インターフェース付録基盤V850とFRマイコン。
なんで買ったのだろうか。付録ってのに弱いんだなあ。
これには当分手を付けられないと思います・・・・・・。
1年のうちになにか新しいサーボ出たのだろうか。
ハイトルクサーボはもう値段的に私が関われるレベルでないのでまあいいか。
ちょっとずつなにかやっていきたいです。
・・・・・・最近気になってるのは、メカトロ仙術のほりさんの記事のリンク先にあった球体関節人形のページ。簡単ではないけどなんとか作れそう。
あれをそのまま外装にするのは忍びないのでバキュームで作るのもいいかもしれない。
骨格としてはやっぱりベルトドライブ直交が必要かな。それで身長は60センチ程度。なんとかきれいに球体関節を動かしたい。アイディアはあるので図面に起こしてみようかなあ。</description>
    </item>
    
    <item>
      <title>釈迦はいいひとだったから！</title>
      <link>http://blog.syundo.org/post/695/</link>
      <pubDate>Sun, 30 Mar 2008 19:05:25 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/695/</guid>
      <description>これ以上開発を進めるために超えなければならない技術的壁が大きいのがある時点で分かっていたのでもう進まないことにしてました。
故にわんだほーには出たかったけど出られませんでした。
中学生のときから目指してたロボワンもついに出ませんでした。
一年後には志望の大学に受かって、思いっきり好きなロボットに打ち込みたいです。
一年後また戻ってきます。
それまでこのブログは休止します。</description>
    </item>
    
    <item>
      <title>仮定</title>
      <link>http://blog.syundo.org/post/694/</link>
      <pubDate>Tue, 12 Feb 2008 16:53:49 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/694/</guid>
      <description>一年後こうだったらいいな。
サーボモーターがもっと安くなる。
小型CNCのもっと安いの出る。
ロボワン地方大会が岐阜でも開催される。
・・・・・・もう思いつかない。
一年後こうしたいな。
新機体作る。
自作のコントロールボードにする。
物理っぽい演算で求めたモーション。
自律動作。
センサ搭載。カメラも。
スピーカー搭載。
OS搭載。
俺サーボに挑戦。
誰もやってないことをやる。</description>
    </item>
    
    <item>
      <title>帯鋸</title>
      <link>http://blog.syundo.org/post/693/</link>
      <pubDate>Sat, 15 Dec 2007 19:56:13 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/693/</guid>
      <description>おはこんばんはー。
どっちだよ。
さて、前から買おうかなーとか思っていたバンドソーをついに買いました。
ホーザンのとか4万くらいしちゃうからどうせ高いんだろなーと思ってましたが、6000円くらいの見つけましたのでつい。EC-1405Sってやつ。
大丈夫なのか？まだ使ってないんで分かりません。ボール盤も5000円くらいのだからもういいやと思ったり（爆
組み立ててみると、テーブルが不安定。なんかガタガタ動きました。しかしびくとも動かない会心の固定位置を発見し、ネジをぎゅっと締め、なんとか安定させることに成功。ふう。
英語の説明書と、日本語の説明書が入ってました。日本語のは注意警告各部名称が書いてあるだけ。英語のは絵が描いてあるだけで、ほら、簡単でしょ？とでも言いたげな感じ。それよりも問題なのはその絵と届いた品がまったく違うこと！
まあよくあることです・・・・・・。
説明書を見ながら、僕はバンドソーが暴走して、のこぎりがきゅるきゅる飛び出してきて手が血だらけになる様を想像していたのでした。バンドソー怖いね。
中はこんな感じ。ちゃんと蓋が閉まってるかチェックするスイッチがついてました。（写真に写ってるのは電源スイッチなんでこれじゃない）
なぜだかちょっと安心。
変速はできんようです。
のこぎりの張りの強度が微妙で、ちょっと強く張りすぎるとプーリの端に寄ってきてしまうらしい。（弟談
買おうと思ったのには少しばかり理由がありまして・・・・・・
この部品を切るためです。足の部品計16点・・・・・・。
さすがに今までのジグソー＋糸鋸では僕の寿命縮みます。
平行リンク足にしようと思いまして。
一部穴あけ、ポンチしてあります。
まあ、じつはこの足、欠陥に気づきまして、全部ボツです（泣
穴が開いてないところを使ってもう一回設計貼り直します・・・・・・。
だってリンクの軸間20㍉って、いくらなんでも狭すぎですもん。
眠たい状態で設計するとすごいことになりますね。朝3時までやったんですから。
貼る前に気づけよ。
ところでぼやき日記の彼よ。1000番踏んだので、プレゼントくれwww</description>
    </item>
    
    <item>
      <title>うまくいきました・・・・・・が</title>
      <link>http://blog.syundo.org/post/692/</link>
      <pubDate>Wed, 21 Nov 2007 22:14:58 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/692/</guid>
      <description>えまのんさん。コメントしてくださり、ありがとうございます。
感謝感謝でいっぱいです！！涙
やっぱり受信バッファクリアするとこがおかしかったみたいです。
2バイト受信毎にクリアしないと前のキー入力が残るという現象があったので、そうしていたんですが（受信データ確認するifを入れるまではこれでうまくいってた）、消してみても、問題なくいきました。受信のタイミングがずれたとき、1バイト読み取るようにもしてみました。
さて、晴れて思い通りの信号を送ることに成功したわけですが、どうもRCB-1の反応が良くない・・・・・・RCB-1よ。お前は一体何なんだ！！あと何が足りない！！ツンデレ？
こんなときオシロスコープなんかがあったらいいのかなあと思ったのであった・・・・・・。
メイン関数だけ載っけてみます。
void main(void)// メイン関数
{
&amp;nbsp; rs_init (br2400, txb, sizeof(txb), rxb, sizeof(rxb));
&amp;nbsp; fdevopen(rs_putchar, rs_getchar, 0);
&amp;nbsp; SREG |= (1&amp;lt;&amp;lt;SREG_I); &amp;nbsp; unsigned char a,b;//受信データ用
&amp;nbsp; rs_rx_purge ();//一応受信バッファクリア
&amp;nbsp; &amp;nbsp; while(1){
&amp;nbsp; &amp;nbsp; if (rs_rx_buff ()) {//受信バイト数が０でなければ真
&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;a=rs_getc();//前１バイト受信
&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;b=rs_getc();//後１バイト受信
&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;
&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;switch(a){//前一バイトチェック
&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; case 0xf1 :
&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp; switch(b){//後一バイトチェック
&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;case 0x01 :send_command(0xf1,0x01);//２バイト送信</description>
    </item>
    
    <item>
      <title>うんざり</title>
      <link>http://blog.syundo.org/post/691/</link>
      <pubDate>Sun, 18 Nov 2007 00:26:15 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/691/</guid>
      <description>何がうんざりってプログラムがうまくいかなくてうんざりです。
ずっとこのブログをみていただいている人（いるのか？）は気づいておられるかもしれませんが、ATmega32マイコンボードのBTC067とRCB-1を繋げて、BTC067をいわゆるセンサーボードに仕立て上げようとしています。何ヶ月も。
約２ヶ月前に無線からのコマンド読みとりはできていて、今それに応じてモーション再生させる段です。もちろんRCB-1にコマンド送るってことですよ？
RCB-1にコマンド送る際にネックになってるのは、一定周期で何らかのデータを送信し続けないと、RCB-1が待機状態になってしまうこと。
そのために、無線からの受信データが無いときは0xf000を送信するようにしたいんです。これ、メカトロ仙術さんの日記を参考にさせていただきました。
そしてそれを実現すべく書いたプログラムが下。
しかし残念ながら受信データがスルーされてる？っぽくて受信データ無しを送信しまくります。
これを応用して距離センサや加速度センサを使いたいと思っているのですが・・・・・・。
だれかアドバイスお願いします・・・・・・と言いたいところだけどこんな限定的な環境下について理解してくださるひとはいるのだろうか・・・・・・。
＊以上の文章を読んでない方、以下のプログラムはうまくいってないので参考にしてはいけませんよ。コンパイルはできてるけど。そもそもこのブログを信用してはいけませんよ。
#include &amp;lt;avr/io.h&amp;gt;
#include &amp;lt;avr/interrupt.h&amp;gt;
#include &amp;lt;rs.h&amp;gt;
char txb[10],rxb[10];&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;//通信用バッファ
//指定したｍS間待つ関数
void wait_ms(int msec)
{
&amp;nbsp; int count;
&amp;nbsp; TCCR2 |= (1&amp;lt;&amp;lt;CS22);
&amp;nbsp; for (count = 0; count &amp;lt; msec; count++)
&amp;nbsp; {
&amp;nbsp; &amp;nbsp; TCNT2 = 0x00;
&amp;nbsp; &amp;nbsp; while(TCNT2&amp;lt;250){}
&amp;nbsp; }
}
void send_command(unsigned char a, unsigned char b)//２バイト送信する関数
{
&amp;nbsp; int count2;</description>
    </item>
    
    <item>
      <title>RCB-1を攻略しようぜまたーりと(5)</title>
      <link>http://blog.syundo.org/post/690/</link>
      <pubDate>Sun, 30 Sep 2007 18:20:56 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/690/</guid>
      <description>今回はKONDOロボット用コントローラーKRC-1の受信機KRR-1からの信号について。
いつかの日記でKRR-1からの信号はスタートビット等がマイコンと反転しているので、そのまま繋ぐと読み取れないということを書いたと思います。
それで、今回は74HC04をPD0にかませて、反転させました。（マイコン側の形式を反転させる方法があるかもしれませんが僕にはわからない～）
反転させた受信機からの信号は以下のようになります。
2400bps,8ビット,ストップビット1,パリティ無し,フロー制御無し
＜シフト＞
無し　：0xf00x0f
左手上：0xf1 0x1f
左手下：0xf2 0x2f
右手上：0xf4 0x4f
右手下：0xf8 0x8f
＜ボタン左手＞
無し：0x00
上：0x01
右上：0x05
右：0x04
右下：0x06
下：0x02
左下：0x0A
左：0x08
左上：0x09
＜ボタン右手＞
無し：0x00
上：0x10
右上：0x50
右：0x40
右下：0x60
下：0x20
左下：0xA0
左：0x80
左上：0x90
信号は2バイトで、1バイト目がシフトキー、2バイト目が16個のボタンと対応しています。
なんか自分用のメモ的要素が強いです。というかメモです。
2010/10/9
間違いを発見、修正しました。
いやぁ、ずいぶんと長い間誤った情報を発信し続けていたのですねー・・・</description>
    </item>
    
    <item>
      <title>KRC-1&#43;KRR-1からの信号読み取り成功</title>
      <link>http://blog.syundo.org/post/689/</link>
      <pubDate>Sat, 29 Sep 2007 23:29:54 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/689/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>つーてんかくの本棚</title>
      <link>http://blog.syundo.org/post/688/</link>
      <pubDate>Thu, 27 Sep 2007 23:24:21 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/688/</guid>
      <description>知ってましたか？管理人のＨＮはつーてんかくなんですよ？
大阪人でもないのにこんなのを使ってしまったことをものすごく後悔しております。
ところで最近ノートパソコンにもＡＴＯＫが入って、変換が楽になりました。
やっと期末テストが終わったので更新しようと思います。
今回は私の本棚にあるロボット関係の本の紹介です。
 ROBO‐ONEのための二足歩行ロボット製作ガイド (RoboBooks)販売元：オーム社
Amazon.co.jpで詳細を確認する

ROBO-ONEとはなんぞや。って人におすすめ。まずはイメージをつかめる。
３年前に買った本なので、ルールについての情報は古いｗ。
しかし今となっても参考になる王道が示されている。
ただし初心者がいきなり全部理解できるレベルではない。
 二足歩行ロボット製作超入門―バッテリーからRCサーボまで (RoboBooks)著者：浅草ギ研
販売元：オーム社
Amazon.co.jpで詳細を確認する

これを読むまでタイマでパルスをどう作るか解らなかったｗ。ほんとに入門に最適。
 60日でできる! 二足歩行ロボット自作入門著者：吉野耕司
販売元：毎日コミュニケーションズ
Amazon.co.jpで詳細を確認する

いつまでたっても目指す機能を実現する方法がわからないので、二足歩行ロボットを作ってある程度高度なことをするには何が必要か知りたいと思って買った。最近。
この本はC、VB、C++の知識が無いとはっきり言って何にも分からないと思う。
プログラミングの勉強するのに60日で足りるかというと、疑問。
そんなわけで、帯には、対象が現役プログラマーのみなさん、だと書いてあった。
まあプログラミングの勉強は避けては通れない道ってことですよ。
まったく同じコントロールボード作れば、プログラム配布されてるので、そのまま使うという手もあるかと思ったのだが（それが目的で買ったわけでないが）、マイコンがもう販売されていないとのことで残念。良い本だけに残念。
 H8マイコン完全マニュアル著者：藤沢 幸穂
販売元：オーム社
Amazon.co.jpで詳細を確認する

マイコンがどんなものなのかわかる。ただ、アセンブリを追っていかないといけないってのが辛かったので結構読み飛ばしたｗ。
まあしかし今でもアセンブリに挑戦したほうがいいのか悩む。
デバッグの項もなんか難しかった覚えが。
 C言語でH8マイコンを使いこなす著者：鹿取 祐二
販売元：オーム社
Amazon.co.jpで詳細を確認する

組み込み系のためのプログラミング手法。そういうものをつかめる。
いろいろ難しいこと説明して、その後、HEWを使えば簡単ですよ～という流れで面白かった。統合開発環境はひとをダメにするな。
 SH‐1 &amp;amp; SH‐2マイコン入門―組み込み機器に最適なCPUのアーキテクチャから応用まで (TECHI)販売元：CQ出版
Amazon.co.jpで詳細を確認する

SHマイコンの勉強のために買ってみたけど、まだあんまり読めていない。
Interfaceの連載記事を本にしたみたい。SH-2中心な内容。
 いまからはじめる電子工作著者：町田 秀和
販売元：オーム社
Amazon.co.jpで詳細を確認する

ものすごくわかりやすかったという覚えもない。製作例が示されているのはいいけど、その回路図が理解できなくてひどく落ち込んだような。
もうすこし物理勉強しないとだめなのかも。どうだろう。
 トランジスタ技術 SPECIAL (スペシャル) 2008年 01月号 [雑誌]販売元：CQ出版</description>
    </item>
    
    <item>
      <title>さようならさようならこんな遠い異国の果てでお別れするなんて本当に辛い</title>
      <link>http://blog.syundo.org/post/687/</link>
      <pubDate>Mon, 27 Aug 2007 22:17:48 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/687/</guid>
      <description>筋少の。
まさに「majic touch」ですね。
やりすぎはよくないと言っておきながら、最後はどうみてもやりすぎ（違う意味で。
すいません最近ネタ無いんで。
ロボ開発中。
更に追加
ガチだと思う</description>
    </item>
    
    <item>
      <title>宿題が倒せない</title>
      <link>http://blog.syundo.org/post/686/</link>
      <pubDate>Sat, 18 Aug 2007 20:55:37 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/686/</guid>
      <description>宿題が～終わら～ないよ～。
夏は短かったようです。
しかし今年の夏は良かったですねー。
初めて大会出られましたし。
Robot Watch の写真において目線が変、仏頂面であることは心残りですが（それだけかい
書くの忘れてたけれど、ロボットフォースの岩木さんには初参加だからとよくしてもらえました。ありがとうございました。
香川の本大会出たいですなー。しかし時間ないかもしれません。模試とかあるし。
もう潮時か・・・・・・？。早いなあ・・・・・・。
いまは平行リンクによってサーボ二つ減らす設計を考えたり描いたりしております。
平行に動いちゃうということで、感覚どおりに動かせないような感じだったので、独自に立式して計算で求められないかと試行錯誤しておりましたが、できませんでした。いかんせんsin,cosがまとめれません。
よく考えてみると、モデルベース開発の本にも書かれているROBO-ONEでよくつかわれている式をそのまま使えることに気づきました。平行リンクだからって頑張りすぎました（？
膝の角度を出さなくていいだけ・・・・・・。
ヲレ数学は依然だめだなー・・・・・・。大丈夫か理系。
あとは一年かけてもできていないRCB-1との通信を・・・・・。やらないからできないんですが。いいところでマイコン焼いちゃったし。</description>
    </item>
    
    <item>
      <title>自重汁！！</title>
      <link>http://blog.syundo.org/post/685/</link>
      <pubDate>Sat, 11 Aug 2007 20:17:51 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/685/</guid>
      <description>学校の図書館にリクエストしたら買ってもらえた
だれが読むんだよこれｗｗｗ
図書館って予算そんなにあるのかなあ。
  二足歩行ロボットのモデルベース開発 販売元：オーム社
Amazon.co.jpで詳細を確認する 
 これならわかるSuperHマイコン 著者：藤沢 幸穂
販売元：オーム社
Amazon.co.jpで詳細を確認する</description>
    </item>
    
    <item>
      <title>遅れた</title>
      <link>http://blog.syundo.org/post/684/</link>
      <pubDate>Thu, 09 Aug 2007 20:36:45 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/684/</guid>
      <description>更新するのが遅れた。もうタイミングを逃したのではないかと・・・・・・。
いや、まあそんなことを言ってないで書きましょう。
ロボットバトルin大同工業大学
まず、11時に集合だったのに30分遅れてしまいました。朝までねばっていたのがいけませんでした。徹夜どこの騒ぎじゃありませんでしたよ。学習したこと・・・・・・バッテリーのサイズは変えてはいけない。
変則３ｍ走
対戦？相手はころいどくん。思った以上に安定した歩きで、40秒くらいで転ばずに完走できました。総合順位は１２？位くらいだったかなーと。（いやもうそんなこと気にしてる余裕なしでした）
チームDE箱押し
３ｍ走での結果がなかなかだったので、レグホーンとRL03　Indra　なんてすごいロボとチームになってしまいました。体重差ありすぎー。
他のロボに近寄ると倒れる、倒れるために起き上がる・・・・・・ような状況に。
終盤は横から見学♪ふっふーん♪でした（？）
体重を意識したもっと捨て身なモーションを用意しておけば良かったなーと思いました。
ロボビリヤード
右足キックモーションのみで挑戦・・・・・・1点も入れられませんでした。他の人が手を使ってボールを動かしているのを見て、自分の準備不足を痛感。そういえばT-RACもしゃがめば下に手がつきました。
そんなかんじで、３ｍ走２ポイント、箱押し1ポイント、ビリヤード0ポイントで予選順位18位でした。
大会に出てみて、意外だったのは、自動起き上がりをしているひとが少なかったこと。起き上がりを素早くできるから、あえて自動化しなくても落ち着いて操作すればよいからでしょうか。また、強豪の移動のスピードと安定性には驚きました。どうすればあんなんになるんでしょうか・・・・・・。
ロボットの大会に参加するのはすごくおもしろい。観るのとは全然違いますね。
もっと強くて決勝に進出できるようなロボットを作りたいと思いました。
モチベーション維持のためにも定期的に大会参加するのはとってもいいことだと思います。今も頭の中野望で一杯（笑</description>
    </item>
    
    <item>
      <title>いってくるお</title>
      <link>http://blog.syundo.org/post/683/</link>
      <pubDate>Thu, 02 Aug 2007 20:18:09 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/683/</guid>
      <description>明日はげんしけんのある某大学のオープンキャンパスに行きます。
結構遠いし、午前中から始まるので、始発でも間に合いません。もうすぐ夜行バスに乗って東京へ向かいます。
ねー明後日は大同の練習会だってーのにねー。いい度胸だねと。
キックやら箱押しのモーションは一応完成しているので、帰ってきたら微調整といったところでしょうか。初の大会参加だからいまいちどんな風にすりゃあいいのかわかりません。
歩行系はなかなかいい感じにまとまったのではないかと思います。動画公開しようかな。暇がないなあ。
つくづく不安になる内容。大丈夫かよ。</description>
    </item>
    
    <item>
      <title>RCB-1を攻略しようぜまたーりと(4)</title>
      <link>http://blog.syundo.org/post/682/</link>
      <pubDate>Mon, 30 Jul 2007 10:36:41 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/682/</guid>
      <description>今回はRCB-1とは切っても切れない関係にある Heart to Heart によるモーション作成について。
モーションのデータはパソコンではCSVファイルとして保存されます。このデータはホームポジションを基準としての角度になってます。だからホームポジションが変わっても同じ動きが再現できるんですねー。ということはサーボを挿す位置を気をつければ、多少軸配置が違っても、KHR-１のサンプルモーションが使えちゃうのですー。たぶん。
そこで私が考え出したのが、エクセルDE加算歩行。ホームポジションは角度0のデータになることを利用したものです。二番煎じかもしれませんが。
どういうものかというと、歩行の要素を重心移動、足の上げ下げ、足の振りに分けて、それぞれモーションを作り、最終的にはエクセルで加算し、なめらかな動きを作ろうというものです。じつはこの歩行の方法はかの九州大学のカンファレンス資料を参考にしています。というか、パクリ。こういうことね↓
  １から３を加算すれば歩行っぽくなります。
これに加えて上体の傾き、接地直前の足裏の動き、手の振り等他いくつかのパラメーターを設けて、調整するとなんとか歩くようになりました。
まあ加算っていっても僕はCSVファイルの数値をコピーしてSUM関数使ってるだけなんで、なんとも簡単なんですが。もっとかっこよくやる方法もあるでしょうが・・・・・・。
歩行動画 途中で右旋回をしてます。</description>
    </item>
    
    <item>
      <title>月曜日なのに機嫌悪いのどうするよ</title>
      <link>http://blog.syundo.org/post/681/</link>
      <pubDate>Mon, 30 Jul 2007 09:23:37 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/681/</guid>
      <description>もうたまりません。マイコン焼いちゃいましたよ。RCB-1のほうでなくてよかったけど。
周辺回路の影響かなんかでうまく書き込めなかったので、電源回路から外して、安定化電源を電源にしたら、まんまとプラスマイナス間違えてました。
やっぱり眠いときに危険なことをやると失敗は起こりますね。
じゅっ！と音がして煙出てきましたから。
時が見えてきそうな心境でした。
「僕は取り返しのつかないことをしてしまった！！マイコンを殺してしまった！！」
「安定化電源は大変なものを盗んでいきました。あなたのマイコンです。」
「マイコンっつーのはどこを間違えると焼けるんだっけ？」
「電源です。肺の下の。」
「肺の下ってーと」「ここか」
「はうっ」
「そこはみぞおちですよー」
もういいや。すぐに王国に注文したけれども、間に合うかどうか・・・・・・。</description>
    </item>
    
    <item>
      <title>とっぷらんなー</title>
      <link>http://blog.syundo.org/post/680/</link>
      <pubDate>Sat, 21 Jul 2007 19:03:24 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/680/</guid>
      <description>あまりの驚きに、携帯から投稿してみる。いまちょっと家にいないから。
今日、NHK教育のトップランナーにあの高橋さんが出演するみたい。番組表をみるところ。
あ、といっても、改造バカの高橋さんじゃないですよ？
クロイノの高橋智隆さんです･･････（笑）
会場騒然！ロボ走る
デザインとメカの両立
『中腰でなく、人間のようにヒザを伸ばして二足歩行するロボットを作る。
ロボットクリエーター高橋智隆は、技術者たちが長年かけてクリアできなかった課題を克服した･･････』　楽しみー。
23時からです。たぶん。
  ロボットの天才 著者：ロボットクリエイタ-・高橋智隆
販売元：メディアファクトリー
Amazon.co.jpで詳細を確認する 
次、マガイモ。いやいや。
  高橋敏也の動く!改造バカ一台 著者：高橋 敏也
販売元：air impress
Amazon.co.jpで詳細を確認する</description>
    </item>
    
    <item>
      <title>なんか出るココ！</title>
      <link>http://blog.syundo.org/post/679/</link>
      <pubDate>Mon, 16 Jul 2007 20:18:24 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/679/</guid>
      <description>なんか弟が書いててくれたので補足。一応このブログは弟とのロボット関連共用になってるらしいですよ？弟と仲がいいねー。ですって？いやー。彼はKHR-1買う時にお金出してくれましたからねー。いやー。僕が信じているのはこれだけですよ・・・・・・ﾌﾌ。（人差指と、親指でわっかを作り、ほかの指をのばし手のひらが天井に向くように、胸の前で手を固定。眉毛は下げ、やらしい笑みをうかべる）
さて補足。
電池はニッケル水素。2300mAh、十個で約四千円。若松で買いました。
容量の割に完成品より安くて夢のようなんですが、ハンダ付けが怖い。「ば、爆発しちまう・・・・・・っ！！」という機動戦士のキャノンのひとのセリフが頭をよぎります。
充電器は秋月で。急速充電でいいのか不安な急速充電器です。ほんとに小一時間で完了しちゃいます。急速との切り替えができるようにスイッチつけてみようかな。
で、題名の、なんか出るココ。についてですが、やっと練習会に出ることにしました。
ロボットバトルin大同工業大学　に出ます。
まだ歩けてないけど！！！やばいやん。なんとかしてー。
休日は宿題の消化に追われてしまいまつ。集中力がたりないんだよなー。</description>
    </item>
    
    <item>
      <title>訂正</title>
      <link>http://blog.syundo.org/post/678/</link>
      <pubDate>Sun, 15 Jul 2007 21:05:56 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/678/</guid>
      <description>バッテリー変わりました。（はやっ！
　青色になりました。ちなみに弟が更新中！
　物干しざおカバーというものでカバーしました。全長４ｍ。長いです。
&amp;nbsp; 　搭載するとこうなります。このまえとあんまかわってねー！
そうとうもったいないのですが、完成度はものすごいです。
　なんだかひとつ、ポエムを書きたくなりました。
しかし書く予定はありません。期待しない様に。</description>
    </item>
    
    <item>
      <title>バッテリー（あさのあつこ著ではない）</title>
      <link>http://blog.syundo.org/post/677/</link>
      <pubDate>Sun, 15 Jul 2007 18:34:21 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/677/</guid>
      <description>　弟です。今回は兄に代わって更新します。ああ。
&amp;nbsp; 　バッテリーが完成しました。ただそれだけのことです。（え？
送検微茶。
　そのバッテリーの充電器が完成しました。ちなみに私がつくりました。
　基板うらの様子です。ちょっと改造しています。
なにがしたかったのかは不明、私にはわかりません。
　バッテリーはこのように搭載する予定です。
バーコード頭にみえます。いわゆる教頭あたま。
　このバッテリーがあればズオンはあと１０年は闘えますよ。
　以上です。なんかまとまらないな。　（つぎの更新も弟がやっちゃうよ！　え？　だめですか・・・
　</description>
    </item>
    
    <item>
      <title>RCB-1を攻略しようぜまた-りと(3)</title>
      <link>http://blog.syundo.org/post/676/</link>
      <pubDate>Mon, 02 Jul 2007 19:14:29 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/676/</guid>
      <description>今回は低速シリアルについて。前回の反省を生かし、文字のみ。
白→RXD
赤→受信機用の電源。５V。
黒→GND
入力できる信号はTTLレベルのみ。そもそも線の並びが違うので、間違ってもCOMポートと繋いではならないらしい。
2400bps、データ8bit、1ストップ、パリティ無し
まあ、信号の形式については近藤科学さんのページの製品紹介→サポートを見てください。
低速シリアルと純正でないその他製品とをつなげるときに注意することは、入力信号のスータートビットがHigh、ストップがLowになっていること、つまるところ、たいていのマイコンのと反転しているということです。
RCB-1のPICはスタートLow、ストップHighだったと思うので、どっかで反転させてるのかも。送受信機の仕様の関係でそうなのかな？詳しくないのでわかりませんが。
7404などのロジックをかませて反転させてから入力するとよい。
いや、別にトランジスタで組んでもらってもかまいませんよ？僕の知識の及ぶところではない。
なんかまとまらないけど、おわり。
＊この内容について問題、欠陥等ございましたら、すみませんがコメントかメールでお知らせください。すぐさま改善、または削除します。</description>
    </item>
    
    <item>
      <title>色ついた</title>
      <link>http://blog.syundo.org/post/675/</link>
      <pubDate>Sun, 01 Jul 2007 22:30:52 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/675/</guid>
      <description>塗装しました。
どうやって塗ろうかと調べましたが、なかなか参考になるサイトが少なかったので、この機会にここに書き留めておこうと思います。
（１）やすりをかける
300から500番の荒さの耐水ペーパーで削ります。これはなぜかというと、（２）にある、メタルプライマーの食いつきを良くするためです。プラモデルなどに使う、サーフェーサーはプラスチックの表面を溶かして、食いつきを良くする作用があるらしいですが、メタルプライマーにはありません。しっかりとまんべんなくやってください。本当にめんどくさいですけどね。めんどうなときは弟にやらせましょう（笑）
疲れた弟、倒れるの図
僕の布団で寝ないでほしい・・・・・・。とは言えない。言ったが。
（２）脱脂
工業的には、電気分解？とか使ってやるらしいですが、油が落ちればいいので、台所用洗剤で洗います。水で煮沸するとかいう方法もあるらしいですが、効果のほどは不明。
（３）メタルプライマーを吹く
まんべんなく吹いてください。
（４）色を塗る
一度に厚く塗り過ぎるとだまになります。二、三回に分けて、薄くまんべんなく塗るといいでしょう。近くで吹きすぎると、泡？が発生して表面がつぶつぶになってしまします。多少離して吹きましょう。しかし、遠すぎると風に流れていつまでたっても色がつきません（経験済みｗｗｗｗ）
（５）検査
塗れてないところがあったら塗ります（笑）。つぶつぶがあったら、削って、塗りなおします。私、じつは今回めんどくさくなってきたので、つぶつぶは放置してあります・・・・・・。このつぶつぶはおいしそうなつぶつぶだからいいつぶつぶなんだ！！と言い聞かせましょう。
（１）から（４）までのどれかを省くとうまくいかないらしいらしいです。アルミの塗装は金属塗装のうちでも難しいものなので、気をつけましょう。
おわり</description>
    </item>
    
    <item>
      <title>RCB-1を攻略しようぜまた-りと(2)</title>
      <link>http://blog.syundo.org/post/674/</link>
      <pubDate>Sat, 30 Jun 2007 19:46:06 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/674/</guid>
      <description>第二弾っ！RCB-1高速シリアルはどうなってるか！はー・・・・・・。
115200bps、データ8bit、ストップ1bit、パリティ無し
これはフツーに既知でしょうなー。というか前回のを考えればこういう配置だってのはわかるわけで・・・・・・。まー。でも確かRCB-1コマンドリファレンスには書いてなかったから。
うーん。しかし文字で書けば分かる内容だなあ。前回記事の影響もあって図解というのにこだわり過ぎた。勉強しろよ高校生。




＊この内容について問題、欠陥等ございましたら、すみませんがコメントかメールでお知らせください。すぐさま改善、または削除します。</description>
    </item>
    
    <item>
      <title>RCB-1を攻略しようぜまた-りと</title>
      <link>http://blog.syundo.org/post/673/</link>
      <pubDate>Fri, 29 Jun 2007 00:28:32 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/673/</guid>
      <description>今の私は１年前の私とは違う！！　地道に研究してその結果をまとめて保存してゆくのだ。
ICSｰPC　インターフェース　2　のピンアサイン
分解すりゃあわかりますな。これは・・・・・・。</description>
    </item>
    
    <item>
      <title>届いた</title>
      <link>http://blog.syundo.org/post/672/</link>
      <pubDate>Tue, 26 Jun 2007 22:03:18 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/672/</guid>
      <description>王様から頼んだ品が届いた。
ＵＳＢ－ＲＳ２３２Ｃ変換ケーブル
Heart to Heartで動作確認。良好。これでもう短いケーブルと、ホコリまみれのパソコンの裏との格闘をしなくても済む。しかし、ドライバがＦＤに入ってたのは唖然とした。メーカーのサイトでダウンロードした。次
１１ＴＨロボワンのＤＶＤ。販売はべステクらしい。「ＲＯＢＯ－ＯＮＥは株式会社ベストテクノロジーの登録商標です。」となっていて驚いた。そうなんだなー。
画質はあんまり良くなかったように思える。
予選は入っていない。軽量、重量それぞれ決勝戦が入っている。
まだ軽量級しか見ていないが、ずいぶんシビアになったものだなあと思った。
スリップしないような安定した歩行が必須なんだな。まあわかってたことだが・・・・・・。
今日はこんなことで終わり。</description>
    </item>
    
    <item>
      <title>黄泉かえる</title>
      <link>http://blog.syundo.org/post/671/</link>
      <pubDate>Mon, 25 Jun 2007 21:48:09 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/671/</guid>
      <description>模試とか中間とか実力とか諸々のテストを潜り抜け、いま、ここに復活！！
さて、次のロボワンにはなんとかして出るぞー！！できればなんか練習会に出るぞー！
と思ったけど、結構定員が埋まっちゃってるのが多かったー！！ぎりぎりだ。なんとかして歩かせないと申し込めない。
今何をやってるか。性懲りもなくＲＣＢ－１の信号とか探ってます。またかよー！！
だってー。アプリがないとモーション作るの大変なんだもーん。甘えたこといってんじゃねえ！！
いや、visual C#とか勉強し始めましたが・・・・・・難しくてなかなか習得できないのよー。
仕方ないのよ。
まずはリベンジということで、ＢＴＣ０６７と通信させてみて、ダメだったら、つぎはＳＨで。もう必要なクロックオシレータは購入済み。やるぞー。
ＳＨで通信できたら、疑似逆キネみたいなの（どんだけ－？）をやれるんじゃないかと思う。ははは。夢だけ広がるとまた桜田一門。
大会出るには派手じゃないとだめだなー。色ないとだめだなー。と思って、どんな感じになるか、シュミレート。以下
 あくまでシュミレート。ＰＣ上で色を塗ってみるの術。ちなみに弟にやらせた。
イメージは「アッ○マー」。モノアイ貼るかどうかが問題。
勢いがなくなる前にいろいろやろうと思う。</description>
    </item>
    
    <item>
      <title>本</title>
      <link>http://blog.syundo.org/post/670/</link>
      <pubDate>Mon, 25 Jun 2007 21:46:48 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/670/</guid>
      <description>なんか面白い本を発見したので紹介します。
「ぼくらのみかたん。―黒森高校未科研です」です。
二足歩行ロボットでロボコンに出ようとするお話です。
ZMPとか言い出すのでおもしろいですよー。
なにより、あとがき必見って感じですよ。
ちょっと登場人物多すぎて、というより、描写が少なくて、終始わからないキャラクターがいるのが気になりますが。
もうあえてここには感想書きません。それはこれがアレな作品だからです・・・。
ラノベに慣れないひとには書店で見つけるのが難しいと思われます。
ここは一発、アマゾンで。
たくさん売れれば続編が出るかもしれない。
はは。俺は何をやってる。
  ぼくらのみかたん。―黒森高校未科研です 著者：富永 浩史
販売元：富士見書房
Amazon.co.jpで詳細を確認する</description>
    </item>
    
    <item>
      <title>生存報告</title>
      <link>http://blog.syundo.org/post/669/</link>
      <pubDate>Wed, 04 Apr 2007 18:55:08 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/669/</guid>
      <description>いやー。全く更新しないと見捨てられちゃうよー。と思いまして。
ｓｈ７１２５のデータシートとか、HEWのヘッダファイルとかを印刷して、研究して、なんとかもうすぐPWM信号を出すプログラムが書けそうです。
なら書け！って感じですけど、ひとまず宿題が終わらないー。旅行しすぎましたー。準備の時間も要りましたし、いろいろ心配で心配で勉強に手がつかなかったというのもあります。
帰りに秋葉によったりしましたしね！かの有名な王国にも行ってきましたよー。いやー。こんなこと言ってもなんですが、意外と狭かったー。エレベーターしか無いって不便じゃないすか。
ところでふつうヘッダファイルって印刷するんかなあ。紙に出力しないと理解できないんすよねー。
オールドタイプの限界か！なんのこった。
ボーイスカウトのプロジェクトとして「ロボワン参加への道！」とかやろうかなーと思ったりしています。趣味でアワード一つクリアできるなんていいですからね。あ、関係者にしか分からない感じに・・・。
まあ色々頑張りますわ。
夢見るために生まれたー♪５！４！３！２！１！飛べるよ頑張る男の子ー♪</description>
    </item>
    
    <item>
      <title>ひとよひとよに</title>
      <link>http://blog.syundo.org/post/668/</link>
      <pubDate>Wed, 28 Feb 2007 22:01:22 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/668/</guid>
      <description>さてさて、サクラダファミリア路線まっしぐらの最近です。
HEW　I/O関連のヘッダファイルについて。
iodefine.hという名前で自動作成？されてます。
サンプルプログラムとかで見かける、MTUとかDDRとかそういう名前は最近やっとわかったんですが・・・・・・ヘッダファイルの中での構造体や共用体で宣言されています。
Cでロボ動かしたい人、構造体、ポインタ、ビットフィールドとかまで勉強したほうがいいです。
私はまったく手探りで、どうやったらマイコンでC言語が使えるのかと思いながら、悶々とCの勉強をしてまいりました。ということで今回は超初心者は何をしたらいいかというお話です。
ともかく、サーボ動かすため、マイコンの勉強をしなければなりません。
PICとかは知りませんが、H8とかSHを使ってる方が多いので、まずはH８マイコンの勉強をしてみるといいのでは。（入門にはPICがいいとか聞きますが・・・・・・）
Cはそのあいだに勉強してください。Cで組み込み系を動かすためには、マイコンの知識が不可欠なので、並行して勉強を。パソコンで動くプログラムはできるけど、マイコンではどうしたらいいんだろう・・・・・・と思いはじめるかもしれませんが、Cの基礎知識がないと、参考書も読めません。あるていど読みましょう。
マイコンではどうしたらいいのだろうということですが、ここでおすすめな本が「C言語でH８マイコンを使いこなす」です。実際のレジスタの操作方法や、スタック量の算出についてまで解説されています。Cの構造体やポインタまで知ってないと読んでもわかりません。
加えて、電子工作関連の本も読むといいかもしれません。俺サーボとかやるためです。
俺サーボは漢の浪漫・・・・・・。憧れますね。
なーんて、未熟者の私が書いたところでなんとやら。
でも実際、いろいろ解説してくれているページはあるけれども、じゃあこれらを理解するためには何を勉強したらいいの！！とロボはじめたての私は困りました。専門用語が多すぎて何のことやらわからなかったのです。
これを参考にしていただいて、一緒にロボットはじめましょう。私も駆け出し。ゼロから始めました。
誰かの役に立つ文章を書けたかもしれないと満悦。
自己満足か。ではでは。</description>
    </item>
    
    <item>
      <title>新兵器は化けも！！</title>
      <link>http://blog.syundo.org/post/667/</link>
      <pubDate>Fri, 16 Feb 2007 17:44:08 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/667/</guid>
      <description>あー。もう近藤さんの信号探るのはまっぴらだー。心が折れそうー。
のあああああぁぁっっ！！
と奇声をあげて、いつのまにか買っていました。
STK-7125EVB-KIT。
一応、入門にぴったり！！ということなので、がんばりましょうか。
ともかく、届いたので見てみましょう。
箱に入っていました。おお！！
中身はこんな感じ。（ピンヘッダを半田付けした後の図
USBで開発ができる・・・・・・。
ひとまず「ROBO-ONEのための二足歩行ロボット製作ガイド」を参考にして、サーボ用パルスを出せるようにしようと思います。
あー。そういえば、この本は初めて買ったロボット関連の本だったなあ。当時は意味不明だったけど。
ヘッダファイルってあるのかなあ。HEWの使い方わからんなあ・・・。</description>
    </item>
    
    <item>
      <title>無題です</title>
      <link>http://blog.syundo.org/post/666/</link>
      <pubDate>Wed, 31 Jan 2007 17:44:03 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/666/</guid>
      <description>最近タブブラウザの存在を知りました。タブブラウザって使いやすいなあ・・・・・・。まあ、VISTA出てから気づいてももう遅いんですけども。VISTAに付属の新しいIEはタブブラウザになってるらしいですから。
近状。スキー研修から帰ってきて、やったーこれでロボができるぞと思っていると、すぐ外部模試の予定がありました。その次の日には英検がありました。勉強せざるを得ませんでした。その試練を潜り抜け、さて、やるか。と思っていたら、来週には実力テストが・・・・・・。ひどく範囲広いです！
来週の実力テストを潜り抜ければ、あとは特色化選抜の関係で、休みがたっぷりなので、それまでおあずけ。みんな頑張ってるんですもん・・・・・・。
考えるだけで作業ができないこのごろ、やはり思考は逆運動学へ。
やってみたいなあ。逆キネ歩行。
中学のころは専門書読んでも何にもわかりませんでしたが、最近はわりと理解できるようになりました。そんなことで、学校の数学の授業とかは楽しいですよね・・・・・・。特に今、三角関数やってますから、どうしても逆運動学のことを・・・・・・。</description>
    </item>
    
    <item>
      <title>ひさし</title>
      <link>http://blog.syundo.org/post/665/</link>
      <pubDate>Sun, 21 Jan 2007 08:11:05 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/665/</guid>
      <description>修学旅行やらなんやらで（長野県へスキー。隣だよ！近！）、ロボットは進展せず、ああロボワン出られるかな。でも、驚いたことには、弟がブラケットの曲げをやっておいてくれたのですよ。帰ってきたら、足付いてたので驚きました。
まあ、しかし、ボクは頑張ったのですよ。旅行の前日まで、コンパイル→動かん→コンパイル→回路をいじる→動かん→コンパイル･･････を繰り返していたのです。
そして、ついに動きました。
が、なんでこんなに安定しないのか。
幾多もの挫折の末、RCB-1との通信は高速シリアルでするようにしていますが、マイコンからの信号では安定しないのか、プログラムががさつすぎるのか･･････。
もうRCB-1の時代じゃないかな･･･････なんて考えたりしますが･･････。いや、実際ネット巡っても、RCB-1との通信は難航を極めるようで。
RCB-3とかEZ-SERVOとか買っちゃうか･･････。いや、どうせならSHマイコンで･･････。
まあ、せっかくちょっとうまくいったので、もうちょっとやってみます。</description>
    </item>
    
    <item>
      <title>あけましておめでとうございます</title>
      <link>http://blog.syundo.org/post/664/</link>
      <pubDate>Mon, 01 Jan 2007 01:11:00 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/664/</guid>
      <description>実はまだロボの名前が決まっていません。
そこで、この機会に、決めようと思います。候補は
放下著　
洗心　
雨奇晴好　
回光返照　
和敬清寂　
柳緑花紅真面目
ははは。打つの疲れた・・・。笑えない冗談もほどほどに。
ああ、じゃあ今思いついた　T-RAC　にしよう。
T－RAC、T-RAC。T-RACを今年もよろしくおねがいします。</description>
    </item>
    
    <item>
      <title>ぺ</title>
      <link>http://blog.syundo.org/post/663/</link>
      <pubDate>Sat, 30 Dec 2006 20:24:45 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/663/</guid>
      <description>なーんで通信うまくいかないのか、紙一重で分かりそうに無い日々。
反転したあとに 00001110 としたいので、元データは
11110001、
Cでは二進数無理なので　0ｘｆ1　とする。
データは２バイトなので、もうひとつのデータは先ほどとおなじようにして、仮に　00000001、0ｘ01としまして（ちなみにRCB-1低速シリアル通信コマンドにおいて１バイト目はシフトキーの状態、２バイト目は方向キーの状態を表す。２バイト送信後の約16ｍｓのリセットを忘れずに。）
配列を作って、あとはGCC　Developer　Liteのライブラリ関数を使い、
「for (i=0; i&amp;lt;2; i++){
&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;rs_putc(data[i]);
&amp;nbsp; &amp;nbsp; }
//data[ ]は２バイトの配列、ここに先ほどのデータを入れる」
TXDから送信！！
そうするとマイコンはRCB-1と輝かしい通信を行い、ロボットは動き出す！！DASU！！ださない！！なぜ！！
私の思考パターンに欠如をみとめられたどなたか、どうぞアドバイスをください。コメントしてください。おまえ何あほなことやってんだよとつっこんでください。それとも、意味ワカンネーよ説明しろでも。説明不能な可能性かなり高いですが。</description>
    </item>
    
    <item>
      <title>とほほ</title>
      <link>http://blog.syundo.org/post/662/</link>
      <pubDate>Fri, 29 Dec 2006 21:48:40 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/662/</guid>
      <description>最近全く進展ありません・・・。
いろいろやりましたけどね！！例えば・・・
1.kondoの無線ｋｒｃ－１をcomポートに繋いで
simple termでどんな信号かよんでみよう！！作戦
手元にmax232などｒｓ232ｃドライバレシーバICが無かったので、この前買ったインバータICで信号反転のみした。それで良かったのか不明だが、なんとなく通信はできた。
ボタンを押すたびに現る奇怪な文字を楽しむ。押しても何も現れないボタンが多く、なんの実験にもならなかった。
2.なんでもいいからとにかく反応してくれ、やみくもモーション設定作戦
RCB-1の外部コントローラ設定で、広範囲にわたって、同じモーションを設定し、どんなふざけた信号が低速シリアルから入ってきても、どこかのコントロール割付が該当して、反応してくれる可能性をあげて、もし動いたら喜ぶ作戦。
動いても意味は無く、しかも、全く動いてくれなかったので、やる気最低レベルへ。
3.atmegaとrcb-1低速シリアルの間に挟んでみたインバータICを取ってみる作戦。
どんなふざけた通信がなされているのか、rcb-1は反応する。しかし、二つ指定したモーションのひとつだけ再生される。ははは。
4.Ｄｒ－ＧＩＹさんのところで紹介されてたｋｒｃ－１、ｒｃｂ－１直結回路を74ｈｃ04を使って作って遊ぶ。ちゃんとうごくから嬉しい。ううん・・・。だから低速シリアルには反転した信号を入れなきゃならんと思うのだが、3.の結果はなんだろう。

これから、機体のほうももう少し手直し必要なので、それをはじめようと思います。停滞状態から、自分の無知から、少し逃げることに・・・。ははは。息抜きです息抜き</description>
    </item>
    
    <item>
      <title>なぜなぜ？</title>
      <link>http://blog.syundo.org/post/661/</link>
      <pubDate>Sat, 23 Dec 2006 21:03:09 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/661/</guid>
      <description>さあて、まともに信号反転もできない人ですよ。どうしましょう。
入力しても出力してないような感じですよ。74ｈｃ04ですよ。なんででしょう。
低速シリアルでｒｃｂ－１とマイコン繋げるときには反転しなくちゃならん。というのはネット巡っててわかったんすけども。それ以前にICの使い方がいまいちわからん！勉強不足甚だしい。回路図を下に。抵抗の根拠はなし。なんとなく。勘。（だからだめなんだなあ・・・）
ここで豆知識 KONDOのケーブル、赤がRXD、白がTXD、黒がGND　ですよ～
別に豆知識じゃねーー！</description>
    </item>
    
    <item>
      <title>涼宮ハルヒのＫＨＲ－1</title>
      <link>http://blog.syundo.org/post/660/</link>
      <pubDate>Fri, 15 Dec 2006 20:22:10 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/660/</guid>
      <description>なんかすごいのを発見してしまった！！↓</description>
    </item>
    
    <item>
      <title>いいタイトル思いつかない</title>
      <link>http://blog.syundo.org/post/659/</link>
      <pubDate>Fri, 15 Dec 2006 19:56:37 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/659/</guid>
      <description>信号反転してやればうまく通信できるかな・・・と思って74ｈｃ04をつけてみる。
うまくいかない。ああ、そういえば抵抗入れとかないかんかも。
半田づけ慣れていないせいか手がプルプルする。
うまく動いた　という報告が非常にしたい今日このごろ。この沼にはまってから、さて何ヶ月経つだろう・・・。
さっきクレヨンしんちゃん見てたら、明らかに真紅のパクリキャラがでていた。
それに、あのネコ耳はアルティメットガールの・・・？
そういえばもうすぐローゼンの特別編やるなあ・・・オデルーテュレ？だったっけ？</description>
    </item>
    
    <item>
      <title>ぬーん</title>
      <link>http://blog.syundo.org/post/658/</link>
      <pubDate>Tue, 05 Dec 2006 18:33:27 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/658/</guid>
      <description>ATmegaのスイッチがwrite側なのにサーボが動いてしまう。リセットボタン押すたびに動いてしまう・・・。これは・・・！！何だ！？
ATmega32のデータシート読んでみる（好意により日本語訳されたやつ・・・）
・・・分からん
一応RCB－１との通信はできているようなのだが、再生させたい二つのモーションのうち、ひとつだけしか再生してくんない。ツンデレ？</description>
    </item>
    
    <item>
      <title>やっと終わったぜ・・・</title>
      <link>http://blog.syundo.org/post/657/</link>
      <pubDate>Tue, 05 Dec 2006 18:22:42 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/657/</guid>
      <description>長かった中間テストもやっと終わりました。おつかれさまです。
しかし、家に帰るまでが中間テストです。気を抜かずに安全に気をつけましょう。
つきましては2週間後に課題テストがあります。
しっかり勉強し・・・・・・何っ！？何だって！？これは陰謀か！ええい俺はロボットをやってやるんでい！散々我慢させやがって！もうだめだだめだだめだ・・・・・・特に理数科系教科がやばいのに理系に進もうなんてしてる人はちゃんと勉強しましょう・・・・・・（言葉を失う）
このまま学年末まで走らせるつもりか！
こんなことばかり言ってても仕方が無いので腕の長さを新ロボワン規定に合わせる。
（なにが仕方が無いのやら・・・）
写真↓まだ撮ってないけど</description>
    </item>
    
    <item>
      <title>はぁ・・・</title>
      <link>http://blog.syundo.org/post/656/</link>
      <pubDate>Sat, 18 Nov 2006 14:55:10 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/656/</guid>
      <description>RCB-1の低速シリアルとATmega32を繋げてるんですが。どうもうまくいかない。
１．RCBの電源入れておいてATmegaでプログラム走らせる→無反応
２．RCBの電源入れておいて、ATmegaのスイッチをWrite側にして電源入れて、その後スイッチを反対に動かす→脱力した後、動き出す。しかし1モーション目だけ。2つのモーションを無限繰り返しにしているつもりなのに。もう1度同じ操作をすると、もう1方のモーションが1回だけ再生。
３．1モーション目と2モーション目の間隔を20ｍｓから1000ｍｓに変えると、脱力、再生、脱力を繰り返しながらモーション1と2を無限再生する。20ｍｓの理由はRCB-1コマンドリファレンスに
「信号は2バイトですが、2バイト目を送出後、次の信号を送るまでの間に約17ｍｓのリセットが必要となります」
と書いてあったから。
ぬーん・・・。この世の中はままならぬものですたい（意味不明）
なんとかなりませんかね・・・
もしよかったらアドバイスいただけると僕はまたぴるぴるできるかもしれません。</description>
    </item>
    
    <item>
      <title>先生</title>
      <link>http://blog.syundo.org/post/655/</link>
      <pubDate>Wed, 15 Nov 2006 17:02:07 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/655/</guid>
      <description>僕のクラスの担任は数学の先生です。とっても分かりやすくて良いです。
しかし、それにも関わらず、僕のクラスは学年最下位をキープしまくってます。
悲しいです。僕にもその要因があるので・・・。先生もかたみが狭いです。
そんなこともあって先生は今日から中間テストまで朝早く来てみんなで勉強することを提案されました。テーマは「10分早く起きて10点アップ・・・ッ！」だそうです。
数学実力テスト平均切り組の私が参加しないわけにはいきません。
今日は早く起きました。
先生はちゃんとしたプリントを作ってくれていました。いい問題です。
えー。めんどくさいし出たくないなあという気持ちも無いことはなかったのですが、先生の気持ちとその有難さを考えると、次の中間いい点取ってやる！という気持ちになります。
中間テストに向けマジ勉強する気になったので、ロボットはおあずけ。ちっと作れませんね・・・（涙　追記11月18　やっぱ無理少しはロボットやる！！ははは・・・なんという意志の弱さ・・・</description>
    </item>
    
    <item>
      <title>近状</title>
      <link>http://blog.syundo.org/post/654/</link>
      <pubDate>Mon, 06 Nov 2006 21:07:28 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/654/</guid>
      <description>日曜に名古屋の模試を受けに行ったので、これはチャーンス・・・とロボット関係諸々のスポットを訪ねました。
1.ロボットミュージアムin名古屋
ロボットの展示とか、買い物できる場所があります。
展示室の入場料が高校生1000円だったので、自分の財布の状況におののき、結局入りませんでした。びんぼーしょー。
ロボットデパートにはぬーぼとか、まのいとか、RB1000とかがいました。（入場料無料）
番龍もいたんですが・・・誰が買うんだろ・・・あんなの。
2.大須のとあるビル
中にツクモロボット王国がありました。そこでR-Blue Tシャツを購入。あとコネクタとか。
外国人のあまりの多さに驚く。秋葉原もそうなんでしょうか・・・？
3.　と箇条書きした割にはいろいろ行ってないことに気が付く。まあ一応模試をうけるため・・・ですからね。
帰ってからプログラムを書く。意味不明、予想不可な動きをする。
がんばろう・・・。</description>
    </item>
    
    <item>
      <title>RCB 動いた</title>
      <link>http://blog.syundo.org/post/653/</link>
      <pubDate>Sat, 28 Oct 2006 17:37:07 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/653/</guid>
      <description>おおー・・・・。うあああぁっぁっぁ・・・。低速シリアルで繋げたら普通に動きました。でもまだ不確定未知不思議なことがあるので詰めていかないと・・・うーんでもテスト近すぎ！ああ、そのうえ外部模試まで申し込んでしまっているーっ！きー！時間ねー！高校生こんなに忙しいと思わなんだ。
最近、なんでもいいからロボットの大会に出たい心境です。あ、できればROBO-ONE決勝出場権つきの・・・。
さっさとテストを終わらして（できれば好成績・・・ふふ・・・あぁ・・・）無限歩行をしこみたいです！あと無線も！</description>
    </item>
    
    <item>
      <title>フフフ・・・（なにやら不敵な笑み）</title>
      <link>http://blog.syundo.org/post/652/</link>
      <pubDate>Wed, 04 Oct 2006 18:06:23 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/652/</guid>
      <description>ついにやってしまった、やってしまいましたよ。　曲げの精度に急激に目覚めた僕は最高の神器たる折り曲げ機（４サーボ）を無意識的に購入してしまったのですよ。フフフフフ
これで曲げの精度は完璧でしょう。これがあればジ○ンはあと10年は戦えますよ！
（追記　10/7　と、思いきや、90度にまげるには結構繊細な感覚が必要でした。それに、曲げるところに穴がないと、やはり折り曲げ機といえどもきついです）
　
　</description>
    </item>
    
    <item>
      <title>あ、でけた</title>
      <link>http://blog.syundo.org/post/651/</link>
      <pubDate>Sat, 30 Sep 2006 15:54:18 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/651/</guid>
      <description>ええと、件（くだん）のプログラムについてですけども・・・・・・なんかですね・・・十六進数なのに0xつけ忘れておりまして・・・・・・そりゃあデータのとこにエラーでるわなと。んで、コンパイルはできましたよ。
でもですね、RCB-1に繋いでも動かないんすね。意味無いっすね。
コマンドについてもう少し調べなくては。</description>
    </item>
    
    <item>
      <title>あふああ</title>
      <link>http://blog.syundo.org/post/650/</link>
      <pubDate>Fri, 29 Sep 2006 21:05:30 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/650/</guid>
      <description>ｂｔｃ067でｒｃｂ－１をうごかすヤシですが・・・・・・まったく進歩しましぇん（泣
期末考査のせいで最近手をつけてなかったので、今日プログラムしてみましたが、やっぱりコンパイルできないのですよ。手詰まりです。うう。どうすりゃいいかな・・・・・・。
「男は黙って思索する」・・・R-Blueの吉村さんのページでみかけたような・・・・・・？
だまって考えましょうかね</description>
    </item>
    
    <item>
      <title>こ・ま・ん・ど？</title>
      <link>http://blog.syundo.org/post/649/</link>
      <pubDate>Sat, 19 Aug 2006 21:11:50 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/649/</guid>
      <description>ｂｔｃ０６７でＲＣＢ－１を動かしてやる計画ですが・・・。どうもプログラムがうまくいきません。ええと・・・渡すコマンドのところにエラーが出るので、どうもコマンドに間違いがあるらしいが？うんと・・・どうすりゃいいでしょうねぇ・・・。
いかんせんプログラムの勉強不足で、超入門の本を読んでいるだけではどうにも難しいです。なんとなくデータ型が、渡すデータに合ってないような気がするんですけども・・・。
もうちょっとググッたりして調べてみることにします。</description>
    </item>
    
    <item>
      <title>誕生日</title>
      <link>http://blog.syundo.org/post/648/</link>
      <pubDate>Sat, 05 Aug 2006 11:59:01 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/648/</guid>
      <description>８月３日は妹の誕生日でした。・・・・・・僕の誕生日は７月３０日ですが、まあそれはどうでも良い。
妹のケーキは大好きな（妹が！！）プリキュアのものでした。写真↓
キュアイーグレット（舞）ですね。この絵はケーキ屋さんの手描きらしくて、下手なイラストレーターより断然うまいなあと感動しました。（感激のあまり写真とりまくり！！）
しかし！！残念ながらケーキは食べるためにあって、それ以外のものではありません！！すなわち↓
なんかとってもシュールな光景です。これを見て妹は大喜びしてました・・・・・・。
「あははは、かおきれてるー！！」って。
来年は、咲（キュアブルーム）がいいなあ・・・・・・。
おい、早くロボを作れ。はいはい。</description>
    </item>
    
    <item>
      <title>なぜ？</title>
      <link>http://blog.syundo.org/post/647/</link>
      <pubDate>Tue, 01 Aug 2006 15:52:40 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/647/</guid>
      <description>ＲＣＢ－１との通信がうまくいきませんー。線いじっちゃだめだった？そんなことは無いはず。ちゃんと直しましたもん。うぅぅぅぅ。考えよう。</description>
    </item>
    
    <item>
      <title>いっきに</title>
      <link>http://blog.syundo.org/post/646/</link>
      <pubDate>Tue, 01 Aug 2006 15:46:14 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/646/</guid>
      <description>ＲＣＢ－１つなげていっきに２０軸動かしてやるー！！
ということで、ＲＣＢ－１をＢＴＣ０６７につなげることをもくろんでおります。
ＲＳ２３２Ｃレベルのを出せばＫＨＲ－１をＰＣで動かすのといっしょになるのではないかと思うのです。はい。だからATmegaのＣＮ３からコマンドを出してやろうかな～と。
うまくいくかなあー。
話は飛びますが、僕は金が惜しかったのでＢＴＣ０６７をＰＣにつなぐための通信ケーブルを買っておりません。だからＲＣＢ－１用？のケーブルを使っています。問題は線の配置が違うこと。ＲＣＢ－１に書き込むときとＢＴＣ０６７に書き込むときにはいちいちマイナスドライバでピンを入れ替えなければなりません。
これを簡単にできないものかとも考えております。
脳内で妄想していてもしょーがないのでさっそくやってみようと思います。</description>
    </item>
    
    <item>
      <title>野望（なんだか恥ずかしくなってきたので改題</title>
      <link>http://blog.syundo.org/post/645/</link>
      <pubDate>Mon, 31 Jul 2006 15:44:59 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/645/</guid>
      <description>宿題をやっていて分からなくなってくると、ついついロボットの設計を考えてしまいます。いまのところまったくそんな予算は無く、そんな予定も無いのですが。
でも、もし作れるならば次の機体は「萌え」方面だー！！と思ってかきかき↓
落書きの神はとどまることを知らず・・・・・・↓
&amp;nbsp; そこで突然変異！！おお！！グレイト！！・・・・・・↓
萌え機体の課題は細い腕と、細い足にあるようですね。
足の付け根を描くときに行き詰まって、ごまかしてしまいました。
まあ体を大きくすれば、見た目のバランスは良くなるでしょうが、中身がスカスカなのはちょっとなあ。
ここで「こんなのを作る技術が君にはあるのか？」と自問自答。「・・・・・・」
夢をもってやるのは良いことです。ハイ。
まずは今作ってる機体をば完成へと。ですね</description>
    </item>
    
    <item>
      <title>プログラムしてみたお</title>
      <link>http://blog.syundo.org/post/643/</link>
      <pubDate>Mon, 31 Jul 2006 15:00:31 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/643/</guid>
      <description>「二足歩行ロボット超入門」を参考にしてプログラムしてみました。（参考と言うより丸写ししたと言ったほうが正しい）
ええと、どういうプログラムかというと、ボードから”Ｈｅｌｌｏ”という文字が送られてくるというものでして、つまりええと・・・・・・。</description>
    </item>
    
    <item>
      <title>初めてユニバーサル基盤で</title>
      <link>http://blog.syundo.org/post/642/</link>
      <pubDate>Mon, 31 Jul 2006 14:38:59 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/642/</guid>
      <description>王様で注文したＢＴＣ０６７が届きましたので早速Ｉ／Ｏボード（と言えばいいのだろうか？）を作りました。なにしろ初めてユニバーサル基盤で配置を考えながら作ります。とっても緊張しました。
テスターで計ったところ、ちゃんと５Ｖ電源が動いてました。よかった。
なんだか自分の考えた配置ということで、とても嬉しいですね。


&amp;nbsp; </description>
    </item>
    
    <item>
      <title>もうすこし</title>
      <link>http://blog.syundo.org/post/640/</link>
      <pubDate>Tue, 25 Jul 2006 14:38:24 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/640/</guid>
      <description>もうすこしでアクセス２００です・・・・・・。
どういう手違いでかこんなブログに足を運んでくださり、カウンターを回してくださる人々にものすごく感謝しています。
２００を踏んだ方にプレゼントはありません。
どうして２００でプレゼント企画が発生するのか不明で、説明などできないからです。
プレゼントできるようなものがないという理由もあります。
PS.そもそも我がブログには一般公開できるカウンターがありませんでした。ははは</description>
    </item>
    
    <item>
      <title>超入門で・・・</title>
      <link>http://blog.syundo.org/post/639/</link>
      <pubDate>Sun, 23 Jul 2006 15:59:55 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/639/</guid>
      <description>浅草ギ研さん著の「２足歩行ロボット超入門」を参考にしてatmega32を使ってみたいと思います。センサーが使えるようになりそうなので、ワクワクです。
そういえばＮＨＫの「つくってあそぼ」は「つくってわくわく」に名前が変わってから内容がつまらなくなったように感じた記憶があります。なに昔のこと言ってるんでしょう。
といっても僕は平成生まれなので、ノッポさんは知りませんよ？</description>
    </item>
    
    <item>
      <title>プレセット電圧に注意</title>
      <link>http://blog.syundo.org/post/638/</link>
      <pubDate>Tue, 18 Jul 2006 15:59:08 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/638/</guid>
      <description>ＲＯＢＯ－ＯＮＥに出るロボットは電源をその機体に積まなければならないという規則により 、すべてがバッテリーを積んでいます。
しかし、自宅でプログラムをするときなどはすぐに容量が切れてしまうバッテリーを使うのは面倒です。何度も充電しなければならないからです。
そんなときに便利なのが「安定化電源」です。はい。僕も使っています
まあ今日の本題は安定化電源について浅知恵を披露することにあらず、怖い失敗談について書きたいのです。
←　安定化電源
僕の使ってる安定化電源にはプレセット電圧を設定する機能があります。
簡単に言うと、スイッチを入れるだけで決まった電圧を出力してくれるということらしいです。裏側にあるスイッチでプレセット電圧を設定するか切り替えられます。 

土曜日にロボのモーションを作ろうとして安定化電源を使ったとき、恐ろしい事をしでかしていました。
電源投入後、ロボに触れると、凄い勢いでぶるぶると発振しだしてその振動で移動を始めました。おおすごい！！アホです。よく考えればここまで発振するロボットではなかったハズです。なのに気楽に、あははははは。何でこんなに振るえるんだろうね？とか思っていました、一分ほど。そして、こんなに振るえているとき、電流はどれほど流れるのだろうと思って、電圧計から電流計に切り替えようと手を伸ばしました。そして気づいたのです。なんと約１４ボルトかかっていました。１４ボルト！！！！！！ななななんあな？？？ｑあｗせｄｒｆｔｇｙふじこｌｐ；＠：「」ちょwwwwwwwおまwwwwww！！！！パニク、パニック！！急いでボリュームを絞るも、もう絞れません。ボリュームをどう動かしても電圧は変わりませんでした。
そしてすこし考え、そうか！！電圧計が壊れてるのか！！と思いつきました。買ったばかりなのにひどいです・・・・・。コラ。そんなわけがありません。そうすぐに壊れてたまるか。それに普通こんなに発振せんだろう！！
パニック状態のときにはなにもやってはいけません。ともかく電源を切って一休みしました（ＳＥ　一休さんのＢＧＭ）一休さんのポーズで考えること約１分、プレセット電圧について思い出しました。そうです。裏のスイッチが入っていたんですね。ははは。アホ。
定格６Ｖのロボに約３分間１４Ｖをかけていました。そりゃ、あんなふうに振るえ出すだろうよ。基盤は壊れていません。良かったです。けっこう大丈夫なものなのかな！！？？コラ
プレセット電圧は安全のために最低にしておいたほうがいいようです。何の拍子にスイッチが入ってしまうかわからないので。このスイッチをいじらなければいいんだろとまったくさわっていなかったのがよくありませんでした。しばし反省。</description>
    </item>
    
    <item>
      <title>ロボットってそもそも・・・・・・</title>
      <link>http://blog.syundo.org/post/637/</link>
      <pubDate>Fri, 14 Jul 2006 18:53:12 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/637/</guid>
      <description>最近、ロボットって何なんだろうとよく思います。
ドラえもんやアトムは間違いなくロボットです。彼らは自分で考えて行動しているし、おそらく自意識までもっているのですから！！
でも、ガンダムはどうでしょう。あれは中に人間が入って、操縦しているからこそ動きます。僕はそれでは厳密にはロボットではないのではないかと思いました。
「ロボットと暮らす」という本がありますが、それを学校の図書館で発見したので読んでみました。それには今のところ、経済産業省で定められているロボットの定義が載っていました。 「力センサーやビジョンセンサー等により外界や自己の状況を認識し、これによって得られた情報を解析し、その結果に応じた動作を行う」
うぅぅぅ・・・。なんとも難しいですね。ガンダムが自己の状態を認識しているかというと・・・・・・しているかもしれません。だってどんな場所でもうまく歩けるように、間違いなくセンサーが入っているでしょうし、そのセンサーの値に応じてパイロットの命令に補正をかけている可能性があるからです。
「結果に応じた動作」というのがどこまでを指すのかということもありますね。
移動などの動作の最終意志はパイロットに任されていますが、センサーが入っているならば、結果に応じたなんらかの動作をしているのでしょう。そうじゃなかったらセンサーの意味がないですから。
全く完璧な人工知能が入っていたら、話が楽なんですけどね。
ところで、重大な事実を発見しました。経済産業省の定義によると僕のＫＨＲ－１改造機はロボットではない可能性が高いのです。というか間違いなくロボットではありません。
一応センサーはジャイロセンサというものを積んでいます。でもそのセンサの値はコントロールボードのマイコンには入らず、独立した制御を行う構成になっているのです。ロボットが自己の状態を認識しているとは到底思えません。
となると、ぼくのアレ（ロボットではないならどう呼んでいいのか分からないので）はただの操り人形なのです！ラジコンカーと同等！そうとしか言いようがないですぅ・・・・・・。そうなんです・・・・・・。
とってもくやしいです。エプロンのすそが唾液でだらだらです。うぅぅぅぅぅ。かみかみ。破れた。新しいの買わないと
「いつか必ずぼくのアレをセンサを認識して行動できるようにしてやるぅ！きっと！あの先端が壊れたこうもり傘にかけて！！」　近所迷惑でした。
でもこれから、ロボットについての定義はどんどん変わっていくと思います。技術の進化によってはＡＳＩＭＯさえロボットと呼べなくなるでしょう。
最先端技術の結晶であるロボット開発。その最終目標はやはりアトムやドラえもんなのでしょうか。まだまだ目標に遠いですね。近い未来のロボットのあり方についてもっと考える必要があるのかもしれません。
・ソフトバンク新書　「ロボットと暮らす」　著者　大和信夫　から一部引用しました。</description>
    </item>
    
    <item>
      <title>報告</title>
      <link>http://blog.syundo.org/post/636/</link>
      <pubDate>Sun, 09 Jul 2006 19:24:18 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/636/</guid>
      <description>現状報告です。百聞は一見にしかず、画像を載せてみます。
これはＫＯＮＤＯ製、対有機生命体コンタクト用ヒューマノイドインターフェイス・・・・・・じゃなくて、ええと。二足歩行ロボットを改造したものです。
販売時には１７自由度でしたが、サーボを４つたして、一個壊れて、今は２０自由度になっています 。コントロールボードはＲＣＢ－１というもので２４軸まで動かせます。
 フレームは必要な部分だけは自作してあります。純正フレームは精 度がとても良いので、できるだけ利用したかったからです。フレームに使ったアルミはホームセンターで売っているもので、軟らかいです。厚さは1.5mmです。  今の課題はコントロールボードにあると思います。
ただモーションを再生するだけでは面白くありません。ともかく、まず連続して歩けるようにしたいです。そしてなめらかな方向転換・・・・・・。
技術的に今のままではむずかしいです。本読んで学習しないと。


PS.ＫＨＲ－２ＨＶはいい ですね。あのコントロールボード・・・・・・あの価格。でもいろんなことに挑戦したいから、市 販のボードは我慢です。出来る限り自分の力で・・・・・・・。金もないし。</description>
    </item>
    
    <item>
      <title>ロボットの進化</title>
      <link>http://blog.syundo.org/post/634/</link>
      <pubDate>Tue, 04 Jul 2006 19:56:36 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/634/</guid>
      <description>二足歩行ロボットの大会、ＲＯＢＯ－ＯＮＥが始まってから４年あまりたちました。出場するロボットの性能は驚くほど向上していき、とても安定した「走り」をも再現できるようになりました。平らな床でしかまともに歩けなかったころが嘘のようです。でもこれはＲＯＢＯ－ＯＮＥ常連最強クラスのこと。
僕のロボットは２年ほど前から性能が向上していません。もちろん、キットのそのままの形ではなく、フレームを付け足したり、モータを増やしたりしました。でも、ソフトがそのままなんです。いくら関節が多くても、それをうまく制御できなくちゃだめです。　制御できなくちゃだめだ。　制御できなくちゃだめだ。制御できなくちゃだめだ。制御できなくちゃだめだ。制御できなくちゃだめだ。　本読んで勉強したいと思います。　</description>
    </item>
    
    <item>
      <title>はじめまして</title>
      <link>http://blog.syundo.org/post/632/</link>
      <pubDate>Sat, 24 Jun 2006 23:08:06 +0900</pubDate>
      
      <guid>http://blog.syundo.org/post/632/</guid>
      <description>ココログでブログ始めました。
市販二足歩行ロボットＫＨＲ－１を改造してＲＯＢＯ－ＯＮＥ出場を目指します。
ロボットの名前は未定。いいのがないかしらと思う今日この頃。</description>
    </item>
    
  </channel>
</rss>